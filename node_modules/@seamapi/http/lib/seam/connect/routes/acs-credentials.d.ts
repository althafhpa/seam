import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import type { SetNonNullable } from '../../../../lib/types.js';
import { SeamHttpAcsCredentialsUnmanaged } from './acs-credentials-unmanaged.js';
export declare class SeamHttpAcsCredentials {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsCredentials;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsCredentials;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsCredentials;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsCredentials>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsCredentials;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsCredentials;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAcsCredentialsUnmanaged;
    assign(body?: AcsCredentialsAssignBody): SeamHttpRequest<void, undefined>;
    create(body?: AcsCredentialsCreateBody): SeamHttpRequest<AcsCredentialsCreateResponse, 'acs_credential'>;
    delete(body?: AcsCredentialsDeleteParams): SeamHttpRequest<void, undefined>;
    get(body?: AcsCredentialsGetParams): SeamHttpRequest<AcsCredentialsGetResponse, 'acs_credential'>;
    list(body?: AcsCredentialsListParams): SeamHttpRequest<AcsCredentialsListResponse, 'acs_credentials'>;
    listAccessibleEntrances(body?: AcsCredentialsListAccessibleEntrancesParams): SeamHttpRequest<AcsCredentialsListAccessibleEntrancesResponse, 'acs_entrances'>;
    unassign(body?: AcsCredentialsUnassignBody): SeamHttpRequest<void, undefined>;
    update(body?: AcsCredentialsUpdateBody): SeamHttpRequest<void, undefined>;
}
export type AcsCredentialsAssignBody = RouteRequestBody<'/acs/credentials/assign'>;
export type AcsCredentialsAssignResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/assign'>>>;
export type AcsCredentialsAssignOptions = never;
export type AcsCredentialsCreateBody = RouteRequestBody<'/acs/credentials/create'>;
export type AcsCredentialsCreateResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/create'>>>;
export type AcsCredentialsCreateOptions = never;
export type AcsCredentialsDeleteParams = RouteRequestBody<'/acs/credentials/delete'>;
export type AcsCredentialsDeleteResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/delete'>>>;
export type AcsCredentialsDeleteOptions = never;
export type AcsCredentialsGetParams = RouteRequestBody<'/acs/credentials/get'>;
export type AcsCredentialsGetResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/get'>>>;
export type AcsCredentialsGetOptions = never;
export type AcsCredentialsListParams = RouteRequestBody<'/acs/credentials/list'>;
export type AcsCredentialsListResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/list'>>>;
export type AcsCredentialsListOptions = never;
export type AcsCredentialsListAccessibleEntrancesParams = RouteRequestBody<'/acs/credentials/list_accessible_entrances'>;
export type AcsCredentialsListAccessibleEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/list_accessible_entrances'>>>;
export type AcsCredentialsListAccessibleEntrancesOptions = never;
export type AcsCredentialsUnassignBody = RouteRequestBody<'/acs/credentials/unassign'>;
export type AcsCredentialsUnassignResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/unassign'>>>;
export type AcsCredentialsUnassignOptions = never;
export type AcsCredentialsUpdateBody = RouteRequestBody<'/acs/credentials/update'>;
export type AcsCredentialsUpdateResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/update'>>>;
export type AcsCredentialsUpdateOptions = never;
