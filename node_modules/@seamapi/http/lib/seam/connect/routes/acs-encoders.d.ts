import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import type { SetNonNullable } from '../../../../lib/types.js';
export declare class SeamHttpAcsEncoders {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsEncoders;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsEncoders;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsEncoders;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsEncoders>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsEncoders;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsEncoders;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    encodeCard(body?: AcsEncodersEncodeCardBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<AcsEncodersEncodeCardResponse, 'action_attempt'>;
    list(body?: AcsEncodersListParams): SeamHttpRequest<AcsEncodersListResponse, 'devices'>;
    readCard(body?: AcsEncodersReadCardBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<AcsEncodersReadCardResponse, 'action_attempt'>;
}
export type AcsEncodersEncodeCardBody = RouteRequestBody<'/acs/encoders/encode_card'>;
export type AcsEncodersEncodeCardResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/encode_card'>>>;
export type AcsEncodersEncodeCardOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type AcsEncodersListParams = RouteRequestBody<'/acs/encoders/list'>;
export type AcsEncodersListResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/list'>>>;
export type AcsEncodersListOptions = never;
export type AcsEncodersReadCardBody = RouteRequestBody<'/acs/encoders/read_card'>;
export type AcsEncodersReadCardResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/read_card'>>>;
export type AcsEncodersReadCardOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
