import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import type { SetNonNullable } from '../../../../lib/types.js';
export declare class SeamHttpThermostatsSchedules {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostatsSchedules;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostatsSchedules;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostatsSchedules;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostatsSchedules>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostatsSchedules;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostatsSchedules;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(body?: ThermostatsSchedulesCreateBody): SeamHttpRequest<ThermostatsSchedulesCreateResponse, 'thermostat_schedule'>;
    delete(body?: ThermostatsSchedulesDeleteParams): SeamHttpRequest<void, undefined>;
    get(body?: ThermostatsSchedulesGetParams): SeamHttpRequest<ThermostatsSchedulesGetResponse, 'thermostat_schedule'>;
    list(body?: ThermostatsSchedulesListParams): SeamHttpRequest<ThermostatsSchedulesListResponse, 'thermostat_schedules'>;
    update(body?: ThermostatsSchedulesUpdateBody): SeamHttpRequest<void, undefined>;
}
export type ThermostatsSchedulesCreateBody = RouteRequestBody<'/thermostats/schedules/create'>;
export type ThermostatsSchedulesCreateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/create'>>>;
export type ThermostatsSchedulesCreateOptions = never;
export type ThermostatsSchedulesDeleteParams = RouteRequestBody<'/thermostats/schedules/delete'>;
export type ThermostatsSchedulesDeleteResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/delete'>>>;
export type ThermostatsSchedulesDeleteOptions = never;
export type ThermostatsSchedulesGetParams = RouteRequestBody<'/thermostats/schedules/get'>;
export type ThermostatsSchedulesGetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/get'>>>;
export type ThermostatsSchedulesGetOptions = never;
export type ThermostatsSchedulesListParams = RouteRequestBody<'/thermostats/schedules/list'>;
export type ThermostatsSchedulesListResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/list'>>>;
export type ThermostatsSchedulesListOptions = never;
export type ThermostatsSchedulesUpdateBody = RouteRequestBody<'/thermostats/schedules/update'>;
export type ThermostatsSchedulesUpdateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/update'>>>;
export type ThermostatsSchedulesUpdateOptions = never;
