import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import type { SetNonNullable } from '../../../../lib/types.js';
export declare class SeamHttpAcsCredentialsUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsCredentialsUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsCredentialsUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsCredentialsUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsCredentialsUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsCredentialsUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsCredentialsUnmanaged;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(body?: AcsCredentialsUnmanagedGetParams): SeamHttpRequest<AcsCredentialsUnmanagedGetResponse, 'acs_credential'>;
    list(body?: AcsCredentialsUnmanagedListParams): SeamHttpRequest<AcsCredentialsUnmanagedListResponse, 'acs_credentials'>;
}
export type AcsCredentialsUnmanagedGetParams = RouteRequestBody<'/acs/credentials/unmanaged/get'>;
export type AcsCredentialsUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/unmanaged/get'>>>;
export type AcsCredentialsUnmanagedGetOptions = never;
export type AcsCredentialsUnmanagedListParams = RouteRequestBody<'/acs/credentials/unmanaged/list'>;
export type AcsCredentialsUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/unmanaged/list'>>>;
export type AcsCredentialsUnmanagedListOptions = never;
