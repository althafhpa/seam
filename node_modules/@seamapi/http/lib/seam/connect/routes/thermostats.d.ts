import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import type { SetNonNullable } from '../../../../lib/types.js';
import { SeamHttpThermostatsSchedules } from './thermostats-schedules.js';
export declare class SeamHttpThermostats {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostats;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostats;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostats;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostats>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostats;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostats;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get schedules(): SeamHttpThermostatsSchedules;
    activateClimatePreset(body?: ThermostatsActivateClimatePresetBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsActivateClimatePresetResponse, 'action_attempt'>;
    cool(body?: ThermostatsCoolBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsCoolResponse, 'action_attempt'>;
    createClimatePreset(body?: ThermostatsCreateClimatePresetBody): SeamHttpRequest<void, undefined>;
    deleteClimatePreset(body?: ThermostatsDeleteClimatePresetBody): SeamHttpRequest<void, undefined>;
    get(body?: ThermostatsGetParams): SeamHttpRequest<ThermostatsGetResponse, 'thermostat'>;
    heat(body?: ThermostatsHeatBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsHeatResponse, 'action_attempt'>;
    heatCool(body?: ThermostatsHeatCoolBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsHeatCoolResponse, 'action_attempt'>;
    list(body?: ThermostatsListParams): SeamHttpRequest<ThermostatsListResponse, 'thermostats'>;
    off(body?: ThermostatsOffBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsOffResponse, 'action_attempt'>;
    setFallbackClimatePreset(body?: ThermostatsSetFallbackClimatePresetBody): SeamHttpRequest<void, undefined>;
    setFanMode(body?: ThermostatsSetFanModeBody, options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>): SeamHttpRequest<ThermostatsSetFanModeResponse, 'action_attempt'>;
    updateClimatePreset(body?: ThermostatsUpdateClimatePresetBody): SeamHttpRequest<void, undefined>;
}
export type ThermostatsActivateClimatePresetBody = RouteRequestBody<'/thermostats/activate_climate_preset'>;
export type ThermostatsActivateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/activate_climate_preset'>>>;
export type ThermostatsActivateClimatePresetOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsCoolBody = RouteRequestBody<'/thermostats/cool'>;
export type ThermostatsCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/cool'>>>;
export type ThermostatsCoolOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsCreateClimatePresetBody = RouteRequestBody<'/thermostats/create_climate_preset'>;
export type ThermostatsCreateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/create_climate_preset'>>>;
export type ThermostatsCreateClimatePresetOptions = never;
export type ThermostatsDeleteClimatePresetBody = RouteRequestBody<'/thermostats/delete_climate_preset'>;
export type ThermostatsDeleteClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/delete_climate_preset'>>>;
export type ThermostatsDeleteClimatePresetOptions = never;
export type ThermostatsGetParams = RouteRequestBody<'/thermostats/get'>;
export type ThermostatsGetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/get'>>>;
export type ThermostatsGetOptions = never;
export type ThermostatsHeatBody = RouteRequestBody<'/thermostats/heat'>;
export type ThermostatsHeatResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat'>>>;
export type ThermostatsHeatOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsHeatCoolBody = RouteRequestBody<'/thermostats/heat_cool'>;
export type ThermostatsHeatCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat_cool'>>>;
export type ThermostatsHeatCoolOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsListParams = RouteRequestBody<'/thermostats/list'>;
export type ThermostatsListResponse = SetNonNullable<Required<RouteResponse<'/thermostats/list'>>>;
export type ThermostatsListOptions = never;
export type ThermostatsOffBody = RouteRequestBody<'/thermostats/off'>;
export type ThermostatsOffResponse = SetNonNullable<Required<RouteResponse<'/thermostats/off'>>>;
export type ThermostatsOffOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsSetFallbackClimatePresetBody = RouteRequestBody<'/thermostats/set_fallback_climate_preset'>;
export type ThermostatsSetFallbackClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_fallback_climate_preset'>>>;
export type ThermostatsSetFallbackClimatePresetOptions = never;
export type ThermostatsSetFanModeBody = RouteRequestBody<'/thermostats/set_fan_mode'>;
export type ThermostatsSetFanModeResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_fan_mode'>>>;
export type ThermostatsSetFanModeOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsUpdateClimatePresetBody = RouteRequestBody<'/thermostats/update_climate_preset'>;
export type ThermostatsUpdateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/update_climate_preset'>>>;
export type ThermostatsUpdateClimatePresetOptions = never;
