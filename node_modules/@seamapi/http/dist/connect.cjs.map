{"version":3,"sources":["../src/lib/lts-version.ts","../src/lib/version.ts","../src/lib/seam/connect/parse-options.ts","../src/lib/seam/connect/options.ts","../src/lib/seam/connect/token.ts","../src/lib/seam/connect/auth.ts","../src/lib/seam/connect/seam-http-error.ts","../src/lib/seam/connect/error-interceptor.ts","../src/lib/seam/connect/client.ts","../src/lib/seam/connect/openapi.ts","../src/lib/seam/connect/resolve-action-attempt.ts","../src/lib/seam/connect/seam-http-request.ts","../src/lib/seam/connect/routes/client-sessions.ts","../src/lib/seam/connect/routes/access-codes-simulate.ts","../src/lib/seam/connect/routes/access-codes-unmanaged.ts","../src/lib/seam/connect/routes/access-codes.ts","../src/lib/seam/connect/routes/acs-access-groups-unmanaged.ts","../src/lib/seam/connect/routes/acs-access-groups.ts","../src/lib/seam/connect/routes/acs-credential-pools.ts","../src/lib/seam/connect/routes/acs-credential-provisioning-automations.ts","../src/lib/seam/connect/routes/acs-credentials-unmanaged.ts","../src/lib/seam/connect/routes/acs-credentials.ts","../src/lib/seam/connect/routes/acs-entrances.ts","../src/lib/seam/connect/routes/acs-systems.ts","../src/lib/seam/connect/routes/acs-users-unmanaged.ts","../src/lib/seam/connect/routes/acs-users.ts","../src/lib/seam/connect/routes/acs.ts","../src/lib/seam/connect/routes/acs-encoders.ts","../src/lib/seam/connect/routes/action-attempts.ts","../src/lib/seam/connect/routes/connect-webviews.ts","../src/lib/seam/connect/routes/connected-accounts.ts","../src/lib/seam/connect/routes/devices-simulate.ts","../src/lib/seam/connect/routes/devices-unmanaged.ts","../src/lib/seam/connect/routes/devices.ts","../src/lib/seam/connect/routes/events.ts","../src/lib/seam/connect/routes/locks.ts","../src/lib/seam/connect/routes/networks.ts","../src/lib/seam/connect/routes/noise-sensors-noise-thresholds.ts","../src/lib/seam/connect/routes/noise-sensors-simulate.ts","../src/lib/seam/connect/routes/noise-sensors.ts","../src/lib/seam/connect/routes/phones-simulate.ts","../src/lib/seam/connect/routes/phones.ts","../src/lib/seam/connect/routes/thermostats-schedules.ts","../src/lib/seam/connect/routes/thermostats.ts","../src/lib/seam/connect/routes/user-identities-enrollment-automations.ts","../src/lib/seam/connect/routes/user-identities.ts","../src/lib/seam/connect/routes/webhooks.ts","../src/lib/seam/connect/routes/workspaces.ts","../src/lib/seam/connect/seam-http.ts","../src/lib/seam/connect/seam-http-multi-workspace.ts"],"names":["isAxiosError","axios","serializeUrlSearchParams","axiosBetterStacktrace","axiosRetry","exponentialDelay"],"mappings":"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","file":"connect.cjs","sourcesContent":["export const seamApiLtsVersion = '1.0.0'\n","const seamapiJavascriptHttpVersion = '0.0.0'\n\nexport default seamapiJavascriptHttpVersion\n","import { seamApiLtsVersion } from 'lib/lts-version.js'\nimport version from 'lib/version.js'\n\nimport { getAuthHeaders } from './auth.js'\nimport type { Client, ClientOptions } from './client.js'\nimport {\n  isSeamHttpMultiWorkspaceOptionsWithClient,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  type SeamHttpMultiWorkspaceOptions,\n  type SeamHttpOptions,\n  type SeamHttpRequestOptions,\n} from './options.js'\n\nexport const defaultEndpoint = 'https://connect.getseam.com'\n\nexport const sdkHeaders = {\n  'seam-sdk-name': 'seamapi/javascript-http',\n  'seam-sdk-version': version,\n  'seam-lts-version': seamApiLtsVersion,\n}\n\nexport type Options =\n  | SeamHttpMultiWorkspaceOptions\n  | (SeamHttpOptions & { publishableKey?: string })\n\ntype ParsedOptions = Required<\n  (ClientOptions | { client: Client }) & SeamHttpRequestOptions\n>\n\nexport const parseOptions = (\n  apiKeyOrOptions: string | Options,\n): ParsedOptions => {\n  const options = getNormalizedOptions(apiKeyOrOptions)\n\n  if (isSeamHttpOptionsWithClient(options)) return options\n  if (isSeamHttpMultiWorkspaceOptionsWithClient(options)) return options\n\n  return {\n    ...options,\n    axiosOptions: {\n      baseURL: options.endpoint ?? getEndpointFromEnv() ?? defaultEndpoint,\n      withCredentials: isSeamHttpOptionsWithClientSessionToken(options),\n      ...options.axiosOptions,\n      headers: {\n        ...getAuthHeaders(options),\n        ...options.axiosOptions?.headers,\n        ...sdkHeaders,\n      },\n    },\n    axiosRetryOptions: {\n      ...options.axiosRetryOptions,\n    },\n  }\n}\n\nconst getNormalizedOptions = (\n  apiKeyOrOptions: string | Options,\n): SeamHttpOptions & Required<SeamHttpRequestOptions> => {\n  const options =\n    typeof apiKeyOrOptions === 'string'\n      ? { apiKey: apiKeyOrOptions }\n      : apiKeyOrOptions\n\n  const requestOptions = {\n    waitForActionAttempt: options.waitForActionAttempt ?? true,\n  }\n\n  if (isSeamHttpOptionsWithClient(options)) {\n    return {\n      ...options,\n      ...requestOptions,\n    }\n  }\n\n  const apiKey =\n    'apiKey' in options ? options.apiKey : getApiKeyFromEnv(options)\n\n  return {\n    ...options,\n    ...(apiKey != null ? { apiKey } : {}),\n    ...requestOptions,\n  }\n}\n\nconst getApiKeyFromEnv = (\n  options: SeamHttpOptions,\n): string | null | undefined => {\n  if ('clientSessionToken' in options && options.clientSessionToken != null) {\n    return null\n  }\n  if ('consoleSessionToken' in options && options.consoleSessionToken != null) {\n    return null\n  }\n  if ('personalAccessToken' in options && options.personalAccessToken != null) {\n    return null\n  }\n  return globalThis.process?.env?.SEAM_API_KEY\n}\n\nconst getEndpointFromEnv = (): string | null | undefined => {\n  if (globalThis.process?.env?.SEAM_API_URL != null) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Using the SEAM_API_URL environment variable is deprecated. Support will be remove in a later major version. Use SEAM_ENDPOINT instead.',\n    )\n  }\n\n  if (\n    globalThis.process?.env?.SEAM_API_URL != null &&\n    globalThis.process?.env?.SEAM_ENDPOINT != null\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Detected both the SEAM_API_URL and SEAM_ENDPOINT environment variables. Using SEAM_ENDPOINT.',\n    )\n  }\n\n  return (\n    globalThis.process?.env?.SEAM_ENDPOINT ??\n    globalThis.process?.env?.SEAM_API_URL\n  )\n}\n\nexport const limitToSeamHttpRequestOptions = (\n  options: Required<SeamHttpRequestOptions>,\n): Required<SeamHttpRequestOptions> => {\n  return Object.keys(options)\n    .filter(isSeamHttpRequestOption)\n    .reduce(\n      (obj, key) => ({\n        ...obj,\n        [key]: options[key],\n      }),\n      {},\n    ) as Required<SeamHttpRequestOptions>\n}\n\nexport const isSeamHttpRequestOption = (\n  key: string,\n): key is keyof SeamHttpRequestOptions => {\n  const keys: Record<keyof SeamHttpRequestOptions, true> = {\n    waitForActionAttempt: true,\n  }\n  return Object.keys(keys).includes(key)\n}\n","import type { Client, ClientOptions } from './client.js'\nimport { isSeamHttpRequestOption } from './parse-options.js'\nimport type { ResolveActionAttemptOptions } from './resolve-action-attempt.js'\n\nexport type SeamHttpMultiWorkspaceOptions =\n  | SeamHttpMultiWorkspaceOptionsWithClient\n  | SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken\n  | SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken\n\nexport type SeamHttpOptions =\n  | SeamHttpOptionsFromEnv\n  | SeamHttpOptionsWithClient\n  | SeamHttpOptionsWithApiKey\n  | SeamHttpOptionsWithClientSessionToken\n  | SeamHttpOptionsWithConsoleSessionToken\n  | SeamHttpOptionsWithPersonalAccessToken\n\ninterface SeamHttpCommonOptions extends ClientOptions, SeamHttpRequestOptions {\n  endpoint?: string\n}\n\nexport interface SeamHttpRequestOptions {\n  waitForActionAttempt?: boolean | ResolveActionAttemptOptions\n}\n\nexport interface SeamHttpFromPublishableKeyOptions\n  extends SeamHttpCommonOptions {}\n\nexport interface SeamHttpOptionsFromEnv extends SeamHttpCommonOptions {}\n\nexport interface SeamHttpMultiWorkspaceOptionsWithClient\n  extends SeamHttpRequestOptions {\n  client: Client\n}\n\nexport const isSeamHttpMultiWorkspaceOptionsWithClient = (\n  options: SeamHttpOptions,\n): options is SeamHttpMultiWorkspaceOptionsWithClient =>\n  isSeamHttpOptionsWithClient(options)\n\nexport interface SeamHttpOptionsWithClient extends SeamHttpRequestOptions {\n  client: Client\n}\n\nexport const isSeamHttpOptionsWithClient = (\n  options: SeamHttpOptions,\n): options is SeamHttpOptionsWithClient => {\n  if (!('client' in options)) return false\n  if (options.client == null) return false\n\n  const keys = Object.keys(options).filter((k) => k !== 'client')\n  if (keys.filter((k) => !isSeamHttpRequestOption(k)).length > 0) {\n    throw new SeamHttpInvalidOptionsError(\n      `The client option cannot be used with any other option, but received: ${keys.join(\n        ', ',\n      )}`,\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpOptionsWithApiKey extends SeamHttpCommonOptions {\n  apiKey: string\n}\n\nexport const isSeamHttpOptionsWithApiKey = (\n  options: SeamHttpOptions,\n): options is SeamHttpOptionsWithApiKey => {\n  if (!('apiKey' in options)) return false\n  if (options.apiKey == null) return false\n\n  if ('clientSessionToken' in options && options.clientSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The clientSessionToken option cannot be used with the apiKey option',\n    )\n  }\n\n  if ('consoleSessionToken' in options && options.consoleSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The consoleSessionToken option cannot be used with the apiKey option',\n    )\n  }\n\n  if ('personalAccessToken' in options && options.personalAccessToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The personalAccessToken option cannot be used with the apiKey option',\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpOptionsWithClientSessionToken\n  extends SeamHttpCommonOptions {\n  clientSessionToken: string\n}\n\nexport const isSeamHttpOptionsWithClientSessionToken = (\n  options: SeamHttpOptions,\n): options is SeamHttpOptionsWithClientSessionToken => {\n  if (!('clientSessionToken' in options)) return false\n  if (options.clientSessionToken == null) return false\n\n  if ('apiKey' in options && options.apiKey != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The apiKey option cannot be used with the clientSessionToken option',\n    )\n  }\n\n  if ('consoleSessionToken' in options && options.consoleSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The consoleSessionToken option cannot be used with the clientSessionToken option',\n    )\n  }\n\n  if ('personalAccessToken' in options && options.personalAccessToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The personalAccessToken option cannot be used with the clientSessionToken option',\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken\n  extends SeamHttpCommonOptions {\n  consoleSessionToken: string\n}\n\nexport const isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken = (\n  options: SeamHttpOptions,\n): options is SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken => {\n  if (!('consoleSessionToken' in options)) return false\n  if (options.consoleSessionToken == null) return false\n\n  if ('apiKey' in options && options.apiKey != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The apiKey option cannot be used with the consoleSessionToken option',\n    )\n  }\n\n  if ('clientSessionToken' in options && options.clientSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The clientSessionToken option cannot be used with the consoleSessionToken option',\n    )\n  }\n\n  if ('personalAccessToken' in options && options.personalAccessToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The personalAccessToken option cannot be used with the consoleSessionToken option',\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpOptionsWithConsoleSessionToken\n  extends SeamHttpCommonOptions {\n  consoleSessionToken: string\n  workspaceId: string\n}\n\nexport const isSeamHttpOptionsWithConsoleSessionToken = (\n  options: SeamHttpOptions,\n): options is SeamHttpOptionsWithConsoleSessionToken => {\n  if (!isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken(options)) {\n    return false\n  }\n\n  if (!('workspaceId' in options) || options.workspaceId == null) {\n    throw new SeamHttpInvalidOptionsError(\n      'Must pass a workspaceId when using a consoleSessionToken',\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken\n  extends SeamHttpCommonOptions {\n  personalAccessToken: string\n}\n\nexport const isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken = (\n  options: SeamHttpOptions,\n): options is SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken => {\n  if (!('personalAccessToken' in options)) return false\n  if (options.personalAccessToken == null) return false\n\n  if ('apiKey' in options && options.apiKey != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The apiKey option cannot be used with the personalAccessToken option',\n    )\n  }\n\n  if ('clientSessionToken' in options && options.clientSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The clientSessionToken option cannot be used with the personalAccessToken option',\n    )\n  }\n\n  if ('consoleSessionToken' in options && options.consoleSessionToken != null) {\n    throw new SeamHttpInvalidOptionsError(\n      'The consoleSessionToken option cannot be used with the personalAccessToken option',\n    )\n  }\n\n  return true\n}\n\nexport interface SeamHttpOptionsWithPersonalAccessToken\n  extends SeamHttpCommonOptions {\n  personalAccessToken: string\n  workspaceId: string\n}\n\nexport const isSeamHttpOptionsWithPersonalAccessToken = (\n  options: SeamHttpOptions,\n): options is SeamHttpOptionsWithPersonalAccessToken => {\n  if (!isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken(options)) {\n    return false\n  }\n\n  if (!('workspaceId' in options) || options.workspaceId == null) {\n    throw new SeamHttpInvalidOptionsError(\n      'Must pass a workspaceId when using a personalAccessToken',\n    )\n  }\n\n  return true\n}\n\nexport class SeamHttpInvalidOptionsError extends Error {\n  constructor(message: string) {\n    super(`SeamHttp received invalid options: ${message}`)\n    this.name = this.constructor.name\n  }\n}\n\nexport class SeamHttpMultiWorkspaceInvalidOptionsError extends Error {\n  constructor(message: string) {\n    super(`SeamHttpMultiWorkspace received invalid options: ${message}`)\n    this.name = this.constructor.name\n  }\n}\n","export const tokenPrefix = 'seam_'\n\nexport const accessTokenPrefix = 'seam_at'\n\nexport const jwtPrefix = 'ey'\n\nexport const clientSessionTokenPrefix = 'seam_cst'\n\nexport const publishableKeyTokenPrefix = 'seam_pk'\n\nexport const isAccessToken = (token: string): boolean =>\n  token.startsWith(accessTokenPrefix)\n\nexport const isJwt = (token: string): boolean => token.startsWith(jwtPrefix)\n\nexport const isSeamToken = (token: string): boolean =>\n  token.startsWith(tokenPrefix)\n\nexport const isApiKey = (token: string): boolean =>\n  !isClientSessionToken(token) &&\n  !isJwt(token) &&\n  !isAccessToken(token) &&\n  !isPublishableKey(token) &&\n  isSeamToken(token)\n\nexport const isClientSessionToken = (token: string): boolean =>\n  token.startsWith(clientSessionTokenPrefix)\n\nexport const isPublishableKey = (token: string): boolean =>\n  token.startsWith(publishableKeyTokenPrefix)\n\nexport const isConsoleSessionToken = (token: string): boolean => isJwt(token)\n\nexport const isPersonalAccessToken = (token: string): boolean =>\n  isAccessToken(token)\n","import {\n  isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken,\n  isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken,\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken,\n  type SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n} from './options.js'\nimport type { Options } from './parse-options.js'\nimport {\n  accessTokenPrefix,\n  clientSessionTokenPrefix,\n  isAccessToken,\n  isClientSessionToken,\n  isJwt,\n  isPublishableKey,\n  isSeamToken,\n  jwtPrefix,\n  publishableKeyTokenPrefix,\n  tokenPrefix,\n} from './token.js'\n\ntype Headers = Record<string, string>\n\nexport const getAuthHeaders = (options: Options): Headers => {\n  if ('publishableKey' in options) {\n    return getAuthHeadersForPublishableKey(options.publishableKey)\n  }\n\n  if (isSeamHttpOptionsWithApiKey(options)) {\n    return getAuthHeadersForApiKey(options)\n  }\n\n  if (isSeamHttpOptionsWithClientSessionToken(options)) {\n    return getAuthHeadersForClientSessionToken(options)\n  }\n\n  if (\n    isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken(options) ||\n    isSeamHttpOptionsWithConsoleSessionToken(options)\n  ) {\n    return getAuthHeadersForConsoleSessionToken(options)\n  }\n\n  if (\n    isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken(options) ||\n    isSeamHttpOptionsWithPersonalAccessToken(options)\n  ) {\n    return getAuthHeadersForPersonalAccessToken(options)\n  }\n\n  throw new SeamHttpInvalidOptionsError(\n    [\n      'Must specify',\n      'an apiKey,',\n      'clientSessionToken,',\n      'publishableKey,',\n      'consoleSessionToken',\n      'or personalAccessToken.',\n      'Attempted reading configuration from the environment, but the environment variable SEAM_API_KEY is not set.',\n    ].join(' '),\n  )\n}\n\nconst getAuthHeadersForApiKey = ({\n  apiKey,\n}: SeamHttpOptionsWithApiKey): Headers => {\n  if (isClientSessionToken(apiKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Client Session Token cannot be used as an apiKey',\n    )\n  }\n\n  if (isJwt(apiKey)) {\n    throw new SeamHttpInvalidTokenError('A JWT cannot be used as an apiKey')\n  }\n\n  if (isAccessToken(apiKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'An Access Token cannot be used as an apiKey',\n    )\n  }\n\n  if (isPublishableKey(apiKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Publishable Key cannot be used as an apiKey',\n    )\n  }\n\n  if (!isSeamToken(apiKey)) {\n    throw new SeamHttpInvalidTokenError(\n      `Unknown or invalid apiKey format, expected token to start with ${tokenPrefix}`,\n    )\n  }\n\n  return {\n    authorization: `Bearer ${apiKey}`,\n  }\n}\n\nexport const getAuthHeadersForClientSessionToken = ({\n  clientSessionToken,\n}: SeamHttpOptionsWithClientSessionToken): Headers => {\n  if (isJwt(clientSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A JWT cannot be used as a clientSessionToken',\n    )\n  }\n\n  if (isAccessToken(clientSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'An Access Token cannot be used as a clientSessionToken',\n    )\n  }\n\n  if (isPublishableKey(clientSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Publishable Key cannot be used as a clientSessionToken',\n    )\n  }\n\n  if (!isClientSessionToken(clientSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      `Unknown or invalid clientSessionToken format, expected token to start with ${clientSessionTokenPrefix}`,\n    )\n  }\n\n  return {\n    authorization: `Bearer ${clientSessionToken}`,\n    'client-session-token': clientSessionToken,\n  }\n}\n\nconst getAuthHeadersForConsoleSessionToken = ({\n  consoleSessionToken,\n  ...options\n}:\n  | SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken\n  | SeamHttpOptionsWithConsoleSessionToken): Headers => {\n  const workspaceId = 'workspaceId' in options ? options.workspaceId : undefined\n\n  if (isAccessToken(consoleSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'An Access Token cannot be used as a consoleSessionToken',\n    )\n  }\n\n  if (isClientSessionToken(consoleSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Client Session Token cannot be used as a consoleSessionToken',\n    )\n  }\n\n  if (isPublishableKey(consoleSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Publishable Key cannot be used as a consoleSessionToken',\n    )\n  }\n\n  if (!isJwt(consoleSessionToken)) {\n    throw new SeamHttpInvalidTokenError(\n      `Unknown or invalid consoleSessionToken format, expected a JWT which starts with ${jwtPrefix}`,\n    )\n  }\n\n  return {\n    authorization: `Bearer ${consoleSessionToken}`,\n    ...(workspaceId != null ? { 'seam-workspace': workspaceId } : {}),\n  }\n}\n\nconst getAuthHeadersForPersonalAccessToken = ({\n  personalAccessToken,\n  ...options\n}:\n  | SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken\n  | SeamHttpOptionsWithPersonalAccessToken): Headers => {\n  const workspaceId = 'workspaceId' in options ? options.workspaceId : undefined\n\n  if (isJwt(personalAccessToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A JWT cannot be used as a personalAccessToken',\n    )\n  }\n\n  if (isClientSessionToken(personalAccessToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Client Session Token cannot be used as a personalAccessToken',\n    )\n  }\n\n  if (isPublishableKey(personalAccessToken)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Publishable Key cannot be used as a personalAccessToken',\n    )\n  }\n\n  if (!isAccessToken(personalAccessToken)) {\n    throw new SeamHttpInvalidTokenError(\n      `Unknown or invalid personalAccessToken format, expected token to start with ${accessTokenPrefix}`,\n    )\n  }\n\n  return {\n    authorization: `Bearer ${personalAccessToken}`,\n    ...(workspaceId != null ? { 'seam-workspace': workspaceId } : {}),\n  }\n}\n\nconst getAuthHeadersForPublishableKey = (publishableKey: string): Headers => {\n  if (isJwt(publishableKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'A JWT cannot be used as a publishableKey',\n    )\n  }\n\n  if (isAccessToken(publishableKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'An Access Token cannot be used as a publishableKey',\n    )\n  }\n\n  if (isClientSessionToken(publishableKey)) {\n    throw new SeamHttpInvalidTokenError(\n      'A Client Session Token Key cannot be used as a publishableKey',\n    )\n  }\n\n  if (!isPublishableKey(publishableKey)) {\n    throw new SeamHttpInvalidTokenError(\n      `Unknown or invalid publishableKey format, expected token to start with ${publishableKeyTokenPrefix}`,\n    )\n  }\n\n  return {\n    'seam-publishable-key': publishableKey,\n  }\n}\n\nexport class SeamHttpInvalidTokenError extends Error {\n  constructor(message: string) {\n    super(`SeamHttp received an invalid token: ${message}`)\n    this.name = this.constructor.name\n  }\n}\n\nexport const warnOnInsecureuserIdentifierKey = (\n  userIdentifierKey: string,\n): void => {\n  if (isEmail(userIdentifierKey)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      ...[\n        'Using an email for the userIdentifierKey is insecure and may return an error in the future!',\n        'This is insecure because an email is common knowledge or easily guessed.',\n        'Use something with sufficient entropy known only to the owner of the client session.',\n        'For help choosing a user identifier key see',\n        'https://docs.seam.co/latest/seam-components/overview/get-started-with-client-side-components#3-select-a-user-identifier-key',\n      ],\n    )\n  }\n}\n\n// SOURCE: https://stackoverflow.com/a/46181\nconst isEmail = (value: string): boolean =>\n  /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)\n","import type { ApiError } from './api-error-types.js'\n\nexport class SeamHttpApiError extends Error {\n  code: string\n  statusCode: number\n  requestId: string\n  data?: unknown\n\n  constructor(error: ApiError, statusCode: number, requestId: string) {\n    const { type, message, data } = error\n    super(message)\n    this.name = this.constructor.name\n    this.code = type\n    this.statusCode = statusCode\n    this.requestId = requestId\n    if (data != null) this.data = data\n  }\n}\n\nexport const isSeamHttpApiError = (\n  error: unknown,\n): error is SeamHttpApiError => {\n  return error instanceof SeamHttpApiError\n}\n\nexport class SeamHttpUnauthorizedError extends SeamHttpApiError {\n  override code: 'unauthorized'\n  override statusCode: 401\n\n  constructor(requestId: string) {\n    const type = 'unauthorized'\n    const status = 401\n    super({ type, message: 'Unauthorized' }, status, requestId)\n    this.name = this.constructor.name\n    this.code = type\n    this.statusCode = status\n    this.requestId = requestId\n  }\n}\n\nexport const isSeamHttpUnauthorizedError = (\n  error: unknown,\n): error is SeamHttpUnauthorizedError => {\n  return error instanceof SeamHttpUnauthorizedError\n}\n\nexport class SeamHttpInvalidInputError extends SeamHttpApiError {\n  override code: 'invalid_input'\n  readonly #validationErrors: NonNullable<ApiError['validation_errors']>\n\n  constructor(error: ApiError, statusCode: number, requestId: string) {\n    super(error, statusCode, requestId)\n    this.name = this.constructor.name\n    this.code = 'invalid_input'\n    this.#validationErrors = error.validation_errors ?? {}\n  }\n\n  getValidationErrorMessages(paramName: string): string[] {\n    return this.#validationErrors[paramName]?._errors ?? []\n  }\n}\n\nexport const isSeamHttpInvalidInputError = (\n  error: unknown,\n): error is SeamHttpInvalidInputError => {\n  return error instanceof SeamHttpInvalidInputError\n}\n","import { type AxiosError, isAxiosError } from 'axios'\n\nimport type { ApiErrorResponse } from './api-error-types.js'\nimport {\n  SeamHttpApiError,\n  SeamHttpInvalidInputError,\n  SeamHttpUnauthorizedError,\n} from './seam-http-error.js'\n\nexport const errorInterceptor = async (err: unknown): Promise<void> => {\n  if (!isAxiosError(err)) throw err\n\n  const { response } = err\n  const status = response?.status\n\n  const requestId = getRequestId(err)\n\n  if (status == null) throw err\n\n  if (status === 401) {\n    throw new SeamHttpUnauthorizedError(requestId)\n  }\n\n  if (!isApiErrorResponse(response)) throw err\n\n  const { type } = response.data.error\n\n  const args = [response.data.error, status, requestId] as const\n\n  if (type === 'invalid_input') throw new SeamHttpInvalidInputError(...args)\n  throw new SeamHttpApiError(...args)\n}\n\nconst isApiErrorResponse = (\n  response: AxiosError['response'],\n): response is NonNullable<AxiosError<ApiErrorResponse>['response']> => {\n  if (response == null) return false\n  const { headers, data } = response\n\n  if (headers == null) return false\n\n  const contentType = headers['Content-Type']\n  if (\n    typeof contentType === 'string' &&\n    !contentType.startsWith('application/json')\n  ) {\n    return false\n  }\n\n  if (typeof data === 'object' && data != null) {\n    return (\n      'error' in data &&\n      typeof data.error === 'object' &&\n      data.error != null &&\n      'type' in data.error &&\n      typeof data.error.type === 'string'\n    )\n  }\n\n  return false\n}\n\nconst getRequestId = (err: AxiosError): string => {\n  const headers = err.response?.headers\n  if (headers == null) return ''\n  const requestId = headers['seam-request-id']\n  if (requestId == null) return ''\n  return requestId\n}\n","import { serializeUrlSearchParams } from '@seamapi/url-search-params-serializer'\nimport axios, { type AxiosInstance, type AxiosRequestConfig } from 'axios'\nimport axiosBetterStacktrace from 'axios-better-stacktrace'\nimport axiosRetry, { type AxiosRetry, exponentialDelay } from 'axios-retry'\n\nimport { errorInterceptor } from './error-interceptor.js'\n\nexport type Client = AxiosInstance\n\nexport interface ClientOptions {\n  axiosOptions?: AxiosRequestConfig\n  axiosRetryOptions?: AxiosRetryConfig\n}\n\ntype AxiosRetryConfig = Parameters<AxiosRetry>[1]\n\nexport const createClient = (options: ClientOptions): AxiosInstance => {\n  const client = axios.create({\n    paramsSerializer: serializeUrlSearchParams,\n    ...options.axiosOptions,\n  })\n\n  axiosBetterStacktrace(axios)\n\n  axiosRetry(client, {\n    retries: 2,\n    retryDelay: exponentialDelay,\n    ...options.axiosRetryOptions,\n  })\n\n  client.interceptors.response.use(undefined, errorInterceptor)\n\n  return client\n}\n","import type { openapi } from '@seamapi/types/connect'\n\nimport { createClient } from './client.js'\nimport { defaultEndpoint, sdkHeaders } from './parse-options.js'\n\nexport const getOpenapiSchema = async (\n  endpoint = defaultEndpoint,\n): Promise<typeof openapi> => {\n  const client = createClient({\n    axiosOptions: {\n      baseURL: endpoint,\n      headers: sdkHeaders,\n    },\n  })\n  const { data } = await client.get<typeof openapi>('/openapi.json')\n  return data\n}\n","import type { ActionAttempt } from '@seamapi/types/connect'\n\nimport type { SeamHttpActionAttempts } from './routes/index.js'\n\nexport interface ResolveActionAttemptOptions {\n  timeout?: number\n  pollingInterval?: number\n}\n\nexport const resolveActionAttempt = async <T extends ActionAttempt>(\n  actionAttempt: T,\n  actionAttempts: SeamHttpActionAttempts,\n  { timeout = 5000, pollingInterval = 500 }: ResolveActionAttemptOptions,\n): Promise<SucceededActionAttempt<T>> => {\n  let timeoutRef\n  const timeoutPromise = new Promise<SucceededActionAttempt<T>>(\n    (_resolve, reject) => {\n      timeoutRef = globalThis.setTimeout(() => {\n        reject(new SeamActionAttemptTimeoutError<T>(actionAttempt, timeout))\n      }, timeout)\n    },\n  )\n\n  try {\n    return await Promise.race([\n      pollActionAttempt<T>(actionAttempt, actionAttempts, { pollingInterval }),\n      timeoutPromise,\n    ])\n  } finally {\n    if (timeoutRef != null) globalThis.clearTimeout(timeoutRef)\n  }\n}\n\nconst pollActionAttempt = async <T extends ActionAttempt>(\n  actionAttempt: T,\n  actionAttempts: SeamHttpActionAttempts,\n  options: Pick<ResolveActionAttemptOptions, 'pollingInterval'>,\n): Promise<SucceededActionAttempt<T>> => {\n  if (isSuccessfulActionAttempt(actionAttempt)) {\n    return actionAttempt\n  }\n\n  if (isFailedActionAttempt(actionAttempt)) {\n    throw new SeamActionAttemptFailedError(actionAttempt)\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, options.pollingInterval))\n\n  const nextActionAttempt = await actionAttempts.get({\n    action_attempt_id: actionAttempt.action_attempt_id,\n  })\n\n  return await pollActionAttempt(\n    nextActionAttempt as unknown as T,\n    actionAttempts,\n    options,\n  )\n}\n\nexport const isSeamActionAttemptError = <T extends ActionAttempt>(\n  error: unknown,\n): error is SeamActionAttemptError<T> => {\n  return error instanceof SeamActionAttemptError\n}\n\nexport class SeamActionAttemptError<T extends ActionAttempt> extends Error {\n  actionAttempt: T\n\n  constructor(message: string, actionAttempt: T) {\n    super(message)\n    this.name = this.constructor.name\n    this.actionAttempt = actionAttempt\n  }\n}\n\nexport const isSeamActionAttemptFailedError = <T extends ActionAttempt>(\n  error: unknown,\n): error is SeamActionAttemptFailedError<T> => {\n  return error instanceof SeamActionAttemptFailedError\n}\n\nexport class SeamActionAttemptFailedError<\n  T extends ActionAttempt,\n> extends SeamActionAttemptError<T> {\n  code: string\n\n  constructor(actionAttempt: FailedActionAttempt<T>) {\n    super(actionAttempt.error.message, actionAttempt)\n    this.name = this.constructor.name\n    this.code = actionAttempt.error.type\n  }\n}\n\nexport const isSeamActionAttemptTimeoutError = <T extends ActionAttempt>(\n  error: unknown,\n): error is SeamActionAttemptTimeoutError<T> => {\n  return error instanceof SeamActionAttemptTimeoutError\n}\n\nexport class SeamActionAttemptTimeoutError<\n  T extends ActionAttempt,\n> extends SeamActionAttemptError<T> {\n  constructor(actionAttempt: T, timeout: number) {\n    super(\n      `Timed out waiting for action action attempt after ${timeout}ms`,\n      actionAttempt,\n    )\n    this.name = this.constructor.name\n  }\n}\n\nconst isSuccessfulActionAttempt = <T extends ActionAttempt>(\n  actionAttempt: T,\n): actionAttempt is SucceededActionAttempt<T> =>\n  actionAttempt.status === 'success'\n\nconst isFailedActionAttempt = <T extends ActionAttempt>(\n  actionAttempt: T,\n): actionAttempt is FailedActionAttempt<T> => actionAttempt.status === 'error'\n\nexport type SucceededActionAttempt<T extends ActionAttempt> = Extract<\n  T,\n  { status: 'success' }\n>\n\nexport type FailedActionAttempt<T extends ActionAttempt> = Extract<\n  T,\n  { status: 'error' }\n>\n","import { serializeUrlSearchParams } from '@seamapi/url-search-params-serializer'\nimport type { Method } from 'axios'\n\nimport type { Client } from './client.js'\nimport type { SeamHttpRequestOptions } from './options.js'\nimport { resolveActionAttempt } from './resolve-action-attempt.js'\nimport { SeamHttpActionAttempts } from './routes/index.js'\n\ninterface SeamHttpRequestParent {\n  readonly client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n}\n\ninterface SeamHttpRequestConfig<TResponseKey> {\n  readonly path: string\n  readonly method: Method\n  readonly body?: unknown\n  readonly params?: undefined | Record<string, unknown>\n  readonly responseKey: TResponseKey\n  readonly options?: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>\n}\n\nexport class SeamHttpRequest<\n  const TResponse,\n  const TResponseKey extends keyof TResponse | undefined,\n> implements\n    Promise<\n      TResponseKey extends keyof TResponse ? TResponse[TResponseKey] : undefined\n    >\n{\n  readonly [Symbol.toStringTag]: string = 'SeamHttpRequest'\n\n  readonly #parent: SeamHttpRequestParent\n  readonly #config: SeamHttpRequestConfig<TResponseKey>\n\n  constructor(\n    parent: SeamHttpRequestParent,\n    config: SeamHttpRequestConfig<TResponseKey>,\n  ) {\n    this.#parent = parent\n    this.#config = config\n  }\n\n  public get responseKey(): TResponseKey {\n    return this.#config.responseKey\n  }\n\n  public get url(): URL {\n    const { client } = this.#parent\n    const { params } = this.#config\n\n    const serializer =\n      typeof client.defaults.paramsSerializer === 'function'\n        ? client.defaults.paramsSerializer\n        : serializeUrlSearchParams\n\n    const origin = getUrlPrefix(client.defaults.baseURL ?? '')\n\n    const pathname = this.#config.path.startsWith('/')\n      ? this.#config.path\n      : `/${this.#config.path}`\n\n    const path = params == null ? pathname : `${pathname}?${serializer(params)}`\n\n    return new URL(`${origin}${path}`)\n  }\n\n  public get method(): Method {\n    return this.#config.method\n  }\n\n  public get body(): unknown {\n    return this.#config.body\n  }\n\n  async execute(): Promise<\n    TResponseKey extends keyof TResponse ? TResponse[TResponseKey] : undefined\n  > {\n    const { client } = this.#parent\n    const response = await client.request({\n      url: this.#config.path,\n      method: this.#config.method,\n      data: this.#config.body,\n      params: this.#config.params,\n    })\n    if (this.responseKey === undefined) {\n      return undefined as TResponseKey extends keyof TResponse\n        ? TResponse[TResponseKey]\n        : undefined\n    }\n    const data = response.data[this.responseKey]\n    if (this.responseKey === 'action_attempt') {\n      const waitForActionAttempt =\n        this.#config.options?.waitForActionAttempt ??\n        this.#parent.defaults.waitForActionAttempt\n      if (waitForActionAttempt !== false) {\n        return await resolveActionAttempt(\n          data,\n          SeamHttpActionAttempts.fromClient(client, {\n            ...this.#parent.defaults,\n            waitForActionAttempt: false,\n          }),\n          typeof waitForActionAttempt === 'boolean' ? {} : waitForActionAttempt,\n        )\n      }\n    }\n    return data\n  }\n\n  async then<\n    TResult1 = TResponseKey extends keyof TResponse\n      ? TResponse[TResponseKey]\n      : undefined,\n    TResult2 = never,\n  >(\n    onfulfilled?:\n      | ((\n          value: TResponseKey extends keyof TResponse\n            ? TResponse[TResponseKey]\n            : undefined,\n        ) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): Promise<TResult1 | TResult2> {\n    return await this.execute().then(onfulfilled, onrejected)\n  }\n\n  async catch<TResult = never>(\n    onrejected?:\n      | ((reason: any) => TResult | PromiseLike<TResult>)\n      | null\n      | undefined,\n  ): Promise<\n    | (TResponseKey extends keyof TResponse\n        ? TResponse[TResponseKey]\n        : undefined)\n    | TResult\n  > {\n    return await this.execute().catch(onrejected)\n  }\n\n  async finally(\n    onfinally?: (() => void) | null | undefined,\n  ): Promise<\n    TResponseKey extends keyof TResponse ? TResponse[TResponseKey] : undefined\n  > {\n    return await this.execute().finally(onfinally)\n  }\n}\n\nconst getUrlPrefix = (input: string): string => {\n  if (canParseUrl(input)) {\n    const url = new URL(input).toString()\n    if (url.endsWith('/')) return url.slice(0, -1)\n    return url\n  }\n  if (globalThis.location != null) {\n    const pathname = input.startsWith('/') ? input : `/${input}`\n    return new URL(`${globalThis.location.origin}${pathname}`).toString()\n  }\n  throw new Error(\n    `Cannot resolve origin from ${input} in a non-browser environment`,\n  )\n}\n\n// UPSTREAM: Prefer URL.canParse when it has wider support.\n// https://caniuse.com/mdn-api_url_canparse_static\nconst canParseUrl = (input: string): boolean => {\n  try {\n    return new URL(input) != null\n  } catch {\n    return false\n  }\n}\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nexport class SeamHttpClientSessions {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpClientSessions {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpClientSessions(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpClientSessions {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpClientSessions(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpClientSessions {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpClientSessions(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpClientSessions> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpClientSessions.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpClientSessions {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpClientSessions(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpClientSessions {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpClientSessions(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: ClientSessionsCreateBody,\n  ): SeamHttpRequest<ClientSessionsCreateResponse, 'client_session'> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/create',\n      method: 'post',\n      body,\n      responseKey: 'client_session',\n    })\n  }\n\n  delete(body?: ClientSessionsDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: ClientSessionsGetParams,\n  ): SeamHttpRequest<ClientSessionsGetResponse, 'client_session'> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/get',\n      method: 'post',\n      body,\n      responseKey: 'client_session',\n    })\n  }\n\n  getOrCreate(\n    body?: ClientSessionsGetOrCreateBody,\n  ): SeamHttpRequest<ClientSessionsGetOrCreateResponse, 'client_session'> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/get_or_create',\n      method: 'post',\n      body,\n      responseKey: 'client_session',\n    })\n  }\n\n  grantAccess(\n    body?: ClientSessionsGrantAccessBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/grant_access',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  list(\n    body?: ClientSessionsListParams,\n  ): SeamHttpRequest<ClientSessionsListResponse, 'client_sessions'> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/list',\n      method: 'post',\n      body,\n      responseKey: 'client_sessions',\n    })\n  }\n\n  revoke(body?: ClientSessionsRevokeParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/client_sessions/revoke',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type ClientSessionsCreateBody =\n  RouteRequestBody<'/client_sessions/create'>\n\nexport type ClientSessionsCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/create'>>\n>\n\nexport type ClientSessionsCreateOptions = never\n\nexport type ClientSessionsDeleteParams =\n  RouteRequestBody<'/client_sessions/delete'>\n\nexport type ClientSessionsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/delete'>>\n>\n\nexport type ClientSessionsDeleteOptions = never\n\nexport type ClientSessionsGetParams = RouteRequestBody<'/client_sessions/get'>\n\nexport type ClientSessionsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/get'>>\n>\n\nexport type ClientSessionsGetOptions = never\n\nexport type ClientSessionsGetOrCreateBody =\n  RouteRequestBody<'/client_sessions/get_or_create'>\n\nexport type ClientSessionsGetOrCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/get_or_create'>>\n>\n\nexport type ClientSessionsGetOrCreateOptions = never\n\nexport type ClientSessionsGrantAccessBody =\n  RouteRequestBody<'/client_sessions/grant_access'>\n\nexport type ClientSessionsGrantAccessResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/grant_access'>>\n>\n\nexport type ClientSessionsGrantAccessOptions = never\n\nexport type ClientSessionsListParams = RouteRequestBody<'/client_sessions/list'>\n\nexport type ClientSessionsListResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/list'>>\n>\n\nexport type ClientSessionsListOptions = never\n\nexport type ClientSessionsRevokeParams =\n  RouteRequestBody<'/client_sessions/revoke'>\n\nexport type ClientSessionsRevokeResponse = SetNonNullable<\n  Required<RouteResponse<'/client_sessions/revoke'>>\n>\n\nexport type ClientSessionsRevokeOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAccessCodesSimulate {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAccessCodesSimulate {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAccessCodesSimulate(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAccessCodesSimulate {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAccessCodesSimulate(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAccessCodesSimulate {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAccessCodesSimulate(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAccessCodesSimulate> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAccessCodesSimulate.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodesSimulate {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodesSimulate(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodesSimulate {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodesSimulate(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  createUnmanagedAccessCode(\n    body?: AccessCodesSimulateCreateUnmanagedAccessCodeBody,\n  ): SeamHttpRequest<\n    AccessCodesSimulateCreateUnmanagedAccessCodeResponse,\n    'access_code'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/simulate/create_unmanaged_access_code',\n      method: 'post',\n      body,\n      responseKey: 'access_code',\n    })\n  }\n}\n\nexport type AccessCodesSimulateCreateUnmanagedAccessCodeBody =\n  RouteRequestBody<'/access_codes/simulate/create_unmanaged_access_code'>\n\nexport type AccessCodesSimulateCreateUnmanagedAccessCodeResponse =\n  SetNonNullable<\n    Required<\n      RouteResponse<'/access_codes/simulate/create_unmanaged_access_code'>\n    >\n  >\n\nexport type AccessCodesSimulateCreateUnmanagedAccessCodeOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAccessCodesUnmanaged {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAccessCodesUnmanaged {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAccessCodesUnmanaged(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAccessCodesUnmanaged {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAccessCodesUnmanaged(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAccessCodesUnmanaged {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAccessCodesUnmanaged(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAccessCodesUnmanaged> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAccessCodesUnmanaged.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodesUnmanaged {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodesUnmanaged(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodesUnmanaged {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodesUnmanaged(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  convertToManaged(\n    body?: AccessCodesUnmanagedConvertToManagedBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/unmanaged/convert_to_managed',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  delete(\n    body?: AccessCodesUnmanagedDeleteParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/unmanaged/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: AccessCodesUnmanagedGetParams,\n  ): SeamHttpRequest<AccessCodesUnmanagedGetResponse, 'access_code'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/unmanaged/get',\n      method: 'post',\n      body,\n      responseKey: 'access_code',\n    })\n  }\n\n  list(\n    body?: AccessCodesUnmanagedListParams,\n  ): SeamHttpRequest<AccessCodesUnmanagedListResponse, 'access_codes'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/unmanaged/list',\n      method: 'post',\n      body,\n      responseKey: 'access_codes',\n    })\n  }\n\n  update(\n    body?: AccessCodesUnmanagedUpdateBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/unmanaged/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type AccessCodesUnmanagedConvertToManagedBody =\n  RouteRequestBody<'/access_codes/unmanaged/convert_to_managed'>\n\nexport type AccessCodesUnmanagedConvertToManagedResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/unmanaged/convert_to_managed'>>\n>\n\nexport type AccessCodesUnmanagedConvertToManagedOptions = never\n\nexport type AccessCodesUnmanagedDeleteParams =\n  RouteRequestBody<'/access_codes/unmanaged/delete'>\n\nexport type AccessCodesUnmanagedDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/unmanaged/delete'>>\n>\n\nexport type AccessCodesUnmanagedDeleteOptions = never\n\nexport type AccessCodesUnmanagedGetParams =\n  RouteRequestBody<'/access_codes/unmanaged/get'>\n\nexport type AccessCodesUnmanagedGetResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/unmanaged/get'>>\n>\n\nexport type AccessCodesUnmanagedGetOptions = never\n\nexport type AccessCodesUnmanagedListParams =\n  RouteRequestBody<'/access_codes/unmanaged/list'>\n\nexport type AccessCodesUnmanagedListResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/unmanaged/list'>>\n>\n\nexport type AccessCodesUnmanagedListOptions = never\n\nexport type AccessCodesUnmanagedUpdateBody =\n  RouteRequestBody<'/access_codes/unmanaged/update'>\n\nexport type AccessCodesUnmanagedUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/unmanaged/update'>>\n>\n\nexport type AccessCodesUnmanagedUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpAccessCodesSimulate } from './access-codes-simulate.js'\nimport { SeamHttpAccessCodesUnmanaged } from './access-codes-unmanaged.js'\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAccessCodes {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAccessCodes {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAccessCodes(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAccessCodes {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAccessCodes(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAccessCodes {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAccessCodes(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAccessCodes> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAccessCodes.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodes {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodes(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAccessCodes {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAccessCodes(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get unmanaged(): SeamHttpAccessCodesUnmanaged {\n    return SeamHttpAccessCodesUnmanaged.fromClient(this.client, this.defaults)\n  }\n\n  get simulate(): SeamHttpAccessCodesSimulate {\n    return SeamHttpAccessCodesSimulate.fromClient(this.client, this.defaults)\n  }\n\n  create(\n    body?: AccessCodesCreateBody,\n  ): SeamHttpRequest<AccessCodesCreateResponse, 'access_code'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/create',\n      method: 'post',\n      body,\n      responseKey: 'access_code',\n    })\n  }\n\n  createMultiple(\n    body?: AccessCodesCreateMultipleBody,\n  ): SeamHttpRequest<AccessCodesCreateMultipleResponse, 'access_codes'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/create_multiple',\n      method: 'post',\n      body,\n      responseKey: 'access_codes',\n    })\n  }\n\n  delete(body?: AccessCodesDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  generateCode(\n    body?: AccessCodesGenerateCodeBody,\n  ): SeamHttpRequest<AccessCodesGenerateCodeResponse, 'generated_code'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/generate_code',\n      method: 'post',\n      body,\n      responseKey: 'generated_code',\n    })\n  }\n\n  get(\n    body?: AccessCodesGetParams,\n  ): SeamHttpRequest<AccessCodesGetResponse, 'access_code'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/get',\n      method: 'post',\n      body,\n      responseKey: 'access_code',\n    })\n  }\n\n  list(\n    body?: AccessCodesListParams,\n  ): SeamHttpRequest<AccessCodesListResponse, 'access_codes'> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/list',\n      method: 'post',\n      body,\n      responseKey: 'access_codes',\n    })\n  }\n\n  pullBackupAccessCode(\n    body?: AccessCodesPullBackupAccessCodeBody,\n  ): SeamHttpRequest<\n    AccessCodesPullBackupAccessCodeResponse,\n    'backup_access_code'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/pull_backup_access_code',\n      method: 'post',\n      body,\n      responseKey: 'backup_access_code',\n    })\n  }\n\n  update(body?: AccessCodesUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/access_codes/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type AccessCodesCreateBody = RouteRequestBody<'/access_codes/create'>\n\nexport type AccessCodesCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/create'>>\n>\n\nexport type AccessCodesCreateOptions = never\n\nexport type AccessCodesCreateMultipleBody =\n  RouteRequestBody<'/access_codes/create_multiple'>\n\nexport type AccessCodesCreateMultipleResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/create_multiple'>>\n>\n\nexport type AccessCodesCreateMultipleOptions = never\n\nexport type AccessCodesDeleteParams = RouteRequestBody<'/access_codes/delete'>\n\nexport type AccessCodesDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/delete'>>\n>\n\nexport type AccessCodesDeleteOptions = never\n\nexport type AccessCodesGenerateCodeBody =\n  RouteRequestBody<'/access_codes/generate_code'>\n\nexport type AccessCodesGenerateCodeResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/generate_code'>>\n>\n\nexport type AccessCodesGenerateCodeOptions = never\n\nexport type AccessCodesGetParams = RouteRequestBody<'/access_codes/get'>\n\nexport type AccessCodesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/get'>>\n>\n\nexport type AccessCodesGetOptions = never\n\nexport type AccessCodesListParams = RouteRequestBody<'/access_codes/list'>\n\nexport type AccessCodesListResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/list'>>\n>\n\nexport type AccessCodesListOptions = never\n\nexport type AccessCodesPullBackupAccessCodeBody =\n  RouteRequestBody<'/access_codes/pull_backup_access_code'>\n\nexport type AccessCodesPullBackupAccessCodeResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/pull_backup_access_code'>>\n>\n\nexport type AccessCodesPullBackupAccessCodeOptions = never\n\nexport type AccessCodesUpdateBody = RouteRequestBody<'/access_codes/update'>\n\nexport type AccessCodesUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/access_codes/update'>>\n>\n\nexport type AccessCodesUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsAccessGroupsUnmanaged {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsAccessGroupsUnmanaged {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsAccessGroupsUnmanaged(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsAccessGroupsUnmanaged {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsAccessGroupsUnmanaged(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsAccessGroupsUnmanaged {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsAccessGroupsUnmanaged(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsAccessGroupsUnmanaged> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsAccessGroupsUnmanaged.fromClientSessionToken(\n      token,\n      options,\n    )\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsAccessGroupsUnmanaged {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsAccessGroupsUnmanaged(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsAccessGroupsUnmanaged {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsAccessGroupsUnmanaged(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: AcsAccessGroupsUnmanagedGetParams,\n  ): SeamHttpRequest<AcsAccessGroupsUnmanagedGetResponse, 'acs_access_group'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/unmanaged/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_access_group',\n    })\n  }\n\n  list(\n    body?: AcsAccessGroupsUnmanagedListParams,\n  ): SeamHttpRequest<\n    AcsAccessGroupsUnmanagedListResponse,\n    'acs_access_groups'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/unmanaged/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_access_groups',\n    })\n  }\n}\n\nexport type AcsAccessGroupsUnmanagedGetParams =\n  RouteRequestBody<'/acs/access_groups/unmanaged/get'>\n\nexport type AcsAccessGroupsUnmanagedGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/unmanaged/get'>>\n>\n\nexport type AcsAccessGroupsUnmanagedGetOptions = never\n\nexport type AcsAccessGroupsUnmanagedListParams =\n  RouteRequestBody<'/acs/access_groups/unmanaged/list'>\n\nexport type AcsAccessGroupsUnmanagedListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/unmanaged/list'>>\n>\n\nexport type AcsAccessGroupsUnmanagedListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpAcsAccessGroupsUnmanaged } from './acs-access-groups-unmanaged.js'\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsAccessGroups {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsAccessGroups {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsAccessGroups(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsAccessGroups {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsAccessGroups(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsAccessGroups {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsAccessGroups(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsAccessGroups> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsAccessGroups.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsAccessGroups {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsAccessGroups(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsAccessGroups {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsAccessGroups(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get unmanaged(): SeamHttpAcsAccessGroupsUnmanaged {\n    return SeamHttpAcsAccessGroupsUnmanaged.fromClient(\n      this.client,\n      this.defaults,\n    )\n  }\n\n  addUser(body?: AcsAccessGroupsAddUserBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/add_user',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: AcsAccessGroupsGetParams,\n  ): SeamHttpRequest<AcsAccessGroupsGetResponse, 'acs_access_group'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_access_group',\n    })\n  }\n\n  list(\n    body?: AcsAccessGroupsListParams,\n  ): SeamHttpRequest<AcsAccessGroupsListResponse, 'acs_access_groups'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_access_groups',\n    })\n  }\n\n  listAccessibleEntrances(\n    body?: AcsAccessGroupsListAccessibleEntrancesParams,\n  ): SeamHttpRequest<\n    AcsAccessGroupsListAccessibleEntrancesResponse,\n    'acs_entrances'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/list_accessible_entrances',\n      method: 'post',\n      body,\n      responseKey: 'acs_entrances',\n    })\n  }\n\n  listUsers(\n    body?: AcsAccessGroupsListUsersParams,\n  ): SeamHttpRequest<AcsAccessGroupsListUsersResponse, 'acs_users'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/list_users',\n      method: 'post',\n      body,\n      responseKey: 'acs_users',\n    })\n  }\n\n  removeUser(\n    body?: AcsAccessGroupsRemoveUserParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/access_groups/remove_user',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type AcsAccessGroupsAddUserBody =\n  RouteRequestBody<'/acs/access_groups/add_user'>\n\nexport type AcsAccessGroupsAddUserResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/add_user'>>\n>\n\nexport type AcsAccessGroupsAddUserOptions = never\n\nexport type AcsAccessGroupsGetParams =\n  RouteRequestBody<'/acs/access_groups/get'>\n\nexport type AcsAccessGroupsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/get'>>\n>\n\nexport type AcsAccessGroupsGetOptions = never\n\nexport type AcsAccessGroupsListParams =\n  RouteRequestBody<'/acs/access_groups/list'>\n\nexport type AcsAccessGroupsListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/list'>>\n>\n\nexport type AcsAccessGroupsListOptions = never\n\nexport type AcsAccessGroupsListAccessibleEntrancesParams =\n  RouteRequestBody<'/acs/access_groups/list_accessible_entrances'>\n\nexport type AcsAccessGroupsListAccessibleEntrancesResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/list_accessible_entrances'>>\n>\n\nexport type AcsAccessGroupsListAccessibleEntrancesOptions = never\n\nexport type AcsAccessGroupsListUsersParams =\n  RouteRequestBody<'/acs/access_groups/list_users'>\n\nexport type AcsAccessGroupsListUsersResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/list_users'>>\n>\n\nexport type AcsAccessGroupsListUsersOptions = never\n\nexport type AcsAccessGroupsRemoveUserParams =\n  RouteRequestBody<'/acs/access_groups/remove_user'>\n\nexport type AcsAccessGroupsRemoveUserResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/access_groups/remove_user'>>\n>\n\nexport type AcsAccessGroupsRemoveUserOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsCredentialPools {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsCredentialPools {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsCredentialPools(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsCredentialPools {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsCredentialPools(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsCredentialPools {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsCredentialPools(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsCredentialPools> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsCredentialPools.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialPools {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialPools(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialPools {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialPools(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  list(\n    body?: AcsCredentialPoolsListParams,\n  ): SeamHttpRequest<AcsCredentialPoolsListResponse, 'acs_credential_pools'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credential_pools/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_credential_pools',\n    })\n  }\n}\n\nexport type AcsCredentialPoolsListParams =\n  RouteRequestBody<'/acs/credential_pools/list'>\n\nexport type AcsCredentialPoolsListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credential_pools/list'>>\n>\n\nexport type AcsCredentialPoolsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsCredentialProvisioningAutomations {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsCredentialProvisioningAutomations {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsCredentialProvisioningAutomations(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsCredentialProvisioningAutomations {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsCredentialProvisioningAutomations(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsCredentialProvisioningAutomations {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsCredentialProvisioningAutomations(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsCredentialProvisioningAutomations> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsCredentialProvisioningAutomations.fromClientSessionToken(\n      token,\n      options,\n    )\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialProvisioningAutomations {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialProvisioningAutomations(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialProvisioningAutomations {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialProvisioningAutomations(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  launch(\n    body?: AcsCredentialProvisioningAutomationsLaunchBody,\n  ): SeamHttpRequest<\n    AcsCredentialProvisioningAutomationsLaunchResponse,\n    'acs_credential_provisioning_automation'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credential_provisioning_automations/launch',\n      method: 'post',\n      body,\n      responseKey: 'acs_credential_provisioning_automation',\n    })\n  }\n}\n\nexport type AcsCredentialProvisioningAutomationsLaunchBody =\n  RouteRequestBody<'/acs/credential_provisioning_automations/launch'>\n\nexport type AcsCredentialProvisioningAutomationsLaunchResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credential_provisioning_automations/launch'>>\n>\n\nexport type AcsCredentialProvisioningAutomationsLaunchOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsCredentialsUnmanaged {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsCredentialsUnmanaged {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsCredentialsUnmanaged(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsCredentialsUnmanaged {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsCredentialsUnmanaged(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsCredentialsUnmanaged {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsCredentialsUnmanaged(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsCredentialsUnmanaged> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsCredentialsUnmanaged.fromClientSessionToken(\n      token,\n      options,\n    )\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialsUnmanaged {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialsUnmanaged(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentialsUnmanaged {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentialsUnmanaged(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: AcsCredentialsUnmanagedGetParams,\n  ): SeamHttpRequest<AcsCredentialsUnmanagedGetResponse, 'acs_credential'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/unmanaged/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_credential',\n    })\n  }\n\n  list(\n    body?: AcsCredentialsUnmanagedListParams,\n  ): SeamHttpRequest<AcsCredentialsUnmanagedListResponse, 'acs_credentials'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/unmanaged/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_credentials',\n    })\n  }\n}\n\nexport type AcsCredentialsUnmanagedGetParams =\n  RouteRequestBody<'/acs/credentials/unmanaged/get'>\n\nexport type AcsCredentialsUnmanagedGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/unmanaged/get'>>\n>\n\nexport type AcsCredentialsUnmanagedGetOptions = never\n\nexport type AcsCredentialsUnmanagedListParams =\n  RouteRequestBody<'/acs/credentials/unmanaged/list'>\n\nexport type AcsCredentialsUnmanagedListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/unmanaged/list'>>\n>\n\nexport type AcsCredentialsUnmanagedListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpAcsCredentialsUnmanaged } from './acs-credentials-unmanaged.js'\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsCredentials {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsCredentials {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsCredentials(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsCredentials {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsCredentials(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsCredentials {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsCredentials(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsCredentials> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsCredentials.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentials {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentials(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsCredentials {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsCredentials(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get unmanaged(): SeamHttpAcsCredentialsUnmanaged {\n    return SeamHttpAcsCredentialsUnmanaged.fromClient(\n      this.client,\n      this.defaults,\n    )\n  }\n\n  assign(body?: AcsCredentialsAssignBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/assign',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  create(\n    body?: AcsCredentialsCreateBody,\n  ): SeamHttpRequest<AcsCredentialsCreateResponse, 'acs_credential'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/create',\n      method: 'post',\n      body,\n      responseKey: 'acs_credential',\n    })\n  }\n\n  delete(body?: AcsCredentialsDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: AcsCredentialsGetParams,\n  ): SeamHttpRequest<AcsCredentialsGetResponse, 'acs_credential'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_credential',\n    })\n  }\n\n  list(\n    body?: AcsCredentialsListParams,\n  ): SeamHttpRequest<AcsCredentialsListResponse, 'acs_credentials'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_credentials',\n    })\n  }\n\n  listAccessibleEntrances(\n    body?: AcsCredentialsListAccessibleEntrancesParams,\n  ): SeamHttpRequest<\n    AcsCredentialsListAccessibleEntrancesResponse,\n    'acs_entrances'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/list_accessible_entrances',\n      method: 'post',\n      body,\n      responseKey: 'acs_entrances',\n    })\n  }\n\n  unassign(\n    body?: AcsCredentialsUnassignBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/unassign',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  update(body?: AcsCredentialsUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/credentials/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type AcsCredentialsAssignBody =\n  RouteRequestBody<'/acs/credentials/assign'>\n\nexport type AcsCredentialsAssignResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/assign'>>\n>\n\nexport type AcsCredentialsAssignOptions = never\n\nexport type AcsCredentialsCreateBody =\n  RouteRequestBody<'/acs/credentials/create'>\n\nexport type AcsCredentialsCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/create'>>\n>\n\nexport type AcsCredentialsCreateOptions = never\n\nexport type AcsCredentialsDeleteParams =\n  RouteRequestBody<'/acs/credentials/delete'>\n\nexport type AcsCredentialsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/delete'>>\n>\n\nexport type AcsCredentialsDeleteOptions = never\n\nexport type AcsCredentialsGetParams = RouteRequestBody<'/acs/credentials/get'>\n\nexport type AcsCredentialsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/get'>>\n>\n\nexport type AcsCredentialsGetOptions = never\n\nexport type AcsCredentialsListParams = RouteRequestBody<'/acs/credentials/list'>\n\nexport type AcsCredentialsListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/list'>>\n>\n\nexport type AcsCredentialsListOptions = never\n\nexport type AcsCredentialsListAccessibleEntrancesParams =\n  RouteRequestBody<'/acs/credentials/list_accessible_entrances'>\n\nexport type AcsCredentialsListAccessibleEntrancesResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/list_accessible_entrances'>>\n>\n\nexport type AcsCredentialsListAccessibleEntrancesOptions = never\n\nexport type AcsCredentialsUnassignBody =\n  RouteRequestBody<'/acs/credentials/unassign'>\n\nexport type AcsCredentialsUnassignResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/unassign'>>\n>\n\nexport type AcsCredentialsUnassignOptions = never\n\nexport type AcsCredentialsUpdateBody =\n  RouteRequestBody<'/acs/credentials/update'>\n\nexport type AcsCredentialsUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/credentials/update'>>\n>\n\nexport type AcsCredentialsUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsEntrances {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsEntrances {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsEntrances(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsEntrances {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsEntrances(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsEntrances {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsEntrances(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsEntrances> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsEntrances.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsEntrances {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsEntrances(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsEntrances {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsEntrances(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: AcsEntrancesGetParams,\n  ): SeamHttpRequest<AcsEntrancesGetResponse, 'acs_entrance'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/entrances/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_entrance',\n    })\n  }\n\n  grantAccess(\n    body?: AcsEntrancesGrantAccessBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/entrances/grant_access',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  list(\n    body?: AcsEntrancesListParams,\n  ): SeamHttpRequest<AcsEntrancesListResponse, 'acs_entrances'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/entrances/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_entrances',\n    })\n  }\n\n  listCredentialsWithAccess(\n    body?: AcsEntrancesListCredentialsWithAccessParams,\n  ): SeamHttpRequest<\n    AcsEntrancesListCredentialsWithAccessResponse,\n    'acs_credentials'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/entrances/list_credentials_with_access',\n      method: 'post',\n      body,\n      responseKey: 'acs_credentials',\n    })\n  }\n}\n\nexport type AcsEntrancesGetParams = RouteRequestBody<'/acs/entrances/get'>\n\nexport type AcsEntrancesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/entrances/get'>>\n>\n\nexport type AcsEntrancesGetOptions = never\n\nexport type AcsEntrancesGrantAccessBody =\n  RouteRequestBody<'/acs/entrances/grant_access'>\n\nexport type AcsEntrancesGrantAccessResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/entrances/grant_access'>>\n>\n\nexport type AcsEntrancesGrantAccessOptions = never\n\nexport type AcsEntrancesListParams = RouteRequestBody<'/acs/entrances/list'>\n\nexport type AcsEntrancesListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/entrances/list'>>\n>\n\nexport type AcsEntrancesListOptions = never\n\nexport type AcsEntrancesListCredentialsWithAccessParams =\n  RouteRequestBody<'/acs/entrances/list_credentials_with_access'>\n\nexport type AcsEntrancesListCredentialsWithAccessResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/entrances/list_credentials_with_access'>>\n>\n\nexport type AcsEntrancesListCredentialsWithAccessOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsSystems {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsSystems {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsSystems(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsSystems {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsSystems(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsSystems {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsSystems(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsSystems> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsSystems.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsSystems {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsSystems(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsSystems {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsSystems(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: AcsSystemsGetParams,\n  ): SeamHttpRequest<AcsSystemsGetResponse, 'acs_system'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/systems/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_system',\n    })\n  }\n\n  list(\n    body?: AcsSystemsListParams,\n  ): SeamHttpRequest<AcsSystemsListResponse, 'acs_systems'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/systems/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_systems',\n    })\n  }\n\n  listCompatibleCredentialManagerAcsSystems(\n    body?: AcsSystemsListCompatibleCredentialManagerAcsSystemsParams,\n  ): SeamHttpRequest<\n    AcsSystemsListCompatibleCredentialManagerAcsSystemsResponse,\n    'acs_systems'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/acs/systems/list_compatible_credential_manager_acs_systems',\n      method: 'post',\n      body,\n      responseKey: 'acs_systems',\n    })\n  }\n}\n\nexport type AcsSystemsGetParams = RouteRequestBody<'/acs/systems/get'>\n\nexport type AcsSystemsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/systems/get'>>\n>\n\nexport type AcsSystemsGetOptions = never\n\nexport type AcsSystemsListParams = RouteRequestBody<'/acs/systems/list'>\n\nexport type AcsSystemsListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/systems/list'>>\n>\n\nexport type AcsSystemsListOptions = never\n\nexport type AcsSystemsListCompatibleCredentialManagerAcsSystemsParams =\n  RouteRequestBody<'/acs/systems/list_compatible_credential_manager_acs_systems'>\n\nexport type AcsSystemsListCompatibleCredentialManagerAcsSystemsResponse =\n  SetNonNullable<\n    Required<\n      RouteResponse<'/acs/systems/list_compatible_credential_manager_acs_systems'>\n    >\n  >\n\nexport type AcsSystemsListCompatibleCredentialManagerAcsSystemsOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsUsersUnmanaged {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsUsersUnmanaged {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsUsersUnmanaged(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsUsersUnmanaged {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsUsersUnmanaged(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsUsersUnmanaged {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsUsersUnmanaged(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsUsersUnmanaged> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsUsersUnmanaged.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsUsersUnmanaged {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsUsersUnmanaged(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsUsersUnmanaged {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsUsersUnmanaged(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: AcsUsersUnmanagedGetParams,\n  ): SeamHttpRequest<AcsUsersUnmanagedGetResponse, 'acs_user'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/unmanaged/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_user',\n    })\n  }\n\n  list(\n    body?: AcsUsersUnmanagedListParams,\n  ): SeamHttpRequest<AcsUsersUnmanagedListResponse, 'acs_users'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/unmanaged/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_users',\n    })\n  }\n}\n\nexport type AcsUsersUnmanagedGetParams =\n  RouteRequestBody<'/acs/users/unmanaged/get'>\n\nexport type AcsUsersUnmanagedGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/unmanaged/get'>>\n>\n\nexport type AcsUsersUnmanagedGetOptions = never\n\nexport type AcsUsersUnmanagedListParams =\n  RouteRequestBody<'/acs/users/unmanaged/list'>\n\nexport type AcsUsersUnmanagedListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/unmanaged/list'>>\n>\n\nexport type AcsUsersUnmanagedListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpAcsUsersUnmanaged } from './acs-users-unmanaged.js'\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsUsers {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsUsers {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsUsers(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsUsers {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsUsers(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsUsers {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsUsers(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsUsers> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsUsers.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsUsers {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsUsers(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsUsers {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsUsers(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get unmanaged(): SeamHttpAcsUsersUnmanaged {\n    return SeamHttpAcsUsersUnmanaged.fromClient(this.client, this.defaults)\n  }\n\n  addToAccessGroup(\n    body?: AcsUsersAddToAccessGroupBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/add_to_access_group',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  create(\n    body?: AcsUsersCreateBody,\n  ): SeamHttpRequest<AcsUsersCreateResponse, 'acs_user'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/create',\n      method: 'post',\n      body,\n      responseKey: 'acs_user',\n    })\n  }\n\n  delete(body?: AcsUsersDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: AcsUsersGetParams,\n  ): SeamHttpRequest<AcsUsersGetResponse, 'acs_user'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/get',\n      method: 'post',\n      body,\n      responseKey: 'acs_user',\n    })\n  }\n\n  list(\n    body?: AcsUsersListParams,\n  ): SeamHttpRequest<AcsUsersListResponse, 'acs_users'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/list',\n      method: 'post',\n      body,\n      responseKey: 'acs_users',\n    })\n  }\n\n  listAccessibleEntrances(\n    body?: AcsUsersListAccessibleEntrancesParams,\n  ): SeamHttpRequest<AcsUsersListAccessibleEntrancesResponse, 'acs_entrances'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/list_accessible_entrances',\n      method: 'post',\n      body,\n      responseKey: 'acs_entrances',\n    })\n  }\n\n  removeFromAccessGroup(\n    body?: AcsUsersRemoveFromAccessGroupParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/remove_from_access_group',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  revokeAccessToAllEntrances(\n    body?: AcsUsersRevokeAccessToAllEntrancesParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/revoke_access_to_all_entrances',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  suspend(body?: AcsUsersSuspendBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/suspend',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  unsuspend(body?: AcsUsersUnsuspendBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/unsuspend',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  update(body?: AcsUsersUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/users/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type AcsUsersAddToAccessGroupBody =\n  RouteRequestBody<'/acs/users/add_to_access_group'>\n\nexport type AcsUsersAddToAccessGroupResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/add_to_access_group'>>\n>\n\nexport type AcsUsersAddToAccessGroupOptions = never\n\nexport type AcsUsersCreateBody = RouteRequestBody<'/acs/users/create'>\n\nexport type AcsUsersCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/create'>>\n>\n\nexport type AcsUsersCreateOptions = never\n\nexport type AcsUsersDeleteParams = RouteRequestBody<'/acs/users/delete'>\n\nexport type AcsUsersDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/delete'>>\n>\n\nexport type AcsUsersDeleteOptions = never\n\nexport type AcsUsersGetParams = RouteRequestBody<'/acs/users/get'>\n\nexport type AcsUsersGetResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/get'>>\n>\n\nexport type AcsUsersGetOptions = never\n\nexport type AcsUsersListParams = RouteRequestBody<'/acs/users/list'>\n\nexport type AcsUsersListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/list'>>\n>\n\nexport type AcsUsersListOptions = never\n\nexport type AcsUsersListAccessibleEntrancesParams =\n  RouteRequestBody<'/acs/users/list_accessible_entrances'>\n\nexport type AcsUsersListAccessibleEntrancesResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/list_accessible_entrances'>>\n>\n\nexport type AcsUsersListAccessibleEntrancesOptions = never\n\nexport type AcsUsersRemoveFromAccessGroupParams =\n  RouteRequestBody<'/acs/users/remove_from_access_group'>\n\nexport type AcsUsersRemoveFromAccessGroupResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/remove_from_access_group'>>\n>\n\nexport type AcsUsersRemoveFromAccessGroupOptions = never\n\nexport type AcsUsersRevokeAccessToAllEntrancesParams =\n  RouteRequestBody<'/acs/users/revoke_access_to_all_entrances'>\n\nexport type AcsUsersRevokeAccessToAllEntrancesResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/revoke_access_to_all_entrances'>>\n>\n\nexport type AcsUsersRevokeAccessToAllEntrancesOptions = never\n\nexport type AcsUsersSuspendBody = RouteRequestBody<'/acs/users/suspend'>\n\nexport type AcsUsersSuspendResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/suspend'>>\n>\n\nexport type AcsUsersSuspendOptions = never\n\nexport type AcsUsersUnsuspendBody = RouteRequestBody<'/acs/users/unsuspend'>\n\nexport type AcsUsersUnsuspendResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/unsuspend'>>\n>\n\nexport type AcsUsersUnsuspendOptions = never\n\nexport type AcsUsersUpdateBody = RouteRequestBody<'/acs/users/update'>\n\nexport type AcsUsersUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/users/update'>>\n>\n\nexport type AcsUsersUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\n\nimport { SeamHttpAcsAccessGroups } from './acs-access-groups.js'\nimport { SeamHttpAcsCredentialPools } from './acs-credential-pools.js'\nimport { SeamHttpAcsCredentialProvisioningAutomations } from './acs-credential-provisioning-automations.js'\nimport { SeamHttpAcsCredentials } from './acs-credentials.js'\nimport { SeamHttpAcsEntrances } from './acs-entrances.js'\nimport { SeamHttpAcsSystems } from './acs-systems.js'\nimport { SeamHttpAcsUsers } from './acs-users.js'\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcs {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcs {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcs(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcs {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcs(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcs {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcs(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcs> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcs.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcs {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcs(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcs {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcs(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get accessGroups(): SeamHttpAcsAccessGroups {\n    return SeamHttpAcsAccessGroups.fromClient(this.client, this.defaults)\n  }\n\n  get credentialPools(): SeamHttpAcsCredentialPools {\n    return SeamHttpAcsCredentialPools.fromClient(this.client, this.defaults)\n  }\n\n  get credentialProvisioningAutomations(): SeamHttpAcsCredentialProvisioningAutomations {\n    return SeamHttpAcsCredentialProvisioningAutomations.fromClient(\n      this.client,\n      this.defaults,\n    )\n  }\n\n  get credentials(): SeamHttpAcsCredentials {\n    return SeamHttpAcsCredentials.fromClient(this.client, this.defaults)\n  }\n\n  get entrances(): SeamHttpAcsEntrances {\n    return SeamHttpAcsEntrances.fromClient(this.client, this.defaults)\n  }\n\n  get systems(): SeamHttpAcsSystems {\n    return SeamHttpAcsSystems.fromClient(this.client, this.defaults)\n  }\n\n  get users(): SeamHttpAcsUsers {\n    return SeamHttpAcsUsers.fromClient(this.client, this.defaults)\n  }\n}\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpAcsEncoders {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpAcsEncoders {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpAcsEncoders(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpAcsEncoders {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpAcsEncoders(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpAcsEncoders {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpAcsEncoders(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpAcsEncoders> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpAcsEncoders.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsEncoders {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsEncoders(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpAcsEncoders {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpAcsEncoders(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  encodeCard(\n    body?: AcsEncodersEncodeCardBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<AcsEncodersEncodeCardResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/encoders/encode_card',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  list(\n    body?: AcsEncodersListParams,\n  ): SeamHttpRequest<AcsEncodersListResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/encoders/list',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n\n  readCard(\n    body?: AcsEncodersReadCardBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<AcsEncodersReadCardResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/acs/encoders/read_card',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n}\n\nexport type AcsEncodersEncodeCardBody =\n  RouteRequestBody<'/acs/encoders/encode_card'>\n\nexport type AcsEncodersEncodeCardResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/encoders/encode_card'>>\n>\n\nexport type AcsEncodersEncodeCardOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type AcsEncodersListParams = RouteRequestBody<'/acs/encoders/list'>\n\nexport type AcsEncodersListResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/encoders/list'>>\n>\n\nexport type AcsEncodersListOptions = never\n\nexport type AcsEncodersReadCardBody =\n  RouteRequestBody<'/acs/encoders/read_card'>\n\nexport type AcsEncodersReadCardResponse = SetNonNullable<\n  Required<RouteResponse<'/acs/encoders/read_card'>>\n>\n\nexport type AcsEncodersReadCardOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpActionAttempts {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpActionAttempts {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpActionAttempts(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpActionAttempts {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpActionAttempts(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpActionAttempts {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpActionAttempts(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpActionAttempts> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpActionAttempts.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpActionAttempts {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpActionAttempts(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpActionAttempts {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpActionAttempts(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: ActionAttemptsGetParams,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ActionAttemptsGetResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/action_attempts/get',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  list(\n    body?: ActionAttemptsListParams,\n  ): SeamHttpRequest<ActionAttemptsListResponse, 'action_attempts'> {\n    return new SeamHttpRequest(this, {\n      path: '/action_attempts/list',\n      method: 'post',\n      body,\n      responseKey: 'action_attempts',\n    })\n  }\n}\n\nexport type ActionAttemptsGetParams = RouteRequestBody<'/action_attempts/get'>\n\nexport type ActionAttemptsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/action_attempts/get'>>\n>\n\nexport type ActionAttemptsGetOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ActionAttemptsListParams = RouteRequestBody<'/action_attempts/list'>\n\nexport type ActionAttemptsListResponse = SetNonNullable<\n  Required<RouteResponse<'/action_attempts/list'>>\n>\n\nexport type ActionAttemptsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpConnectWebviews {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpConnectWebviews {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpConnectWebviews(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpConnectWebviews {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpConnectWebviews(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpConnectWebviews {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpConnectWebviews(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpConnectWebviews> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpConnectWebviews.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpConnectWebviews {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpConnectWebviews(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpConnectWebviews {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpConnectWebviews(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: ConnectWebviewsCreateBody,\n  ): SeamHttpRequest<ConnectWebviewsCreateResponse, 'connect_webview'> {\n    return new SeamHttpRequest(this, {\n      path: '/connect_webviews/create',\n      method: 'post',\n      body,\n      responseKey: 'connect_webview',\n    })\n  }\n\n  delete(body?: ConnectWebviewsDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/connect_webviews/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: ConnectWebviewsGetParams,\n  ): SeamHttpRequest<ConnectWebviewsGetResponse, 'connect_webview'> {\n    return new SeamHttpRequest(this, {\n      path: '/connect_webviews/get',\n      method: 'post',\n      body,\n      responseKey: 'connect_webview',\n    })\n  }\n\n  list(\n    body?: ConnectWebviewsListParams,\n  ): SeamHttpRequest<ConnectWebviewsListResponse, 'connect_webviews'> {\n    return new SeamHttpRequest(this, {\n      path: '/connect_webviews/list',\n      method: 'post',\n      body,\n      responseKey: 'connect_webviews',\n    })\n  }\n}\n\nexport type ConnectWebviewsCreateBody =\n  RouteRequestBody<'/connect_webviews/create'>\n\nexport type ConnectWebviewsCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/connect_webviews/create'>>\n>\n\nexport type ConnectWebviewsCreateOptions = never\n\nexport type ConnectWebviewsDeleteParams =\n  RouteRequestBody<'/connect_webviews/delete'>\n\nexport type ConnectWebviewsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/connect_webviews/delete'>>\n>\n\nexport type ConnectWebviewsDeleteOptions = never\n\nexport type ConnectWebviewsGetParams = RouteRequestBody<'/connect_webviews/get'>\n\nexport type ConnectWebviewsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/connect_webviews/get'>>\n>\n\nexport type ConnectWebviewsGetOptions = never\n\nexport type ConnectWebviewsListParams =\n  RouteRequestBody<'/connect_webviews/list'>\n\nexport type ConnectWebviewsListResponse = SetNonNullable<\n  Required<RouteResponse<'/connect_webviews/list'>>\n>\n\nexport type ConnectWebviewsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpConnectedAccounts {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpConnectedAccounts {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpConnectedAccounts(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpConnectedAccounts {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpConnectedAccounts(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpConnectedAccounts {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpConnectedAccounts(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpConnectedAccounts> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpConnectedAccounts.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpConnectedAccounts {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpConnectedAccounts(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpConnectedAccounts {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpConnectedAccounts(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  delete(\n    body?: ConnectedAccountsDeleteParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/connected_accounts/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: ConnectedAccountsGetParams,\n  ): SeamHttpRequest<ConnectedAccountsGetResponse, 'connected_account'> {\n    return new SeamHttpRequest(this, {\n      path: '/connected_accounts/get',\n      method: 'post',\n      body,\n      responseKey: 'connected_account',\n    })\n  }\n\n  list(\n    body?: ConnectedAccountsListParams,\n  ): SeamHttpRequest<ConnectedAccountsListResponse, 'connected_accounts'> {\n    return new SeamHttpRequest(this, {\n      path: '/connected_accounts/list',\n      method: 'post',\n      body,\n      responseKey: 'connected_accounts',\n    })\n  }\n\n  update(\n    body?: ConnectedAccountsUpdateBody,\n  ): SeamHttpRequest<ConnectedAccountsUpdateResponse, 'connected_account'> {\n    return new SeamHttpRequest(this, {\n      path: '/connected_accounts/update',\n      method: 'post',\n      body,\n      responseKey: 'connected_account',\n    })\n  }\n}\n\nexport type ConnectedAccountsDeleteParams =\n  RouteRequestBody<'/connected_accounts/delete'>\n\nexport type ConnectedAccountsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/connected_accounts/delete'>>\n>\n\nexport type ConnectedAccountsDeleteOptions = never\n\nexport type ConnectedAccountsGetParams =\n  RouteRequestBody<'/connected_accounts/get'>\n\nexport type ConnectedAccountsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/connected_accounts/get'>>\n>\n\nexport type ConnectedAccountsGetOptions = never\n\nexport type ConnectedAccountsListParams =\n  RouteRequestBody<'/connected_accounts/list'>\n\nexport type ConnectedAccountsListResponse = SetNonNullable<\n  Required<RouteResponse<'/connected_accounts/list'>>\n>\n\nexport type ConnectedAccountsListOptions = never\n\nexport type ConnectedAccountsUpdateBody =\n  RouteRequestBody<'/connected_accounts/update'>\n\nexport type ConnectedAccountsUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/connected_accounts/update'>>\n>\n\nexport type ConnectedAccountsUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpDevicesSimulate {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpDevicesSimulate {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpDevicesSimulate(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpDevicesSimulate {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpDevicesSimulate(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpDevicesSimulate {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpDevicesSimulate(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpDevicesSimulate> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpDevicesSimulate.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevicesSimulate {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevicesSimulate(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevicesSimulate {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevicesSimulate(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  connect(body?: DevicesSimulateConnectBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/simulate/connect',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  disconnect(\n    body?: DevicesSimulateDisconnectBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/simulate/disconnect',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  remove(body?: DevicesSimulateRemoveParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/simulate/remove',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type DevicesSimulateConnectBody =\n  RouteRequestBody<'/devices/simulate/connect'>\n\nexport type DevicesSimulateConnectResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/simulate/connect'>>\n>\n\nexport type DevicesSimulateConnectOptions = never\n\nexport type DevicesSimulateDisconnectBody =\n  RouteRequestBody<'/devices/simulate/disconnect'>\n\nexport type DevicesSimulateDisconnectResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/simulate/disconnect'>>\n>\n\nexport type DevicesSimulateDisconnectOptions = never\n\nexport type DevicesSimulateRemoveParams =\n  RouteRequestBody<'/devices/simulate/remove'>\n\nexport type DevicesSimulateRemoveResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/simulate/remove'>>\n>\n\nexport type DevicesSimulateRemoveOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpDevicesUnmanaged {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpDevicesUnmanaged {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpDevicesUnmanaged(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpDevicesUnmanaged {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpDevicesUnmanaged(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpDevicesUnmanaged {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpDevicesUnmanaged(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpDevicesUnmanaged> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpDevicesUnmanaged.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevicesUnmanaged {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevicesUnmanaged(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevicesUnmanaged {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevicesUnmanaged(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: DevicesUnmanagedGetParams,\n  ): SeamHttpRequest<DevicesUnmanagedGetResponse, 'device'> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/unmanaged/get',\n      method: 'post',\n      body,\n      responseKey: 'device',\n    })\n  }\n\n  list(\n    body?: DevicesUnmanagedListParams,\n  ): SeamHttpRequest<DevicesUnmanagedListResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/unmanaged/list',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n\n  update(body?: DevicesUnmanagedUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/unmanaged/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type DevicesUnmanagedGetParams =\n  RouteRequestBody<'/devices/unmanaged/get'>\n\nexport type DevicesUnmanagedGetResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/unmanaged/get'>>\n>\n\nexport type DevicesUnmanagedGetOptions = never\n\nexport type DevicesUnmanagedListParams =\n  RouteRequestBody<'/devices/unmanaged/list'>\n\nexport type DevicesUnmanagedListResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/unmanaged/list'>>\n>\n\nexport type DevicesUnmanagedListOptions = never\n\nexport type DevicesUnmanagedUpdateBody =\n  RouteRequestBody<'/devices/unmanaged/update'>\n\nexport type DevicesUnmanagedUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/unmanaged/update'>>\n>\n\nexport type DevicesUnmanagedUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\nimport { SeamHttpDevicesSimulate } from './devices-simulate.js'\nimport { SeamHttpDevicesUnmanaged } from './devices-unmanaged.js'\n\nexport class SeamHttpDevices {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpDevices {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpDevices(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpDevices {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpDevices(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpDevices {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpDevices(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpDevices> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpDevices.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevices {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevices(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpDevices {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpDevices(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get unmanaged(): SeamHttpDevicesUnmanaged {\n    return SeamHttpDevicesUnmanaged.fromClient(this.client, this.defaults)\n  }\n\n  get simulate(): SeamHttpDevicesSimulate {\n    return SeamHttpDevicesSimulate.fromClient(this.client, this.defaults)\n  }\n\n  delete(body?: DevicesDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(body?: DevicesGetParams): SeamHttpRequest<DevicesGetResponse, 'device'> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/get',\n      method: 'post',\n      body,\n      responseKey: 'device',\n    })\n  }\n\n  list(\n    body?: DevicesListParams,\n  ): SeamHttpRequest<DevicesListResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/list',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n\n  listDeviceProviders(\n    body?: DevicesListDeviceProvidersParams,\n  ): SeamHttpRequest<DevicesListDeviceProvidersResponse, 'device_providers'> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/list_device_providers',\n      method: 'post',\n      body,\n      responseKey: 'device_providers',\n    })\n  }\n\n  update(body?: DevicesUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/devices/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type DevicesDeleteParams = RouteRequestBody<'/devices/delete'>\n\nexport type DevicesDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/delete'>>\n>\n\nexport type DevicesDeleteOptions = never\n\nexport type DevicesGetParams = RouteRequestBody<'/devices/get'>\n\nexport type DevicesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/get'>>\n>\n\nexport type DevicesGetOptions = never\n\nexport type DevicesListParams = RouteRequestBody<'/devices/list'>\n\nexport type DevicesListResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/list'>>\n>\n\nexport type DevicesListOptions = never\n\nexport type DevicesListDeviceProvidersParams =\n  RouteRequestBody<'/devices/list_device_providers'>\n\nexport type DevicesListDeviceProvidersResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/list_device_providers'>>\n>\n\nexport type DevicesListDeviceProvidersOptions = never\n\nexport type DevicesUpdateBody = RouteRequestBody<'/devices/update'>\n\nexport type DevicesUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/devices/update'>>\n>\n\nexport type DevicesUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpEvents {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpEvents {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpEvents(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpEvents {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpEvents(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpEvents {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpEvents(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpEvents> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpEvents.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpEvents {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpEvents(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpEvents {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpEvents(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(body?: EventsGetParams): SeamHttpRequest<EventsGetResponse, 'event'> {\n    return new SeamHttpRequest(this, {\n      path: '/events/get',\n      method: 'post',\n      body,\n      responseKey: 'event',\n    })\n  }\n\n  list(body?: EventsListParams): SeamHttpRequest<EventsListResponse, 'events'> {\n    return new SeamHttpRequest(this, {\n      path: '/events/list',\n      method: 'post',\n      body,\n      responseKey: 'events',\n    })\n  }\n}\n\nexport type EventsGetParams = RouteRequestBody<'/events/get'>\n\nexport type EventsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/events/get'>>\n>\n\nexport type EventsGetOptions = never\n\nexport type EventsListParams = RouteRequestBody<'/events/list'>\n\nexport type EventsListResponse = SetNonNullable<\n  Required<RouteResponse<'/events/list'>>\n>\n\nexport type EventsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpLocks {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpLocks {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpLocks(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpLocks {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpLocks(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpLocks {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpLocks(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpLocks> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpLocks.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpLocks {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpLocks(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpLocks {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpLocks(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(body?: LocksGetParams): SeamHttpRequest<LocksGetResponse, 'device'> {\n    return new SeamHttpRequest(this, {\n      path: '/locks/get',\n      method: 'post',\n      body,\n      responseKey: 'device',\n    })\n  }\n\n  list(body?: LocksListParams): SeamHttpRequest<LocksListResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/locks/list',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n\n  lockDoor(\n    body?: LocksLockDoorBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<LocksLockDoorResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/locks/lock_door',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  unlockDoor(\n    body?: LocksUnlockDoorBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<LocksUnlockDoorResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/locks/unlock_door',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n}\n\nexport type LocksGetParams = RouteRequestBody<'/locks/get'>\n\nexport type LocksGetResponse = SetNonNullable<\n  Required<RouteResponse<'/locks/get'>>\n>\n\nexport type LocksGetOptions = never\n\nexport type LocksListParams = RouteRequestBody<'/locks/list'>\n\nexport type LocksListResponse = SetNonNullable<\n  Required<RouteResponse<'/locks/list'>>\n>\n\nexport type LocksListOptions = never\n\nexport type LocksLockDoorBody = RouteRequestBody<'/locks/lock_door'>\n\nexport type LocksLockDoorResponse = SetNonNullable<\n  Required<RouteResponse<'/locks/lock_door'>>\n>\n\nexport type LocksLockDoorOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type LocksUnlockDoorBody = RouteRequestBody<'/locks/unlock_door'>\n\nexport type LocksUnlockDoorResponse = SetNonNullable<\n  Required<RouteResponse<'/locks/unlock_door'>>\n>\n\nexport type LocksUnlockDoorOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpNetworks {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpNetworks {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpNetworks(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpNetworks {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpNetworks(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpNetworks {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpNetworks(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpNetworks> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpNetworks.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNetworks {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpNetworks(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNetworks {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpNetworks(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get(\n    body?: NetworksGetParams,\n  ): SeamHttpRequest<NetworksGetResponse, 'network'> {\n    return new SeamHttpRequest(this, {\n      path: '/networks/get',\n      method: 'post',\n      body,\n      responseKey: 'network',\n    })\n  }\n\n  list(\n    body?: NetworksListParams,\n  ): SeamHttpRequest<NetworksListResponse, 'networks'> {\n    return new SeamHttpRequest(this, {\n      path: '/networks/list',\n      method: 'post',\n      body,\n      responseKey: 'networks',\n    })\n  }\n}\n\nexport type NetworksGetParams = RouteRequestBody<'/networks/get'>\n\nexport type NetworksGetResponse = SetNonNullable<\n  Required<RouteResponse<'/networks/get'>>\n>\n\nexport type NetworksGetOptions = never\n\nexport type NetworksListParams = RouteRequestBody<'/networks/list'>\n\nexport type NetworksListResponse = SetNonNullable<\n  Required<RouteResponse<'/networks/list'>>\n>\n\nexport type NetworksListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpNoiseSensorsNoiseThresholds {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpNoiseSensorsNoiseThresholds {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpNoiseSensorsNoiseThresholds(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpNoiseSensorsNoiseThresholds {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpNoiseSensorsNoiseThresholds(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpNoiseSensorsNoiseThresholds {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpNoiseSensorsNoiseThresholds(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpNoiseSensorsNoiseThresholds> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpNoiseSensorsNoiseThresholds.fromClientSessionToken(\n      token,\n      options,\n    )\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensorsNoiseThresholds {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensorsNoiseThresholds(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensorsNoiseThresholds {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensorsNoiseThresholds(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: NoiseSensorsNoiseThresholdsCreateBody,\n  ): SeamHttpRequest<\n    NoiseSensorsNoiseThresholdsCreateResponse,\n    'noise_threshold'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/noise_thresholds/create',\n      method: 'post',\n      body,\n      responseKey: 'noise_threshold',\n    })\n  }\n\n  delete(\n    body?: NoiseSensorsNoiseThresholdsDeleteParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/noise_thresholds/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: NoiseSensorsNoiseThresholdsGetParams,\n  ): SeamHttpRequest<\n    NoiseSensorsNoiseThresholdsGetResponse,\n    'noise_threshold'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/noise_thresholds/get',\n      method: 'post',\n      body,\n      responseKey: 'noise_threshold',\n    })\n  }\n\n  list(\n    body?: NoiseSensorsNoiseThresholdsListParams,\n  ): SeamHttpRequest<\n    NoiseSensorsNoiseThresholdsListResponse,\n    'noise_thresholds'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/noise_thresholds/list',\n      method: 'post',\n      body,\n      responseKey: 'noise_thresholds',\n    })\n  }\n\n  update(\n    body?: NoiseSensorsNoiseThresholdsUpdateBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/noise_thresholds/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type NoiseSensorsNoiseThresholdsCreateBody =\n  RouteRequestBody<'/noise_sensors/noise_thresholds/create'>\n\nexport type NoiseSensorsNoiseThresholdsCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/noise_thresholds/create'>>\n>\n\nexport type NoiseSensorsNoiseThresholdsCreateOptions = never\n\nexport type NoiseSensorsNoiseThresholdsDeleteParams =\n  RouteRequestBody<'/noise_sensors/noise_thresholds/delete'>\n\nexport type NoiseSensorsNoiseThresholdsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/noise_thresholds/delete'>>\n>\n\nexport type NoiseSensorsNoiseThresholdsDeleteOptions = never\n\nexport type NoiseSensorsNoiseThresholdsGetParams =\n  RouteRequestBody<'/noise_sensors/noise_thresholds/get'>\n\nexport type NoiseSensorsNoiseThresholdsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/noise_thresholds/get'>>\n>\n\nexport type NoiseSensorsNoiseThresholdsGetOptions = never\n\nexport type NoiseSensorsNoiseThresholdsListParams =\n  RouteRequestBody<'/noise_sensors/noise_thresholds/list'>\n\nexport type NoiseSensorsNoiseThresholdsListResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/noise_thresholds/list'>>\n>\n\nexport type NoiseSensorsNoiseThresholdsListOptions = never\n\nexport type NoiseSensorsNoiseThresholdsUpdateBody =\n  RouteRequestBody<'/noise_sensors/noise_thresholds/update'>\n\nexport type NoiseSensorsNoiseThresholdsUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/noise_thresholds/update'>>\n>\n\nexport type NoiseSensorsNoiseThresholdsUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpNoiseSensorsSimulate {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpNoiseSensorsSimulate {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpNoiseSensorsSimulate(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpNoiseSensorsSimulate {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpNoiseSensorsSimulate(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpNoiseSensorsSimulate {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpNoiseSensorsSimulate(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpNoiseSensorsSimulate> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpNoiseSensorsSimulate.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensorsSimulate {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensorsSimulate(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensorsSimulate {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensorsSimulate(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  triggerNoiseThreshold(\n    body?: NoiseSensorsSimulateTriggerNoiseThresholdBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/simulate/trigger_noise_threshold',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type NoiseSensorsSimulateTriggerNoiseThresholdBody =\n  RouteRequestBody<'/noise_sensors/simulate/trigger_noise_threshold'>\n\nexport type NoiseSensorsSimulateTriggerNoiseThresholdResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/simulate/trigger_noise_threshold'>>\n>\n\nexport type NoiseSensorsSimulateTriggerNoiseThresholdOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\nimport { SeamHttpNoiseSensorsNoiseThresholds } from './noise-sensors-noise-thresholds.js'\nimport { SeamHttpNoiseSensorsSimulate } from './noise-sensors-simulate.js'\n\nexport class SeamHttpNoiseSensors {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpNoiseSensors {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpNoiseSensors(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpNoiseSensors {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpNoiseSensors(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpNoiseSensors {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpNoiseSensors(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpNoiseSensors> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpNoiseSensors.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensors {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensors(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpNoiseSensors {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpNoiseSensors(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get noiseThresholds(): SeamHttpNoiseSensorsNoiseThresholds {\n    return SeamHttpNoiseSensorsNoiseThresholds.fromClient(\n      this.client,\n      this.defaults,\n    )\n  }\n\n  get simulate(): SeamHttpNoiseSensorsSimulate {\n    return SeamHttpNoiseSensorsSimulate.fromClient(this.client, this.defaults)\n  }\n\n  list(\n    body?: NoiseSensorsListParams,\n  ): SeamHttpRequest<NoiseSensorsListResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/noise_sensors/list',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n}\n\nexport type NoiseSensorsListParams = RouteRequestBody<'/noise_sensors/list'>\n\nexport type NoiseSensorsListResponse = SetNonNullable<\n  Required<RouteResponse<'/noise_sensors/list'>>\n>\n\nexport type NoiseSensorsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpPhonesSimulate {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpPhonesSimulate {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpPhonesSimulate(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpPhonesSimulate {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpPhonesSimulate(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpPhonesSimulate {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpPhonesSimulate(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpPhonesSimulate> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpPhonesSimulate.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpPhonesSimulate {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpPhonesSimulate(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpPhonesSimulate {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpPhonesSimulate(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  createSandboxPhone(\n    body?: PhonesSimulateCreateSandboxPhoneBody,\n  ): SeamHttpRequest<PhonesSimulateCreateSandboxPhoneResponse, 'phone'> {\n    return new SeamHttpRequest(this, {\n      path: '/phones/simulate/create_sandbox_phone',\n      method: 'post',\n      body,\n      responseKey: 'phone',\n    })\n  }\n}\n\nexport type PhonesSimulateCreateSandboxPhoneBody =\n  RouteRequestBody<'/phones/simulate/create_sandbox_phone'>\n\nexport type PhonesSimulateCreateSandboxPhoneResponse = SetNonNullable<\n  Required<RouteResponse<'/phones/simulate/create_sandbox_phone'>>\n>\n\nexport type PhonesSimulateCreateSandboxPhoneOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\nimport { SeamHttpPhonesSimulate } from './phones-simulate.js'\n\nexport class SeamHttpPhones {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpPhones {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpPhones(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpPhones {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpPhones(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpPhones {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpPhones(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpPhones> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpPhones.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpPhones {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpPhones(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpPhones {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpPhones(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get simulate(): SeamHttpPhonesSimulate {\n    return SeamHttpPhonesSimulate.fromClient(this.client, this.defaults)\n  }\n\n  deactivate(body?: PhonesDeactivateParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/phones/deactivate',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  list(body?: PhonesListParams): SeamHttpRequest<PhonesListResponse, 'phones'> {\n    return new SeamHttpRequest(this, {\n      path: '/phones/list',\n      method: 'post',\n      body,\n      responseKey: 'phones',\n    })\n  }\n}\n\nexport type PhonesDeactivateParams = RouteRequestBody<'/phones/deactivate'>\n\nexport type PhonesDeactivateResponse = SetNonNullable<\n  Required<RouteResponse<'/phones/deactivate'>>\n>\n\nexport type PhonesDeactivateOptions = never\n\nexport type PhonesListParams = RouteRequestBody<'/phones/list'>\n\nexport type PhonesListResponse = SetNonNullable<\n  Required<RouteResponse<'/phones/list'>>\n>\n\nexport type PhonesListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpThermostatsSchedules {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpThermostatsSchedules {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpThermostatsSchedules(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpThermostatsSchedules {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpThermostatsSchedules(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpThermostatsSchedules {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpThermostatsSchedules(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpThermostatsSchedules> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpThermostatsSchedules.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpThermostatsSchedules {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpThermostatsSchedules(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpThermostatsSchedules {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpThermostatsSchedules(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: ThermostatsSchedulesCreateBody,\n  ): SeamHttpRequest<\n    ThermostatsSchedulesCreateResponse,\n    'thermostat_schedule'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/schedules/create',\n      method: 'post',\n      body,\n      responseKey: 'thermostat_schedule',\n    })\n  }\n\n  delete(\n    body?: ThermostatsSchedulesDeleteParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/schedules/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: ThermostatsSchedulesGetParams,\n  ): SeamHttpRequest<ThermostatsSchedulesGetResponse, 'thermostat_schedule'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/schedules/get',\n      method: 'post',\n      body,\n      responseKey: 'thermostat_schedule',\n    })\n  }\n\n  list(\n    body?: ThermostatsSchedulesListParams,\n  ): SeamHttpRequest<ThermostatsSchedulesListResponse, 'thermostat_schedules'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/schedules/list',\n      method: 'post',\n      body,\n      responseKey: 'thermostat_schedules',\n    })\n  }\n\n  update(\n    body?: ThermostatsSchedulesUpdateBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/schedules/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type ThermostatsSchedulesCreateBody =\n  RouteRequestBody<'/thermostats/schedules/create'>\n\nexport type ThermostatsSchedulesCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/schedules/create'>>\n>\n\nexport type ThermostatsSchedulesCreateOptions = never\n\nexport type ThermostatsSchedulesDeleteParams =\n  RouteRequestBody<'/thermostats/schedules/delete'>\n\nexport type ThermostatsSchedulesDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/schedules/delete'>>\n>\n\nexport type ThermostatsSchedulesDeleteOptions = never\n\nexport type ThermostatsSchedulesGetParams =\n  RouteRequestBody<'/thermostats/schedules/get'>\n\nexport type ThermostatsSchedulesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/schedules/get'>>\n>\n\nexport type ThermostatsSchedulesGetOptions = never\n\nexport type ThermostatsSchedulesListParams =\n  RouteRequestBody<'/thermostats/schedules/list'>\n\nexport type ThermostatsSchedulesListResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/schedules/list'>>\n>\n\nexport type ThermostatsSchedulesListOptions = never\n\nexport type ThermostatsSchedulesUpdateBody =\n  RouteRequestBody<'/thermostats/schedules/update'>\n\nexport type ThermostatsSchedulesUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/schedules/update'>>\n>\n\nexport type ThermostatsSchedulesUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\nimport { SeamHttpThermostatsSchedules } from './thermostats-schedules.js'\n\nexport class SeamHttpThermostats {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpThermostats {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpThermostats(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpThermostats {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpThermostats(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpThermostats {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpThermostats(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpThermostats> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpThermostats.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpThermostats {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpThermostats(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpThermostats {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpThermostats(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get schedules(): SeamHttpThermostatsSchedules {\n    return SeamHttpThermostatsSchedules.fromClient(this.client, this.defaults)\n  }\n\n  activateClimatePreset(\n    body?: ThermostatsActivateClimatePresetBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<\n    ThermostatsActivateClimatePresetResponse,\n    'action_attempt'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/activate_climate_preset',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  cool(\n    body?: ThermostatsCoolBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ThermostatsCoolResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/cool',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  createClimatePreset(\n    body?: ThermostatsCreateClimatePresetBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/create_climate_preset',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  deleteClimatePreset(\n    body?: ThermostatsDeleteClimatePresetBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/delete_climate_preset',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: ThermostatsGetParams,\n  ): SeamHttpRequest<ThermostatsGetResponse, 'thermostat'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/get',\n      method: 'post',\n      body,\n      responseKey: 'thermostat',\n    })\n  }\n\n  heat(\n    body?: ThermostatsHeatBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ThermostatsHeatResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/heat',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  heatCool(\n    body?: ThermostatsHeatCoolBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ThermostatsHeatCoolResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/heat_cool',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  list(\n    body?: ThermostatsListParams,\n  ): SeamHttpRequest<ThermostatsListResponse, 'thermostats'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/list',\n      method: 'post',\n      body,\n      responseKey: 'thermostats',\n    })\n  }\n\n  off(\n    body?: ThermostatsOffBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ThermostatsOffResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/off',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  setFallbackClimatePreset(\n    body?: ThermostatsSetFallbackClimatePresetBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/set_fallback_climate_preset',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  setFanMode(\n    body?: ThermostatsSetFanModeBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<ThermostatsSetFanModeResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/set_fan_mode',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n\n  updateClimatePreset(\n    body?: ThermostatsUpdateClimatePresetBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/thermostats/update_climate_preset',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type ThermostatsActivateClimatePresetBody =\n  RouteRequestBody<'/thermostats/activate_climate_preset'>\n\nexport type ThermostatsActivateClimatePresetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/activate_climate_preset'>>\n>\n\nexport type ThermostatsActivateClimatePresetOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsCoolBody = RouteRequestBody<'/thermostats/cool'>\n\nexport type ThermostatsCoolResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/cool'>>\n>\n\nexport type ThermostatsCoolOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsCreateClimatePresetBody =\n  RouteRequestBody<'/thermostats/create_climate_preset'>\n\nexport type ThermostatsCreateClimatePresetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/create_climate_preset'>>\n>\n\nexport type ThermostatsCreateClimatePresetOptions = never\n\nexport type ThermostatsDeleteClimatePresetBody =\n  RouteRequestBody<'/thermostats/delete_climate_preset'>\n\nexport type ThermostatsDeleteClimatePresetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/delete_climate_preset'>>\n>\n\nexport type ThermostatsDeleteClimatePresetOptions = never\n\nexport type ThermostatsGetParams = RouteRequestBody<'/thermostats/get'>\n\nexport type ThermostatsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/get'>>\n>\n\nexport type ThermostatsGetOptions = never\n\nexport type ThermostatsHeatBody = RouteRequestBody<'/thermostats/heat'>\n\nexport type ThermostatsHeatResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/heat'>>\n>\n\nexport type ThermostatsHeatOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsHeatCoolBody = RouteRequestBody<'/thermostats/heat_cool'>\n\nexport type ThermostatsHeatCoolResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/heat_cool'>>\n>\n\nexport type ThermostatsHeatCoolOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsListParams = RouteRequestBody<'/thermostats/list'>\n\nexport type ThermostatsListResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/list'>>\n>\n\nexport type ThermostatsListOptions = never\n\nexport type ThermostatsOffBody = RouteRequestBody<'/thermostats/off'>\n\nexport type ThermostatsOffResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/off'>>\n>\n\nexport type ThermostatsOffOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsSetFallbackClimatePresetBody =\n  RouteRequestBody<'/thermostats/set_fallback_climate_preset'>\n\nexport type ThermostatsSetFallbackClimatePresetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/set_fallback_climate_preset'>>\n>\n\nexport type ThermostatsSetFallbackClimatePresetOptions = never\n\nexport type ThermostatsSetFanModeBody =\n  RouteRequestBody<'/thermostats/set_fan_mode'>\n\nexport type ThermostatsSetFanModeResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/set_fan_mode'>>\n>\n\nexport type ThermostatsSetFanModeOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n\nexport type ThermostatsUpdateClimatePresetBody =\n  RouteRequestBody<'/thermostats/update_climate_preset'>\n\nexport type ThermostatsUpdateClimatePresetResponse = SetNonNullable<\n  Required<RouteResponse<'/thermostats/update_climate_preset'>>\n>\n\nexport type ThermostatsUpdateClimatePresetOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpUserIdentitiesEnrollmentAutomations {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpUserIdentitiesEnrollmentAutomations {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpUserIdentitiesEnrollmentAutomations(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpUserIdentitiesEnrollmentAutomations {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpUserIdentitiesEnrollmentAutomations(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpUserIdentitiesEnrollmentAutomations {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpUserIdentitiesEnrollmentAutomations(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpUserIdentitiesEnrollmentAutomations> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpUserIdentitiesEnrollmentAutomations.fromClientSessionToken(\n      token,\n      options,\n    )\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpUserIdentitiesEnrollmentAutomations {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpUserIdentitiesEnrollmentAutomations(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpUserIdentitiesEnrollmentAutomations {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpUserIdentitiesEnrollmentAutomations(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  delete(\n    body?: UserIdentitiesEnrollmentAutomationsDeleteParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/enrollment_automations/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: UserIdentitiesEnrollmentAutomationsGetParams,\n  ): SeamHttpRequest<\n    UserIdentitiesEnrollmentAutomationsGetResponse,\n    'enrollment_automation'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/enrollment_automations/get',\n      method: 'post',\n      body,\n      responseKey: 'enrollment_automation',\n    })\n  }\n\n  launch(\n    body?: UserIdentitiesEnrollmentAutomationsLaunchBody,\n  ): SeamHttpRequest<\n    UserIdentitiesEnrollmentAutomationsLaunchResponse,\n    'enrollment_automation'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/enrollment_automations/launch',\n      method: 'post',\n      body,\n      responseKey: 'enrollment_automation',\n    })\n  }\n\n  list(\n    body?: UserIdentitiesEnrollmentAutomationsListParams,\n  ): SeamHttpRequest<\n    UserIdentitiesEnrollmentAutomationsListResponse,\n    'enrollment_automations'\n  > {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/enrollment_automations/list',\n      method: 'post',\n      body,\n      responseKey: 'enrollment_automations',\n    })\n  }\n}\n\nexport type UserIdentitiesEnrollmentAutomationsDeleteParams =\n  RouteRequestBody<'/user_identities/enrollment_automations/delete'>\n\nexport type UserIdentitiesEnrollmentAutomationsDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/enrollment_automations/delete'>>\n>\n\nexport type UserIdentitiesEnrollmentAutomationsDeleteOptions = never\n\nexport type UserIdentitiesEnrollmentAutomationsGetParams =\n  RouteRequestBody<'/user_identities/enrollment_automations/get'>\n\nexport type UserIdentitiesEnrollmentAutomationsGetResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/enrollment_automations/get'>>\n>\n\nexport type UserIdentitiesEnrollmentAutomationsGetOptions = never\n\nexport type UserIdentitiesEnrollmentAutomationsLaunchBody =\n  RouteRequestBody<'/user_identities/enrollment_automations/launch'>\n\nexport type UserIdentitiesEnrollmentAutomationsLaunchResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/enrollment_automations/launch'>>\n>\n\nexport type UserIdentitiesEnrollmentAutomationsLaunchOptions = never\n\nexport type UserIdentitiesEnrollmentAutomationsListParams =\n  RouteRequestBody<'/user_identities/enrollment_automations/list'>\n\nexport type UserIdentitiesEnrollmentAutomationsListResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/enrollment_automations/list'>>\n>\n\nexport type UserIdentitiesEnrollmentAutomationsListOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\nimport { SeamHttpUserIdentitiesEnrollmentAutomations } from './user-identities-enrollment-automations.js'\n\nexport class SeamHttpUserIdentities {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpUserIdentities {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpUserIdentities(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpUserIdentities {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpUserIdentities(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpUserIdentities {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpUserIdentities(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpUserIdentities> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpUserIdentities.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpUserIdentities {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpUserIdentities(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpUserIdentities {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpUserIdentities(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get enrollmentAutomations(): SeamHttpUserIdentitiesEnrollmentAutomations {\n    return SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(\n      this.client,\n      this.defaults,\n    )\n  }\n\n  addAcsUser(\n    body?: UserIdentitiesAddAcsUserBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/add_acs_user',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  create(\n    body?: UserIdentitiesCreateBody,\n  ): SeamHttpRequest<UserIdentitiesCreateResponse, 'user_identity'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/create',\n      method: 'post',\n      body,\n      responseKey: 'user_identity',\n    })\n  }\n\n  delete(body?: UserIdentitiesDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: UserIdentitiesGetParams,\n  ): SeamHttpRequest<UserIdentitiesGetResponse, 'user_identity'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/get',\n      method: 'post',\n      body,\n      responseKey: 'user_identity',\n    })\n  }\n\n  grantAccessToDevice(\n    body?: UserIdentitiesGrantAccessToDeviceBody,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/grant_access_to_device',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  list(\n    body?: UserIdentitiesListParams,\n  ): SeamHttpRequest<UserIdentitiesListResponse, 'user_identities'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/list',\n      method: 'post',\n      body,\n      responseKey: 'user_identities',\n    })\n  }\n\n  listAccessibleDevices(\n    body?: UserIdentitiesListAccessibleDevicesParams,\n  ): SeamHttpRequest<UserIdentitiesListAccessibleDevicesResponse, 'devices'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/list_accessible_devices',\n      method: 'post',\n      body,\n      responseKey: 'devices',\n    })\n  }\n\n  listAcsSystems(\n    body?: UserIdentitiesListAcsSystemsParams,\n  ): SeamHttpRequest<UserIdentitiesListAcsSystemsResponse, 'acs_systems'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/list_acs_systems',\n      method: 'post',\n      body,\n      responseKey: 'acs_systems',\n    })\n  }\n\n  listAcsUsers(\n    body?: UserIdentitiesListAcsUsersParams,\n  ): SeamHttpRequest<UserIdentitiesListAcsUsersResponse, 'acs_users'> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/list_acs_users',\n      method: 'post',\n      body,\n      responseKey: 'acs_users',\n    })\n  }\n\n  removeAcsUser(\n    body?: UserIdentitiesRemoveAcsUserParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/remove_acs_user',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  revokeAccessToDevice(\n    body?: UserIdentitiesRevokeAccessToDeviceParams,\n  ): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/revoke_access_to_device',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  update(body?: UserIdentitiesUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/user_identities/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type UserIdentitiesAddAcsUserBody =\n  RouteRequestBody<'/user_identities/add_acs_user'>\n\nexport type UserIdentitiesAddAcsUserResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/add_acs_user'>>\n>\n\nexport type UserIdentitiesAddAcsUserOptions = never\n\nexport type UserIdentitiesCreateBody =\n  RouteRequestBody<'/user_identities/create'>\n\nexport type UserIdentitiesCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/create'>>\n>\n\nexport type UserIdentitiesCreateOptions = never\n\nexport type UserIdentitiesDeleteParams =\n  RouteRequestBody<'/user_identities/delete'>\n\nexport type UserIdentitiesDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/delete'>>\n>\n\nexport type UserIdentitiesDeleteOptions = never\n\nexport type UserIdentitiesGetParams = RouteRequestBody<'/user_identities/get'>\n\nexport type UserIdentitiesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/get'>>\n>\n\nexport type UserIdentitiesGetOptions = never\n\nexport type UserIdentitiesGrantAccessToDeviceBody =\n  RouteRequestBody<'/user_identities/grant_access_to_device'>\n\nexport type UserIdentitiesGrantAccessToDeviceResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/grant_access_to_device'>>\n>\n\nexport type UserIdentitiesGrantAccessToDeviceOptions = never\n\nexport type UserIdentitiesListParams = RouteRequestBody<'/user_identities/list'>\n\nexport type UserIdentitiesListResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/list'>>\n>\n\nexport type UserIdentitiesListOptions = never\n\nexport type UserIdentitiesListAccessibleDevicesParams =\n  RouteRequestBody<'/user_identities/list_accessible_devices'>\n\nexport type UserIdentitiesListAccessibleDevicesResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/list_accessible_devices'>>\n>\n\nexport type UserIdentitiesListAccessibleDevicesOptions = never\n\nexport type UserIdentitiesListAcsSystemsParams =\n  RouteRequestBody<'/user_identities/list_acs_systems'>\n\nexport type UserIdentitiesListAcsSystemsResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/list_acs_systems'>>\n>\n\nexport type UserIdentitiesListAcsSystemsOptions = never\n\nexport type UserIdentitiesListAcsUsersParams =\n  RouteRequestBody<'/user_identities/list_acs_users'>\n\nexport type UserIdentitiesListAcsUsersResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/list_acs_users'>>\n>\n\nexport type UserIdentitiesListAcsUsersOptions = never\n\nexport type UserIdentitiesRemoveAcsUserParams =\n  RouteRequestBody<'/user_identities/remove_acs_user'>\n\nexport type UserIdentitiesRemoveAcsUserResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/remove_acs_user'>>\n>\n\nexport type UserIdentitiesRemoveAcsUserOptions = never\n\nexport type UserIdentitiesRevokeAccessToDeviceParams =\n  RouteRequestBody<'/user_identities/revoke_access_to_device'>\n\nexport type UserIdentitiesRevokeAccessToDeviceResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/revoke_access_to_device'>>\n>\n\nexport type UserIdentitiesRevokeAccessToDeviceOptions = never\n\nexport type UserIdentitiesUpdateBody =\n  RouteRequestBody<'/user_identities/update'>\n\nexport type UserIdentitiesUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/user_identities/update'>>\n>\n\nexport type UserIdentitiesUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpWebhooks {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpWebhooks {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpWebhooks(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpWebhooks {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpWebhooks(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpWebhooks {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpWebhooks(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpWebhooks> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpWebhooks.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpWebhooks {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpWebhooks(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpWebhooks {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpWebhooks(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: WebhooksCreateBody,\n  ): SeamHttpRequest<WebhooksCreateResponse, 'webhook'> {\n    return new SeamHttpRequest(this, {\n      path: '/webhooks/create',\n      method: 'post',\n      body,\n      responseKey: 'webhook',\n    })\n  }\n\n  delete(body?: WebhooksDeleteParams): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/webhooks/delete',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n\n  get(\n    body?: WebhooksGetParams,\n  ): SeamHttpRequest<WebhooksGetResponse, 'webhook'> {\n    return new SeamHttpRequest(this, {\n      path: '/webhooks/get',\n      method: 'post',\n      body,\n      responseKey: 'webhook',\n    })\n  }\n\n  list(\n    body?: WebhooksListParams,\n  ): SeamHttpRequest<WebhooksListResponse, 'webhooks'> {\n    return new SeamHttpRequest(this, {\n      path: '/webhooks/list',\n      method: 'post',\n      body,\n      responseKey: 'webhooks',\n    })\n  }\n\n  update(body?: WebhooksUpdateBody): SeamHttpRequest<void, undefined> {\n    return new SeamHttpRequest(this, {\n      path: '/webhooks/update',\n      method: 'post',\n      body,\n      responseKey: undefined,\n    })\n  }\n}\n\nexport type WebhooksCreateBody = RouteRequestBody<'/webhooks/create'>\n\nexport type WebhooksCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/webhooks/create'>>\n>\n\nexport type WebhooksCreateOptions = never\n\nexport type WebhooksDeleteParams = RouteRequestBody<'/webhooks/delete'>\n\nexport type WebhooksDeleteResponse = SetNonNullable<\n  Required<RouteResponse<'/webhooks/delete'>>\n>\n\nexport type WebhooksDeleteOptions = never\n\nexport type WebhooksGetParams = RouteRequestBody<'/webhooks/get'>\n\nexport type WebhooksGetResponse = SetNonNullable<\n  Required<RouteResponse<'/webhooks/get'>>\n>\n\nexport type WebhooksGetOptions = never\n\nexport type WebhooksListParams = RouteRequestBody<'/webhooks/list'>\n\nexport type WebhooksListResponse = SetNonNullable<\n  Required<RouteResponse<'/webhooks/list'>>\n>\n\nexport type WebhooksListOptions = never\n\nexport type WebhooksUpdateBody = RouteRequestBody<'/webhooks/update'>\n\nexport type WebhooksUpdateResponse = SetNonNullable<\n  Required<RouteResponse<'/webhooks/update'>>\n>\n\nexport type WebhooksUpdateOptions = never\n","/*\n * Automatically generated by generate-routes.ts.\n * Do not edit this file or add other files to this directory.\n */\n\nimport type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from 'lib/seam/connect/auth.js'\nimport { type Client, createClient } from 'lib/seam/connect/client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from 'lib/seam/connect/options.js'\nimport {\n  limitToSeamHttpRequestOptions,\n  parseOptions,\n} from 'lib/seam/connect/parse-options.js'\nimport { SeamHttpRequest } from 'lib/seam/connect/seam-http-request.js'\nimport type { SetNonNullable } from 'lib/types.js'\n\nimport { SeamHttpClientSessions } from './client-sessions.js'\n\nexport class SeamHttpWorkspaces {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttpWorkspaces {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpWorkspaces(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttpWorkspaces {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttpWorkspaces(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttpWorkspaces {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttpWorkspaces(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttpWorkspaces> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttpWorkspaces.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpWorkspaces {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttpWorkspaces(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttpWorkspaces {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttpWorkspaces(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  create(\n    body?: WorkspacesCreateBody,\n  ): SeamHttpRequest<WorkspacesCreateResponse, 'workspace'> {\n    return new SeamHttpRequest(this, {\n      path: '/workspaces/create',\n      method: 'post',\n      body,\n      responseKey: 'workspace',\n    })\n  }\n\n  get(\n    body?: WorkspacesGetParams,\n  ): SeamHttpRequest<WorkspacesGetResponse, 'workspace'> {\n    return new SeamHttpRequest(this, {\n      path: '/workspaces/get',\n      method: 'post',\n      body,\n      responseKey: 'workspace',\n    })\n  }\n\n  list(\n    body?: WorkspacesListParams,\n  ): SeamHttpRequest<WorkspacesListResponse, 'workspaces'> {\n    return new SeamHttpRequest(this, {\n      path: '/workspaces/list',\n      method: 'post',\n      body,\n      responseKey: 'workspaces',\n    })\n  }\n\n  resetSandbox(\n    body?: WorkspacesResetSandboxBody,\n    options: Pick<SeamHttpRequestOptions, 'waitForActionAttempt'> = {},\n  ): SeamHttpRequest<WorkspacesResetSandboxResponse, 'action_attempt'> {\n    return new SeamHttpRequest(this, {\n      path: '/workspaces/reset_sandbox',\n      method: 'post',\n      body,\n      responseKey: 'action_attempt',\n      options,\n    })\n  }\n}\n\nexport type WorkspacesCreateBody = RouteRequestBody<'/workspaces/create'>\n\nexport type WorkspacesCreateResponse = SetNonNullable<\n  Required<RouteResponse<'/workspaces/create'>>\n>\n\nexport type WorkspacesCreateOptions = never\n\nexport type WorkspacesGetParams = RouteRequestBody<'/workspaces/get'>\n\nexport type WorkspacesGetResponse = SetNonNullable<\n  Required<RouteResponse<'/workspaces/get'>>\n>\n\nexport type WorkspacesGetOptions = never\n\nexport type WorkspacesListParams = RouteRequestBody<'/workspaces/list'>\n\nexport type WorkspacesListResponse = SetNonNullable<\n  Required<RouteResponse<'/workspaces/list'>>\n>\n\nexport type WorkspacesListOptions = never\n\nexport type WorkspacesResetSandboxBody =\n  RouteRequestBody<'/workspaces/reset_sandbox'>\n\nexport type WorkspacesResetSandboxResponse = SetNonNullable<\n  Required<RouteResponse<'/workspaces/reset_sandbox'>>\n>\n\nexport type WorkspacesResetSandboxOptions = Pick<\n  SeamHttpRequestOptions,\n  'waitForActionAttempt'\n>\n","import { seamApiLtsVersion } from 'lib/lts-version.js'\n\nimport {\n  getAuthHeadersForClientSessionToken,\n  warnOnInsecureuserIdentifierKey,\n} from './auth.js'\nimport { type Client, createClient } from './client.js'\nimport {\n  isSeamHttpOptionsWithApiKey,\n  isSeamHttpOptionsWithClient,\n  isSeamHttpOptionsWithClientSessionToken,\n  isSeamHttpOptionsWithConsoleSessionToken,\n  isSeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpFromPublishableKeyOptions,\n  SeamHttpInvalidOptionsError,\n  type SeamHttpOptions,\n  type SeamHttpOptionsWithApiKey,\n  type SeamHttpOptionsWithClient,\n  type SeamHttpOptionsWithClientSessionToken,\n  type SeamHttpOptionsWithConsoleSessionToken,\n  type SeamHttpOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from './options.js'\nimport { limitToSeamHttpRequestOptions, parseOptions } from './parse-options.js'\nimport {\n  SeamHttpAccessCodes,\n  SeamHttpAcs,\n  SeamHttpActionAttempts,\n  SeamHttpClientSessions,\n  SeamHttpConnectedAccounts,\n  SeamHttpConnectWebviews,\n  SeamHttpDevices,\n  SeamHttpEvents,\n  SeamHttpLocks,\n  SeamHttpNetworks,\n  SeamHttpNoiseSensors,\n  SeamHttpPhones,\n  SeamHttpThermostats,\n  SeamHttpUserIdentities,\n  SeamHttpWebhooks,\n  SeamHttpWorkspaces,\n} from './routes/index.js'\n\nexport class SeamHttp {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n  readonly ltsVersion = seamApiLtsVersion\n  static ltsVersion = seamApiLtsVersion\n\n  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {\n    const options = parseOptions(apiKeyOrOptions)\n    this.client = 'client' in options ? options.client : createClient(options)\n    this.defaults = limitToSeamHttpRequestOptions(options)\n  }\n\n  static fromClient(\n    client: SeamHttpOptionsWithClient['client'],\n    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},\n  ): SeamHttp {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing client')\n    }\n    return new SeamHttp(constructorOptions)\n  }\n\n  static fromApiKey(\n    apiKey: SeamHttpOptionsWithApiKey['apiKey'],\n    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},\n  ): SeamHttp {\n    const constructorOptions = { ...options, apiKey }\n    if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing apiKey')\n    }\n    return new SeamHttp(constructorOptions)\n  }\n\n  static fromClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n    options: Omit<\n      SeamHttpOptionsWithClientSessionToken,\n      'clientSessionToken'\n    > = {},\n  ): SeamHttp {\n    const constructorOptions = { ...options, clientSessionToken }\n    if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')\n    }\n    return new SeamHttp(constructorOptions)\n  }\n\n  static async fromPublishableKey(\n    publishableKey: string,\n    userIdentifierKey: string,\n    options: SeamHttpFromPublishableKeyOptions = {},\n  ): Promise<SeamHttp> {\n    warnOnInsecureuserIdentifierKey(userIdentifierKey)\n    const clientOptions = parseOptions({ ...options, publishableKey })\n    if (isSeamHttpOptionsWithClient(clientOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'The client option cannot be used with SeamHttp.fromPublishableKey',\n      )\n    }\n    const client = createClient(clientOptions)\n    const clientSessions = SeamHttpClientSessions.fromClient(client)\n    const { token } = await clientSessions.getOrCreate({\n      user_identifier_key: userIdentifierKey,\n    })\n    return SeamHttp.fromClientSessionToken(token, options)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'],\n    workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithConsoleSessionToken,\n      'consoleSessionToken' | 'workspaceId'\n    > = {},\n  ): SeamHttp {\n    const constructorOptions = { ...options, consoleSessionToken, workspaceId }\n    if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing consoleSessionToken or workspaceId',\n      )\n    }\n    return new SeamHttp(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'],\n    workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'],\n    options: Omit<\n      SeamHttpOptionsWithPersonalAccessToken,\n      'personalAccessToken' | 'workspaceId'\n    > = {},\n  ): SeamHttp {\n    const constructorOptions = { ...options, personalAccessToken, workspaceId }\n    if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {\n      throw new SeamHttpInvalidOptionsError(\n        'Missing personalAccessToken or workspaceId',\n      )\n    }\n    return new SeamHttp(constructorOptions)\n  }\n\n  async updateClientSessionToken(\n    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],\n  ): Promise<void> {\n    const { headers } = this.client.defaults\n    const authHeaders = getAuthHeadersForClientSessionToken({\n      clientSessionToken,\n    })\n    for (const key of Object.keys(authHeaders)) {\n      if (headers[key] == null) {\n        throw new Error(\n          'Cannot update a clientSessionToken on a client created without a clientSessionToken',\n        )\n      }\n    }\n    this.client.defaults.headers = { ...headers, ...authHeaders }\n    const clientSessions = SeamHttpClientSessions.fromClient(this.client)\n    await clientSessions.get()\n  }\n\n  get accessCodes(): SeamHttpAccessCodes {\n    return SeamHttpAccessCodes.fromClient(this.client, this.defaults)\n  }\n\n  get acs(): SeamHttpAcs {\n    return SeamHttpAcs.fromClient(this.client, this.defaults)\n  }\n\n  get actionAttempts(): SeamHttpActionAttempts {\n    return SeamHttpActionAttempts.fromClient(this.client, this.defaults)\n  }\n\n  get clientSessions(): SeamHttpClientSessions {\n    return SeamHttpClientSessions.fromClient(this.client, this.defaults)\n  }\n\n  get connectedAccounts(): SeamHttpConnectedAccounts {\n    return SeamHttpConnectedAccounts.fromClient(this.client, this.defaults)\n  }\n\n  get connectWebviews(): SeamHttpConnectWebviews {\n    return SeamHttpConnectWebviews.fromClient(this.client, this.defaults)\n  }\n\n  get devices(): SeamHttpDevices {\n    return SeamHttpDevices.fromClient(this.client, this.defaults)\n  }\n\n  get events(): SeamHttpEvents {\n    return SeamHttpEvents.fromClient(this.client, this.defaults)\n  }\n\n  get locks(): SeamHttpLocks {\n    return SeamHttpLocks.fromClient(this.client, this.defaults)\n  }\n\n  get networks(): SeamHttpNetworks {\n    return SeamHttpNetworks.fromClient(this.client, this.defaults)\n  }\n\n  get noiseSensors(): SeamHttpNoiseSensors {\n    return SeamHttpNoiseSensors.fromClient(this.client, this.defaults)\n  }\n\n  get phones(): SeamHttpPhones {\n    return SeamHttpPhones.fromClient(this.client, this.defaults)\n  }\n\n  get thermostats(): SeamHttpThermostats {\n    return SeamHttpThermostats.fromClient(this.client, this.defaults)\n  }\n\n  get userIdentities(): SeamHttpUserIdentities {\n    return SeamHttpUserIdentities.fromClient(this.client, this.defaults)\n  }\n\n  get webhooks(): SeamHttpWebhooks {\n    return SeamHttpWebhooks.fromClient(this.client, this.defaults)\n  }\n\n  get workspaces(): Omit<SeamHttpWorkspaces, 'create'> {\n    return SeamHttpWorkspaces.fromClient(this.client, this.defaults)\n  }\n}\n","import { type Client, createClient } from './client.js'\nimport {\n  isSeamHttpMultiWorkspaceOptionsWithClient,\n  isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken,\n  isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken,\n  SeamHttpMultiWorkspaceInvalidOptionsError,\n  type SeamHttpMultiWorkspaceOptions,\n  type SeamHttpMultiWorkspaceOptionsWithClient,\n  type SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken,\n  type SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken,\n  type SeamHttpRequestOptions,\n} from './options.js'\nimport { limitToSeamHttpRequestOptions, parseOptions } from './parse-options.js'\nimport { SeamHttpWorkspaces } from './routes/index.js'\n\nexport class SeamHttpMultiWorkspace {\n  client: Client\n  readonly defaults: Required<SeamHttpRequestOptions>\n\n  constructor(options: SeamHttpMultiWorkspaceOptions) {\n    const opts = parseOptions(options)\n    this.client = 'client' in opts ? opts.client : createClient(opts)\n    this.defaults = limitToSeamHttpRequestOptions(opts)\n  }\n\n  static fromClient(\n    client: SeamHttpMultiWorkspaceOptionsWithClient['client'],\n    options: Omit<SeamHttpMultiWorkspaceOptionsWithClient, 'client'> = {},\n  ): SeamHttpMultiWorkspace {\n    const constructorOptions = { ...options, client }\n    if (!isSeamHttpMultiWorkspaceOptionsWithClient(constructorOptions)) {\n      throw new SeamHttpMultiWorkspaceInvalidOptionsError('Missing client')\n    }\n    return new SeamHttpMultiWorkspace(constructorOptions)\n  }\n\n  static fromConsoleSessionToken(\n    consoleSessionToken: SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken['consoleSessionToken'],\n    options: Omit<\n      SeamHttpMultiWorkspaceOptionsWithConsoleSessionToken,\n      'consoleSessionToken'\n    > = {},\n  ): SeamHttpMultiWorkspace {\n    const constructorOptions = { ...options, consoleSessionToken }\n    if (\n      !isSeamHttpMultiWorkspaceOptionsWithConsoleSessionToken(\n        constructorOptions,\n      )\n    ) {\n      throw new SeamHttpMultiWorkspaceInvalidOptionsError(\n        'Missing consoleSessionToken',\n      )\n    }\n    return new SeamHttpMultiWorkspace(constructorOptions)\n  }\n\n  static fromPersonalAccessToken(\n    personalAccessToken: SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken['personalAccessToken'],\n    options: Omit<\n      SeamHttpMultiWorkspaceOptionsWithPersonalAccessToken,\n      'personalAccessToken'\n    > = {},\n  ): SeamHttpMultiWorkspace {\n    const constructorOptions = { ...options, personalAccessToken }\n    if (\n      !isSeamHttpMultiWorkspaceOptionsWithPersonalAccessToken(\n        constructorOptions,\n      )\n    ) {\n      throw new SeamHttpMultiWorkspaceInvalidOptionsError(\n        'Missing personalAccessToken',\n      )\n    }\n    return new SeamHttpMultiWorkspace(constructorOptions)\n  }\n\n  get workspaces(): Pick<SeamHttpWorkspaces, 'create' | 'list'> {\n    return SeamHttpWorkspaces.fromClient(this.client, this.defaults)\n  }\n}\n"]}