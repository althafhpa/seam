import { z } from 'zod';
export declare const connected_account_error: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
    is_connected_account_error: z.ZodLiteral<true>;
}, {
    error_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    is_connected_account_error: true;
    error_code: string;
}, {
    message: string;
    is_connected_account_error: true;
    error_code: string;
}>;
export type ConnectedAccountError = z.infer<typeof connected_account_error>;
declare const connected_account_warning: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
}, {
    warning_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    warning_code: string;
}, {
    message: string;
    warning_code: string;
}>;
export type ConnectedAccountWarning = z.infer<typeof connected_account_warning>;
export declare const connected_account: z.ZodObject<{
    connected_account_id: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
    user_identifier: z.ZodOptional<z.ZodObject<{
        username: z.ZodOptional<z.ZodString>;
        api_url: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        exclusive: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        exclusive?: boolean | undefined;
        username?: string | undefined;
        email?: string | undefined;
        api_url?: string | undefined;
        phone?: string | undefined;
    }, {
        exclusive?: boolean | undefined;
        username?: string | undefined;
        email?: string | undefined;
        api_url?: string | undefined;
        phone?: string | undefined;
    }>>;
    account_type: z.ZodOptional<z.ZodString>;
    account_type_display_name: z.ZodString;
    errors: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
    automatically_manage_new_devices: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    account_type_display_name: string;
    errors: {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    connected_account_id?: string | undefined;
    created_at?: string | undefined;
    user_identifier?: {
        exclusive?: boolean | undefined;
        username?: string | undefined;
        email?: string | undefined;
        api_url?: string | undefined;
        phone?: string | undefined;
    } | undefined;
    account_type?: string | undefined;
}, {
    account_type_display_name: string;
    errors: {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    connected_account_id?: string | undefined;
    created_at?: string | undefined;
    user_identifier?: {
        exclusive?: boolean | undefined;
        username?: string | undefined;
        email?: string | undefined;
        api_url?: string | undefined;
        phone?: string | undefined;
    } | undefined;
    account_type?: string | undefined;
}>;
export type ConnectedAccount = z.infer<typeof connected_account>;
export {};
