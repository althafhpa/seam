import { z } from 'zod';
export declare const unmanaged_access_code: z.ZodObject<z.objectUtil.extendShape<Pick<{
    common_code_key: z.ZodNullable<z.ZodString>;
    is_scheduled_on_device: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodEnum<["time_bound", "ongoing"]>;
    is_waiting_for_code_assignment: z.ZodOptional<z.ZodBoolean>;
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    code: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_access_code_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_device_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_device_error: true;
    }, {
        message: string;
        error_code: string;
        is_device_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    is_managed: z.ZodLiteral<true>;
    starts_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ends_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["setting", "set", "unset", "removing", "unknown"]>;
    is_backup_access_code_available: z.ZodBoolean;
    is_backup: z.ZodOptional<z.ZodBoolean>;
    pulled_backup_access_code_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_external_modification_allowed: z.ZodBoolean;
    is_one_time_use: z.ZodBoolean;
    is_offline_access_code: z.ZodBoolean;
}, "type" | "code" | "name" | "created_at" | "errors" | "warnings" | "device_id" | "starts_at" | "ends_at" | "is_managed" | "access_code_id">, {
    is_managed: z.ZodLiteral<false>;
    status: z.ZodEnum<["set"]>;
}>, "strip", z.ZodTypeAny, {
    type: "time_bound" | "ongoing";
    code: string | null;
    name: string | null;
    status: "set";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    device_id: string;
    is_managed: false;
    access_code_id: string;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
}, {
    type: "time_bound" | "ongoing";
    code: string | null;
    name: string | null;
    status: "set";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    device_id: string;
    is_managed: false;
    access_code_id: string;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
}>;
export type UnmanagedAccessCode = z.infer<typeof unmanaged_access_code>;
