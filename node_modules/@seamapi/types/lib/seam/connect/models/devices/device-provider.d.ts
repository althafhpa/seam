import { z } from 'zod';
export declare const DEVICE_PROVIDERS: {
    readonly AKUVOX: "akuvox";
    readonly AUGUST: "august";
    readonly AVIGILON_ALTA: "avigilon_alta";
    readonly BRIVO: "brivo";
    readonly BUTTERFLYMX: "butterflymx";
    readonly SCHLAGE: "schlage";
    readonly SMARTTHINGS: "smartthings";
    readonly YALE: "yale";
    readonly GENIE: "genie";
    readonly DOORKING: "doorking";
    readonly SALTO: "salto";
    readonly LOCKLY: "lockly";
    readonly TTLOCK: "ttlock";
    readonly LINEAR: "linear";
    readonly NOISEAWARE: "noiseaware";
    readonly NUKI: "nuki";
    readonly SEAM_RELAY_ADMIN: "seam_relay_admin";
    readonly IGLOO: "igloo";
    readonly KWIKSET: "kwikset";
    readonly MINUT: "minut";
    readonly MY_2N: "my_2n";
    readonly CONTROLBYWEB: "controlbyweb";
    readonly NEST: "nest";
    readonly IGLOOHOME: "igloohome";
    readonly ECOBEE: "ecobee";
    readonly HUBITAT: "hubitat";
    readonly FOUR_SUITES: "four_suites";
    readonly DORMAKABA_ORACODE: "dormakaba_oracode";
    readonly PTI: "pti";
    readonly WYZE: "wyze";
    readonly SEAM_PASSPORT: "seam_passport";
    readonly VISIONLINE: "visionline";
    readonly ASSA_ABLOY_CREDENTIAL_SERVICE: "assa_abloy_credential_service";
    readonly SEAM_BRIDGE: "seam_bridge";
    readonly TEDEE: "tedee";
    readonly HONEYWELL_RESIDEO: "honeywell_resideo";
    readonly LATCH: "latch";
    readonly AKILES: "akiles";
};
export type DeviceProviderName = (typeof DEVICE_PROVIDERS)[keyof typeof DEVICE_PROVIDERS];
export declare const ALL_DEVICE_PROVIDERS: [
    DeviceProviderName,
    ...DeviceProviderName[]
];
export type ProviderCategory = keyof typeof PROVIDER_CATEGORY_MAP;
export declare const PROVIDER_CATEGORY_MAP: {
    readonly stable: readonly ["august", "avigilon_alta", "brivo", "schlage", "smartthings", "yale", "nuki", "salto", "controlbyweb", "minut", "my_2n", "kwikset", "ttlock", "noiseaware", "igloohome", "ecobee", "four_suites", "lockly", "wyze", "nest", "tedee", "seam_bridge", "honeywell_resideo", "visionline", "assa_abloy_credential_service", "latch"];
    readonly consumer_smartlocks: readonly ["august", "schlage", "yale", "smartthings", "nuki", "ttlock", "kwikset", "igloohome", "wyze", "lockly", "tedee"];
    readonly thermostats: readonly ["ecobee", "nest"];
    readonly noise_sensors: readonly ["minut", "noiseaware"];
    readonly access_control_systems: readonly ["pti", "visionline", "assa_abloy_credential_service", "latch", "salto"];
    readonly internal_beta: [DeviceProviderName, ...DeviceProviderName[]];
};
export declare const PROVIDER_CATEGORIES: [ProviderCategory, ...ProviderCategory[]];
export declare const PUBLIC_PROVIDER_CATEGORIES: typeof PROVIDER_CATEGORIES;
export declare const device_provider: z.ZodObject<z.objectUtil.extendShape<{
    device_provider_name: z.ZodEnum<[DeviceProviderName, ...DeviceProviderName[]]>;
    display_name: z.ZodString;
    image_url: z.ZodString;
    provider_categories: z.ZodArray<z.ZodEnum<["stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta", ...("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[]]>, "many">;
}, z.objectUtil.extendShape<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat: z.ZodOptional<z.ZodBoolean>;
    can_hvac_cool: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat_cool: z.ZodOptional<z.ZodBoolean>;
    can_turn_off_hvac: z.ZodOptional<z.ZodBoolean>;
}, {
    can_simulate_removal: z.ZodOptional<z.ZodBoolean>;
    can_simulate_connection: z.ZodOptional<z.ZodBoolean>;
    can_simulate_disconnection: z.ZodOptional<z.ZodBoolean>;
}>>, "strip", z.ZodTypeAny, {
    display_name: string;
    image_url: string;
    device_provider_name: DeviceProviderName;
    provider_categories: ("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[];
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}, {
    display_name: string;
    image_url: string;
    device_provider_name: DeviceProviderName;
    provider_categories: ("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[];
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}>;
export type DeviceProvider = z.infer<typeof device_provider>;
