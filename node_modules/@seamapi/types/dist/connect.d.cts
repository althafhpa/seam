import { z } from 'zod';

declare const access_code_error: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
    is_access_code_error: z.ZodLiteral<true>;
}, {
    error_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    error_code: string;
    is_access_code_error: true;
}, {
    message: string;
    error_code: string;
    is_access_code_error: true;
}>;
type AccessCodeError = z.infer<typeof access_code_error>;
declare const access_code_warning: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
}, {
    warning_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    warning_code: string;
}, {
    message: string;
    warning_code: string;
}>;
type AccessCodeWarning = z.infer<typeof access_code_warning>;
declare const access_code: z.ZodObject<{
    common_code_key: z.ZodNullable<z.ZodString>;
    is_scheduled_on_device: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodEnum<["time_bound", "ongoing"]>;
    is_waiting_for_code_assignment: z.ZodOptional<z.ZodBoolean>;
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    code: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_access_code_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_device_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_device_error: true;
    }, {
        message: string;
        error_code: string;
        is_device_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    is_managed: z.ZodLiteral<true>;
    starts_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ends_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["setting", "set", "unset", "removing", "unknown"]>;
    is_backup_access_code_available: z.ZodBoolean;
    is_backup: z.ZodOptional<z.ZodBoolean>;
    pulled_backup_access_code_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_external_modification_allowed: z.ZodBoolean;
    is_one_time_use: z.ZodBoolean;
    is_offline_access_code: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    code: string | null;
    type: "time_bound" | "ongoing";
    status: "unknown" | "set" | "setting" | "unset" | "removing";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    name: string | null;
    device_id: string;
    is_managed: true;
    common_code_key: string | null;
    access_code_id: string;
    is_backup_access_code_available: boolean;
    is_external_modification_allowed: boolean;
    is_one_time_use: boolean;
    is_offline_access_code: boolean;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
    is_scheduled_on_device?: boolean | undefined;
    is_waiting_for_code_assignment?: boolean | undefined;
    is_backup?: boolean | undefined;
    pulled_backup_access_code_id?: string | null | undefined;
}, {
    code: string | null;
    type: "time_bound" | "ongoing";
    status: "unknown" | "set" | "setting" | "unset" | "removing";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    name: string | null;
    device_id: string;
    is_managed: true;
    common_code_key: string | null;
    access_code_id: string;
    is_backup_access_code_available: boolean;
    is_external_modification_allowed: boolean;
    is_one_time_use: boolean;
    is_offline_access_code: boolean;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
    is_scheduled_on_device?: boolean | undefined;
    is_waiting_for_code_assignment?: boolean | undefined;
    is_backup?: boolean | undefined;
    pulled_backup_access_code_id?: string | null | undefined;
}>;
type AccessCode = z.infer<typeof access_code>;

declare const unmanaged_access_code: z.ZodObject<z.objectUtil.extendShape<Pick<{
    common_code_key: z.ZodNullable<z.ZodString>;
    is_scheduled_on_device: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodEnum<["time_bound", "ongoing"]>;
    is_waiting_for_code_assignment: z.ZodOptional<z.ZodBoolean>;
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    code: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_access_code_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }, {
        message: string;
        error_code: string;
        is_access_code_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_device_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_device_error: true;
    }, {
        message: string;
        error_code: string;
        is_device_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    is_managed: z.ZodLiteral<true>;
    starts_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ends_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodEnum<["setting", "set", "unset", "removing", "unknown"]>;
    is_backup_access_code_available: z.ZodBoolean;
    is_backup: z.ZodOptional<z.ZodBoolean>;
    pulled_backup_access_code_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_external_modification_allowed: z.ZodBoolean;
    is_one_time_use: z.ZodBoolean;
    is_offline_access_code: z.ZodBoolean;
}, "code" | "type" | "created_at" | "errors" | "warnings" | "name" | "device_id" | "starts_at" | "ends_at" | "is_managed" | "access_code_id">, {
    is_managed: z.ZodLiteral<false>;
    status: z.ZodEnum<["set"]>;
}>, "strip", z.ZodTypeAny, {
    code: string | null;
    type: "time_bound" | "ongoing";
    status: "set";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    name: string | null;
    device_id: string;
    is_managed: false;
    access_code_id: string;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
}, {
    code: string | null;
    type: "time_bound" | "ongoing";
    status: "set";
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    } | {
        message: string;
        error_code: string;
        is_access_code_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    name: string | null;
    device_id: string;
    is_managed: false;
    access_code_id: string;
    starts_at?: string | null | undefined;
    ends_at?: string | null | undefined;
}>;
type UnmanagedAccessCode = z.infer<typeof unmanaged_access_code>;

declare const acs_access_group: z.ZodObject<z.objectUtil.extendShape<{
    acs_access_group_id: z.ZodString;
    acs_system_id: z.ZodString;
    workspace_id: z.ZodString;
    name: z.ZodString;
    access_group_type: z.ZodEnum<["pti_unit", "pti_access_level", "salto_access_group", "brivo_group"]>;
    access_group_type_display_name: z.ZodString;
    display_name: z.ZodString;
    external_type: z.ZodEnum<["pti_unit", "pti_access_level", "salto_access_group", "brivo_group"]>;
    external_type_display_name: z.ZodString;
    created_at: z.ZodString;
}, {
    is_managed: z.ZodLiteral<true>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    name: string;
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_access_group_id: string;
    acs_system_id: string;
    access_group_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    access_group_type_display_name: string;
    external_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    external_type_display_name: string;
}, {
    created_at: string;
    name: string;
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_access_group_id: string;
    acs_system_id: string;
    access_group_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    access_group_type_display_name: string;
    external_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    external_type_display_name: string;
}>;
declare const unmanaged_acs_access_group: z.ZodObject<z.objectUtil.extendShape<{
    acs_access_group_id: z.ZodString;
    acs_system_id: z.ZodString;
    workspace_id: z.ZodString;
    name: z.ZodString;
    access_group_type: z.ZodEnum<["pti_unit", "pti_access_level", "salto_access_group", "brivo_group"]>;
    access_group_type_display_name: z.ZodString;
    display_name: z.ZodString;
    external_type: z.ZodEnum<["pti_unit", "pti_access_level", "salto_access_group", "brivo_group"]>;
    external_type_display_name: z.ZodString;
    created_at: z.ZodString;
}, {
    is_managed: z.ZodLiteral<false>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    name: string;
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_access_group_id: string;
    acs_system_id: string;
    access_group_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    access_group_type_display_name: string;
    external_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    external_type_display_name: string;
}, {
    created_at: string;
    name: string;
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_access_group_id: string;
    acs_system_id: string;
    access_group_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    access_group_type_display_name: string;
    external_type: "pti_unit" | "pti_access_level" | "salto_access_group" | "brivo_group";
    external_type_display_name: string;
}>;
type AcsAccessGroup = z.output<typeof acs_access_group>;

declare const acs_credential: z.ZodObject<z.objectUtil.extendShape<{
    acs_credential_id: z.ZodString;
    acs_user_id: z.ZodOptional<z.ZodString>;
    acs_credential_pool_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
    parent_acs_credential_id: z.ZodOptional<z.ZodString>;
    display_name: z.ZodString;
    code: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    card_number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    is_encoded: z.ZodOptional<z.ZodBoolean>;
    encoded_at: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    access_method: z.ZodEnum<["code", "card", "mobile_key"]>;
    external_type: z.ZodOptional<z.ZodEnum<["pti_card", "brivo_credential", "hid_credential", "visionline_card", "salto_ks_credential"]>>;
    external_type_display_name: z.ZodOptional<z.ZodString>;
    created_at: z.ZodString;
    workspace_id: z.ZodString;
    starts_at: z.ZodOptional<z.ZodString>;
    ends_at: z.ZodOptional<z.ZodString>;
    errors: z.ZodArray<z.ZodObject<{
        error_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
    }, {
        message: string;
        error_code: string;
    }>, "many">;
    warnings: z.ZodArray<z.ZodObject<{
        warning_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    is_multi_phone_sync_credential: z.ZodOptional<z.ZodBoolean>;
    is_latest_desired_state_synced_with_provider: z.ZodOptional<z.ZodBoolean>;
    latest_desired_state_synced_with_provider_at: z.ZodOptional<z.ZodString>;
    visionline_metadata: z.ZodOptional<z.ZodObject<{
        card_function_type: z.ZodEnum<["guest", "staff"]>;
        joiner_acs_credential_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        guest_acs_entrance_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        common_acs_entrance_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_valid: z.ZodOptional<z.ZodBoolean>;
        auto_join: z.ZodOptional<z.ZodBoolean>;
        card_id: z.ZodOptional<z.ZodString>;
        credential_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    }, {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    }>>;
}, {
    is_managed: z.ZodLiteral<true>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_system_id: string;
    acs_credential_id: string;
    access_method: "code" | "card" | "mobile_key";
    code?: string | null | undefined;
    starts_at?: string | undefined;
    ends_at?: string | undefined;
    visionline_metadata?: {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    } | undefined;
    external_type?: "pti_card" | "brivo_credential" | "hid_credential" | "visionline_card" | "salto_ks_credential" | undefined;
    external_type_display_name?: string | undefined;
    acs_user_id?: string | undefined;
    acs_credential_pool_id?: string | undefined;
    parent_acs_credential_id?: string | undefined;
    card_number?: string | null | undefined;
    is_encoded?: boolean | undefined;
    encoded_at?: string | null | undefined;
    is_multi_phone_sync_credential?: boolean | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
}, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_system_id: string;
    acs_credential_id: string;
    access_method: "code" | "card" | "mobile_key";
    code?: string | null | undefined;
    starts_at?: string | undefined;
    ends_at?: string | undefined;
    visionline_metadata?: {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    } | undefined;
    external_type?: "pti_card" | "brivo_credential" | "hid_credential" | "visionline_card" | "salto_ks_credential" | undefined;
    external_type_display_name?: string | undefined;
    acs_user_id?: string | undefined;
    acs_credential_pool_id?: string | undefined;
    parent_acs_credential_id?: string | undefined;
    card_number?: string | null | undefined;
    is_encoded?: boolean | undefined;
    encoded_at?: string | null | undefined;
    is_multi_phone_sync_credential?: boolean | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
}>;
declare const unmanaged_acs_credential: z.ZodObject<z.objectUtil.extendShape<{
    acs_credential_id: z.ZodString;
    acs_user_id: z.ZodOptional<z.ZodString>;
    acs_credential_pool_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
    parent_acs_credential_id: z.ZodOptional<z.ZodString>;
    display_name: z.ZodString;
    code: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    card_number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    is_encoded: z.ZodOptional<z.ZodBoolean>;
    encoded_at: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    access_method: z.ZodEnum<["code", "card", "mobile_key"]>;
    external_type: z.ZodOptional<z.ZodEnum<["pti_card", "brivo_credential", "hid_credential", "visionline_card", "salto_ks_credential"]>>;
    external_type_display_name: z.ZodOptional<z.ZodString>;
    created_at: z.ZodString;
    workspace_id: z.ZodString;
    starts_at: z.ZodOptional<z.ZodString>;
    ends_at: z.ZodOptional<z.ZodString>;
    errors: z.ZodArray<z.ZodObject<{
        error_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
    }, {
        message: string;
        error_code: string;
    }>, "many">;
    warnings: z.ZodArray<z.ZodObject<{
        warning_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    is_multi_phone_sync_credential: z.ZodOptional<z.ZodBoolean>;
    is_latest_desired_state_synced_with_provider: z.ZodOptional<z.ZodBoolean>;
    latest_desired_state_synced_with_provider_at: z.ZodOptional<z.ZodString>;
    visionline_metadata: z.ZodOptional<z.ZodObject<{
        card_function_type: z.ZodEnum<["guest", "staff"]>;
        joiner_acs_credential_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        guest_acs_entrance_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        common_acs_entrance_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        is_valid: z.ZodOptional<z.ZodBoolean>;
        auto_join: z.ZodOptional<z.ZodBoolean>;
        card_id: z.ZodOptional<z.ZodString>;
        credential_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    }, {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    }>>;
}, {
    is_managed: z.ZodLiteral<false>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_system_id: string;
    acs_credential_id: string;
    access_method: "code" | "card" | "mobile_key";
    code?: string | null | undefined;
    starts_at?: string | undefined;
    ends_at?: string | undefined;
    visionline_metadata?: {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    } | undefined;
    external_type?: "pti_card" | "brivo_credential" | "hid_credential" | "visionline_card" | "salto_ks_credential" | undefined;
    external_type_display_name?: string | undefined;
    acs_user_id?: string | undefined;
    acs_credential_pool_id?: string | undefined;
    parent_acs_credential_id?: string | undefined;
    card_number?: string | null | undefined;
    is_encoded?: boolean | undefined;
    encoded_at?: string | null | undefined;
    is_multi_phone_sync_credential?: boolean | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
}, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_system_id: string;
    acs_credential_id: string;
    access_method: "code" | "card" | "mobile_key";
    code?: string | null | undefined;
    starts_at?: string | undefined;
    ends_at?: string | undefined;
    visionline_metadata?: {
        card_function_type: "guest" | "staff";
        joiner_acs_credential_ids?: string[] | undefined;
        guest_acs_entrance_ids?: string[] | undefined;
        common_acs_entrance_ids?: string[] | undefined;
        is_valid?: boolean | undefined;
        auto_join?: boolean | undefined;
        card_id?: string | undefined;
        credential_id?: string | undefined;
    } | undefined;
    external_type?: "pti_card" | "brivo_credential" | "hid_credential" | "visionline_card" | "salto_ks_credential" | undefined;
    external_type_display_name?: string | undefined;
    acs_user_id?: string | undefined;
    acs_credential_pool_id?: string | undefined;
    parent_acs_credential_id?: string | undefined;
    card_number?: string | null | undefined;
    is_encoded?: boolean | undefined;
    encoded_at?: string | null | undefined;
    is_multi_phone_sync_credential?: boolean | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
}>;
type AcsCredential = z.output<typeof acs_credential>;

declare const acs_entrance: z.ZodObject<{
    acs_system_id: z.ZodString;
    acs_entrance_id: z.ZodString;
    created_at: z.ZodString;
    display_name: z.ZodString;
    errors: z.ZodArray<z.ZodObject<{
        error_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
    }, {
        message: string;
        error_code: string;
    }>, "many">;
    latch_metadata: z.ZodOptional<z.ZodObject<{
        accessibility_type: z.ZodString;
        door_name: z.ZodString;
        door_type: z.ZodString;
        is_connected: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        door_name: string;
        is_connected: boolean;
        accessibility_type: string;
        door_type: string;
    }, {
        door_name: string;
        is_connected: boolean;
        accessibility_type: string;
        door_type: string;
    }>>;
    visionline_metadata: z.ZodOptional<z.ZodObject<{
        door_name: z.ZodString;
        door_category: z.ZodEnum<["entrance", "guest", "elevator reader", "common", "common (PMS)"]>;
        profiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            visionline_door_profile_id: z.ZodString;
            visionline_door_profile_type: z.ZodEnum<["BLE", "commonDoor", "touch"]>;
        }, "strip", z.ZodTypeAny, {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }, {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        door_name: string;
        door_category: "entrance" | "guest" | "elevator reader" | "common" | "common (PMS)";
        profiles?: {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }[] | undefined;
    }, {
        door_name: string;
        door_category: "entrance" | "guest" | "elevator reader" | "common" | "common (PMS)";
        profiles?: {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }[] | undefined;
    }>>;
    salto_ks_metadata: z.ZodOptional<z.ZodObject<{
        door_name: z.ZodString;
        locked_state: z.ZodString;
        lock_type: z.ZodString;
        online: z.ZodBoolean;
        battery_level: z.ZodString;
        left_open_alarm: z.ZodBoolean;
        intrusion_alarm: z.ZodBoolean;
        privacy_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lock_type: string;
        battery_level: string;
        locked_state: string;
        door_name: string;
        online: boolean;
        left_open_alarm: boolean;
        intrusion_alarm: boolean;
        privacy_mode: boolean;
    }, {
        lock_type: string;
        battery_level: string;
        locked_state: string;
        door_name: string;
        online: boolean;
        left_open_alarm: boolean;
        intrusion_alarm: boolean;
        privacy_mode: boolean;
    }>>;
}, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    display_name: string;
    acs_system_id: string;
    acs_entrance_id: string;
    visionline_metadata?: {
        door_name: string;
        door_category: "entrance" | "guest" | "elevator reader" | "common" | "common (PMS)";
        profiles?: {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }[] | undefined;
    } | undefined;
    latch_metadata?: {
        door_name: string;
        is_connected: boolean;
        accessibility_type: string;
        door_type: string;
    } | undefined;
    salto_ks_metadata?: {
        lock_type: string;
        battery_level: string;
        locked_state: string;
        door_name: string;
        online: boolean;
        left_open_alarm: boolean;
        intrusion_alarm: boolean;
        privacy_mode: boolean;
    } | undefined;
}, {
    created_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    display_name: string;
    acs_system_id: string;
    acs_entrance_id: string;
    visionline_metadata?: {
        door_name: string;
        door_category: "entrance" | "guest" | "elevator reader" | "common" | "common (PMS)";
        profiles?: {
            visionline_door_profile_id: string;
            visionline_door_profile_type: "BLE" | "commonDoor" | "touch";
        }[] | undefined;
    } | undefined;
    latch_metadata?: {
        door_name: string;
        is_connected: boolean;
        accessibility_type: string;
        door_type: string;
    } | undefined;
    salto_ks_metadata?: {
        lock_type: string;
        battery_level: string;
        locked_state: string;
        door_name: string;
        online: boolean;
        left_open_alarm: boolean;
        intrusion_alarm: boolean;
        privacy_mode: boolean;
    } | undefined;
}>;
type AcsEntrance = z.infer<typeof acs_entrance>;

declare const acs_system: z.ZodObject<z.objectUtil.extendShape<{
    acs_system_id: z.ZodString;
    external_type: z.ZodOptional<z.ZodEnum<["pti_site", "alta_org", "salto_site", "brivo_account", "hid_credential_manager_organization", "visionline_system", "assa_abloy_credential_service", "latch_building"]>>;
    external_type_display_name: z.ZodOptional<z.ZodString>;
    visionline_metadata: z.ZodOptional<z.ZodObject<{
        mobile_access_uuid: z.ZodString;
        system_id: z.ZodString;
        lan_address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        mobile_access_uuid: string;
        system_id: string;
        lan_address: string;
    }, {
        mobile_access_uuid: string;
        system_id: string;
        lan_address: string;
    }>>;
    system_type: z.ZodOptional<z.ZodEnum<["pti_site", "alta_org", "salto_site", "brivo_account", "hid_credential_manager_organization", "visionline_system", "assa_abloy_credential_service", "latch_building"]>>;
    system_type_display_name: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    created_at: z.ZodString;
    workspace_id: z.ZodString;
    connected_account_ids: z.ZodArray<z.ZodString, "many">;
    image_url: z.ZodString;
    image_alt_text: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"seam_bridge_disconnected">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "seam_bridge_disconnected";
        created_at: string;
    }, {
        message: string;
        error_code: "seam_bridge_disconnected";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"visionline_instance_unreachable">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "visionline_instance_unreachable";
        created_at: string;
    }, {
        message: string;
        error_code: "visionline_instance_unreachable";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"salto_ks_subscription_limit_exceeded">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"acs_system_disconnected">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "acs_system_disconnected";
        created_at: string;
    }, {
        message: string;
        error_code: "acs_system_disconnected";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"account_disconnected">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "account_disconnected";
        created_at: string;
    }, {
        message: string;
        error_code: "account_disconnected";
        created_at: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        warning_code: z.ZodLiteral<"salto_ks_subscription_limit_almost_reached">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: "salto_ks_subscription_limit_almost_reached";
        created_at: string;
    }, {
        message: string;
        warning_code: "salto_ks_subscription_limit_almost_reached";
        created_at: string;
    }>, "many">;
}, {
    can_automate_enrollment: z.ZodOptional<z.ZodBoolean>;
    can_create_acs_access_groups: z.ZodOptional<z.ZodBoolean>;
    can_remove_acs_users_from_acs_access_groups: z.ZodOptional<z.ZodBoolean>;
    can_add_acs_users_to_acs_access_groups: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "seam_bridge_disconnected";
        created_at: string;
    } | {
        message: string;
        error_code: "visionline_instance_unreachable";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "acs_system_disconnected";
        created_at: string;
    } | {
        message: string;
        error_code: "account_disconnected";
        created_at: string;
    })[];
    warnings: {
        message: string;
        warning_code: "salto_ks_subscription_limit_almost_reached";
        created_at: string;
    }[];
    name: string;
    image_url: string;
    image_alt_text: string;
    workspace_id: string;
    acs_system_id: string;
    connected_account_ids: string[];
    visionline_metadata?: {
        mobile_access_uuid: string;
        system_id: string;
        lan_address: string;
    } | undefined;
    external_type?: "assa_abloy_credential_service" | "pti_site" | "alta_org" | "salto_site" | "brivo_account" | "hid_credential_manager_organization" | "visionline_system" | "latch_building" | undefined;
    external_type_display_name?: string | undefined;
    can_automate_enrollment?: boolean | undefined;
    can_create_acs_access_groups?: boolean | undefined;
    can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
    can_add_acs_users_to_acs_access_groups?: boolean | undefined;
    system_type?: "assa_abloy_credential_service" | "pti_site" | "alta_org" | "salto_site" | "brivo_account" | "hid_credential_manager_organization" | "visionline_system" | "latch_building" | undefined;
    system_type_display_name?: string | undefined;
}, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "seam_bridge_disconnected";
        created_at: string;
    } | {
        message: string;
        error_code: "visionline_instance_unreachable";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "acs_system_disconnected";
        created_at: string;
    } | {
        message: string;
        error_code: "account_disconnected";
        created_at: string;
    })[];
    warnings: {
        message: string;
        warning_code: "salto_ks_subscription_limit_almost_reached";
        created_at: string;
    }[];
    name: string;
    image_url: string;
    image_alt_text: string;
    workspace_id: string;
    acs_system_id: string;
    connected_account_ids: string[];
    visionline_metadata?: {
        mobile_access_uuid: string;
        system_id: string;
        lan_address: string;
    } | undefined;
    external_type?: "assa_abloy_credential_service" | "pti_site" | "alta_org" | "salto_site" | "brivo_account" | "hid_credential_manager_organization" | "visionline_system" | "latch_building" | undefined;
    external_type_display_name?: string | undefined;
    can_automate_enrollment?: boolean | undefined;
    can_create_acs_access_groups?: boolean | undefined;
    can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
    can_add_acs_users_to_acs_access_groups?: boolean | undefined;
    system_type?: "assa_abloy_credential_service" | "pti_site" | "alta_org" | "salto_site" | "brivo_account" | "hid_credential_manager_organization" | "visionline_system" | "latch_building" | undefined;
    system_type_display_name?: string | undefined;
}>;
type AcsSystem = z.output<typeof acs_system>;

declare const acs_user: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    acs_user_id: z.ZodString;
    acs_system_id: z.ZodString;
    hid_acs_system_id: z.ZodOptional<z.ZodString>;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    display_name: z.ZodString;
    external_type: z.ZodOptional<z.ZodEnum<["pti_user", "brivo_user", "hid_credential_manager_user", "salto_site_user", "latch_user"]>>;
    external_type_display_name: z.ZodOptional<z.ZodString>;
    is_suspended: z.ZodBoolean;
    access_schedule: z.ZodOptional<z.ZodObject<{
        starts_at: z.ZodString;
        ends_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        starts_at: string;
        ends_at: string;
    }, {
        starts_at: string;
        ends_at: string;
    }>>;
    user_identity_id: z.ZodOptional<z.ZodString>;
    user_identity_full_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_identity_email_address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_identity_phone_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    latest_desired_state_synced_with_provider_at: z.ZodOptional<z.ZodString>;
    is_latest_desired_state_synced_with_provider: z.ZodOptional<z.ZodBoolean>;
    warnings: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        warning_code: z.ZodLiteral<"being_deleted">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    }, {
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        warning_code: z.ZodLiteral<"salto_ks_user_not_subscribed">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    }, {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    }>]>, "many">;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"deleted_externally">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    }, {
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"salto_ks_subscription_limit_exceeded">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_create_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_update_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_delete_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    }>]>, "many">;
}, {
    full_name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    email_address: z.ZodOptional<z.ZodString>;
    phone_number: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}>, {
    is_managed: z.ZodLiteral<true>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    })[];
    warnings: ({
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    } | {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    })[];
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_system_id: string;
    acs_user_id: string;
    is_suspended: boolean;
    email?: string | undefined;
    external_type?: "pti_user" | "brivo_user" | "hid_credential_manager_user" | "salto_site_user" | "latch_user" | undefined;
    external_type_display_name?: string | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
    user_identity_id?: string | undefined;
    full_name?: string | undefined;
    email_address?: string | undefined;
    phone_number?: string | undefined;
    hid_acs_system_id?: string | undefined;
    access_schedule?: {
        starts_at: string;
        ends_at: string;
    } | undefined;
    user_identity_full_name?: string | null | undefined;
    user_identity_email_address?: string | null | undefined;
    user_identity_phone_number?: string | null | undefined;
}, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    })[];
    warnings: ({
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    } | {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    })[];
    display_name: string;
    workspace_id: string;
    is_managed: true;
    acs_system_id: string;
    acs_user_id: string;
    is_suspended: boolean;
    email?: string | undefined;
    external_type?: "pti_user" | "brivo_user" | "hid_credential_manager_user" | "salto_site_user" | "latch_user" | undefined;
    external_type_display_name?: string | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
    user_identity_id?: string | undefined;
    full_name?: string | undefined;
    email_address?: string | undefined;
    phone_number?: string | undefined;
    hid_acs_system_id?: string | undefined;
    access_schedule?: {
        starts_at: string;
        ends_at: string;
    } | undefined;
    user_identity_full_name?: string | null | undefined;
    user_identity_email_address?: string | null | undefined;
    user_identity_phone_number?: string | null | undefined;
}>;
declare const unmanaged_acs_user: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    acs_user_id: z.ZodString;
    acs_system_id: z.ZodString;
    hid_acs_system_id: z.ZodOptional<z.ZodString>;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    display_name: z.ZodString;
    external_type: z.ZodOptional<z.ZodEnum<["pti_user", "brivo_user", "hid_credential_manager_user", "salto_site_user", "latch_user"]>>;
    external_type_display_name: z.ZodOptional<z.ZodString>;
    is_suspended: z.ZodBoolean;
    access_schedule: z.ZodOptional<z.ZodObject<{
        starts_at: z.ZodString;
        ends_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        starts_at: string;
        ends_at: string;
    }, {
        starts_at: string;
        ends_at: string;
    }>>;
    user_identity_id: z.ZodOptional<z.ZodString>;
    user_identity_full_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_identity_email_address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_identity_phone_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    latest_desired_state_synced_with_provider_at: z.ZodOptional<z.ZodString>;
    is_latest_desired_state_synced_with_provider: z.ZodOptional<z.ZodBoolean>;
    warnings: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        warning_code: z.ZodLiteral<"being_deleted">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    }, {
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        warning_code: z.ZodLiteral<"salto_ks_user_not_subscribed">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    }, {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    }>]>, "many">;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"deleted_externally">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    }, {
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"salto_ks_subscription_limit_exceeded">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }, {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_create_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_update_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        created_at: z.ZodString;
        message: z.ZodString;
    }, {
        error_code: z.ZodLiteral<"failed_to_delete_on_acs_system">;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    }, {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    }>]>, "many">;
}, {
    full_name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    email_address: z.ZodOptional<z.ZodString>;
    phone_number: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}>, {
    is_managed: z.ZodLiteral<false>;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    })[];
    warnings: ({
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    } | {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    })[];
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_system_id: string;
    acs_user_id: string;
    is_suspended: boolean;
    email?: string | undefined;
    external_type?: "pti_user" | "brivo_user" | "hid_credential_manager_user" | "salto_site_user" | "latch_user" | undefined;
    external_type_display_name?: string | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
    user_identity_id?: string | undefined;
    full_name?: string | undefined;
    email_address?: string | undefined;
    phone_number?: string | undefined;
    hid_acs_system_id?: string | undefined;
    access_schedule?: {
        starts_at: string;
        ends_at: string;
    } | undefined;
    user_identity_full_name?: string | null | undefined;
    user_identity_email_address?: string | null | undefined;
    user_identity_phone_number?: string | null | undefined;
}, {
    created_at: string;
    errors: ({
        message: string;
        error_code: "deleted_externally";
        created_at: string;
    } | {
        message: string;
        error_code: "salto_ks_subscription_limit_exceeded";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_create_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_update_on_acs_system";
        created_at: string;
    } | {
        message: string;
        error_code: "failed_to_delete_on_acs_system";
        created_at: string;
    })[];
    warnings: ({
        message: string;
        warning_code: "being_deleted";
        created_at: string;
    } | {
        message: string;
        warning_code: "salto_ks_user_not_subscribed";
        created_at: string;
    })[];
    display_name: string;
    workspace_id: string;
    is_managed: false;
    acs_system_id: string;
    acs_user_id: string;
    is_suspended: boolean;
    email?: string | undefined;
    external_type?: "pti_user" | "brivo_user" | "hid_credential_manager_user" | "salto_site_user" | "latch_user" | undefined;
    external_type_display_name?: string | undefined;
    is_latest_desired_state_synced_with_provider?: boolean | undefined;
    latest_desired_state_synced_with_provider_at?: string | undefined;
    user_identity_id?: string | undefined;
    full_name?: string | undefined;
    email_address?: string | undefined;
    phone_number?: string | undefined;
    hid_acs_system_id?: string | undefined;
    access_schedule?: {
        starts_at: string;
        ends_at: string;
    } | undefined;
    user_identity_full_name?: string | null | undefined;
    user_identity_email_address?: string | null | undefined;
    user_identity_phone_number?: string | null | undefined;
}>;
type AcsUser = z.output<typeof acs_user>;

declare const action_attempt: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"LOCK_DOOR">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "LOCK_DOOR";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "LOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"LOCK_DOOR">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "LOCK_DOOR";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "LOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"LOCK_DOOR">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "LOCK_DOOR";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "LOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UNLOCK_DOOR">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UNLOCK_DOOR";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UNLOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UNLOCK_DOOR">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "UNLOCK_DOOR";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "UNLOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UNLOCK_DOOR">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UNLOCK_DOOR";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UNLOCK_DOOR";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"READ_CARD">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "READ_CARD";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "READ_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"READ_CARD">;
    result: z.ZodObject<{
        acs_credential_id: z.ZodNullable<z.ZodString>;
        card_number: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        acs_credential_id: string | null;
        card_number: string | null;
    }, {
        acs_credential_id: string | null;
        card_number: string | null;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {
        acs_credential_id: string | null;
        card_number: string | null;
    };
    action_type: "READ_CARD";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {
        acs_credential_id: string | null;
        card_number: string | null;
    };
    action_type: "READ_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"READ_CARD">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "READ_CARD";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "READ_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ENCODE_CARD">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "ENCODE_CARD";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "ENCODE_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ENCODE_CARD">;
    result: z.ZodObject<{
        acs_credential_id: z.ZodNullable<z.ZodString>;
        card_number: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        acs_credential_id: string | null;
        card_number: string | null;
    }, {
        acs_credential_id: string | null;
        card_number: string | null;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {
        acs_credential_id: string | null;
        card_number: string | null;
    };
    action_type: "ENCODE_CARD";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {
        acs_credential_id: string | null;
        card_number: string | null;
    };
    action_type: "ENCODE_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ENCODE_CARD">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "ENCODE_CARD";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "ENCODE_CARD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"RESET_SANDBOX_WORKSPACE">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "RESET_SANDBOX_WORKSPACE";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "RESET_SANDBOX_WORKSPACE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"RESET_SANDBOX_WORKSPACE">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "RESET_SANDBOX_WORKSPACE";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "RESET_SANDBOX_WORKSPACE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"RESET_SANDBOX_WORKSPACE">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "RESET_SANDBOX_WORKSPACE";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "RESET_SANDBOX_WORKSPACE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_COOL">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_COOL";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_COOL">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_COOL";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_COOL">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_COOL";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_HEAT";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_HEAT";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_HEAT";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_HEAT";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_HEAT";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_HEAT";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT_COOL">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_HEAT_COOL";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_HEAT_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT_COOL">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_HEAT_COOL";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_HEAT_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_HEAT_COOL">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_HEAT_COOL";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_HEAT_COOL";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_FAN_MODE">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_FAN_MODE";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_FAN_MODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_FAN_MODE">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_FAN_MODE";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_FAN_MODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_FAN_MODE">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_FAN_MODE";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_FAN_MODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_THERMOSTAT_OFF">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_THERMOSTAT_OFF";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SET_THERMOSTAT_OFF";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_THERMOSTAT_OFF">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_THERMOSTAT_OFF";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "SET_THERMOSTAT_OFF";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SET_THERMOSTAT_OFF">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_THERMOSTAT_OFF";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SET_THERMOSTAT_OFF";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ACTIVATE_CLIMATE_PRESET">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "ACTIVATE_CLIMATE_PRESET";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "ACTIVATE_CLIMATE_PRESET";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ACTIVATE_CLIMATE_PRESET">;
    result: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "ACTIVATE_CLIMATE_PRESET";
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    result: {};
    action_type: "ACTIVATE_CLIMATE_PRESET";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"ACTIVATE_CLIMATE_PRESET">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "ACTIVATE_CLIMATE_PRESET";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "ACTIVATE_CLIMATE_PRESET";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SYNC_ACCESS_CODES">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SYNC_ACCESS_CODES";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "SYNC_ACCESS_CODES";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SYNC_ACCESS_CODES">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "SYNC_ACCESS_CODES";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "SYNC_ACCESS_CODES";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"SYNC_ACCESS_CODES">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SYNC_ACCESS_CODES";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "SYNC_ACCESS_CODES";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_ACCESS_CODE">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "CREATE_ACCESS_CODE";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "CREATE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_ACCESS_CODE">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "CREATE_ACCESS_CODE";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "CREATE_ACCESS_CODE";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_ACCESS_CODE">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "CREATE_ACCESS_CODE";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "CREATE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_ACCESS_CODE">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "DELETE_ACCESS_CODE";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "DELETE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_ACCESS_CODE">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "DELETE_ACCESS_CODE";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "DELETE_ACCESS_CODE";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_ACCESS_CODE">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "DELETE_ACCESS_CODE";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "DELETE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_ACCESS_CODE">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UPDATE_ACCESS_CODE";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UPDATE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_ACCESS_CODE">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "UPDATE_ACCESS_CODE";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "UPDATE_ACCESS_CODE";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_ACCESS_CODE">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UPDATE_ACCESS_CODE";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UPDATE_ACCESS_CODE";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_NOISE_THRESHOLD">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "CREATE_NOISE_THRESHOLD";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "CREATE_NOISE_THRESHOLD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_NOISE_THRESHOLD">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "CREATE_NOISE_THRESHOLD";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "CREATE_NOISE_THRESHOLD";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"CREATE_NOISE_THRESHOLD">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "CREATE_NOISE_THRESHOLD";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "CREATE_NOISE_THRESHOLD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_NOISE_THRESHOLD">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "DELETE_NOISE_THRESHOLD";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "DELETE_NOISE_THRESHOLD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_NOISE_THRESHOLD">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "DELETE_NOISE_THRESHOLD";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "DELETE_NOISE_THRESHOLD";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"DELETE_NOISE_THRESHOLD">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "DELETE_NOISE_THRESHOLD";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "DELETE_NOISE_THRESHOLD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"pending">;
    result: z.ZodNull;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_NOISE_THRESHOLD">;
}>, "strip", z.ZodTypeAny, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
}, {
    status: "pending";
    action_attempt_id: string;
    error: null;
    result: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"success">;
    error: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_NOISE_THRESHOLD">;
    result: z.ZodAny;
}>, "strip", z.ZodTypeAny, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
    result?: any;
}, {
    status: "success";
    action_attempt_id: string;
    error: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
    result?: any;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    action_attempt_id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "error"]>;
}, {
    status: z.ZodLiteral<"error">;
    result: z.ZodNull;
}>, {
    action_type: z.ZodLiteral<"UPDATE_NOISE_THRESHOLD">;
    error: z.ZodObject<{
        type: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: string;
    }, {
        message: string;
        type: string;
    }>;
}>, "strip", z.ZodTypeAny, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
}, {
    status: "error";
    action_attempt_id: string;
    error: {
        message: string;
        type: string;
    };
    result: null;
    action_type: "UPDATE_NOISE_THRESHOLD";
}>]>;
type ActionAttempt = z.infer<typeof action_attempt>;

declare const client_session: z.ZodObject<{
    client_session_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    token: z.ZodString;
    user_identifier_key: z.ZodNullable<z.ZodString>;
    device_count: z.ZodNumber;
    connected_account_ids: z.ZodArray<z.ZodString, "many">;
    connect_webview_ids: z.ZodArray<z.ZodString, "many">;
    user_identity_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    connected_account_ids: string[];
    client_session_id: string;
    token: string;
    user_identifier_key: string | null;
    device_count: number;
    connect_webview_ids: string[];
    user_identity_ids: string[];
}, {
    created_at: string;
    workspace_id: string;
    connected_account_ids: string[];
    client_session_id: string;
    token: string;
    user_identifier_key: string | null;
    device_count: number;
    connect_webview_ids: string[];
    user_identity_ids: string[];
}>;
type ClientSession = z.infer<typeof client_session>;

declare const connect_webview: z.ZodObject<{
    connect_webview_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    connected_account_id: z.ZodNullable<z.ZodString>;
    url: z.ZodString;
    device_selection_mode: z.ZodEnum<["none", "single", "multiple"]>;
    accepted_providers: z.ZodArray<z.ZodString, "many">;
    accepted_devices: z.ZodArray<z.ZodString, "many">;
    any_device_allowed: z.ZodBoolean;
    any_provider_allowed: z.ZodBoolean;
    login_successful: z.ZodBoolean;
    status: z.ZodEnum<["pending", "failed", "authorized"]>;
    custom_redirect_url: z.ZodNullable<z.ZodString>;
    custom_redirect_failure_url: z.ZodNullable<z.ZodString>;
    custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
    automatically_manage_new_devices: z.ZodBoolean;
    wait_for_device_creation: z.ZodBoolean;
    authorized_at: z.ZodNullable<z.ZodString>;
    selected_provider: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "failed" | "authorized";
    connected_account_id: string | null;
    created_at: string;
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    url: string;
    workspace_id: string;
    connect_webview_id: string;
    device_selection_mode: "none" | "single" | "multiple";
    accepted_providers: string[];
    accepted_devices: string[];
    any_device_allowed: boolean;
    any_provider_allowed: boolean;
    login_successful: boolean;
    custom_redirect_url: string | null;
    custom_redirect_failure_url: string | null;
    wait_for_device_creation: boolean;
    authorized_at: string | null;
    selected_provider: string | null;
}, {
    status: "pending" | "failed" | "authorized";
    connected_account_id: string | null;
    created_at: string;
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    url: string;
    workspace_id: string;
    connect_webview_id: string;
    device_selection_mode: "none" | "single" | "multiple";
    accepted_providers: string[];
    accepted_devices: string[];
    any_device_allowed: boolean;
    any_provider_allowed: boolean;
    login_successful: boolean;
    custom_redirect_url: string | null;
    custom_redirect_failure_url: string | null;
    wait_for_device_creation: boolean;
    authorized_at: string | null;
    selected_provider: string | null;
}>;
type ConnectWebview = z.infer<typeof connect_webview>;

declare const connected_account_error: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
    is_connected_account_error: z.ZodLiteral<true>;
}, {
    error_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    is_connected_account_error: true;
    error_code: string;
}, {
    message: string;
    is_connected_account_error: true;
    error_code: string;
}>;
type ConnectedAccountError = z.infer<typeof connected_account_error>;
declare const connected_account_warning: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
}, {
    warning_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    warning_code: string;
}, {
    message: string;
    warning_code: string;
}>;
type ConnectedAccountWarning = z.infer<typeof connected_account_warning>;
declare const connected_account: z.ZodObject<{
    connected_account_id: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
    user_identifier: z.ZodOptional<z.ZodObject<{
        username: z.ZodOptional<z.ZodString>;
        api_url: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        exclusive: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        username?: string | undefined;
        api_url?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        exclusive?: boolean | undefined;
    }, {
        username?: string | undefined;
        api_url?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        exclusive?: boolean | undefined;
    }>>;
    account_type: z.ZodOptional<z.ZodString>;
    account_type_display_name: z.ZodString;
    errors: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
    automatically_manage_new_devices: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    account_type_display_name: string;
    errors: {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    connected_account_id?: string | undefined;
    created_at?: string | undefined;
    user_identifier?: {
        username?: string | undefined;
        api_url?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        exclusive?: boolean | undefined;
    } | undefined;
    account_type?: string | undefined;
}, {
    account_type_display_name: string;
    errors: {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    automatically_manage_new_devices: boolean;
    connected_account_id?: string | undefined;
    created_at?: string | undefined;
    user_identifier?: {
        username?: string | undefined;
        api_url?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        exclusive?: boolean | undefined;
    } | undefined;
    account_type?: string | undefined;
}>;
type ConnectedAccount = z.infer<typeof connected_account>;

declare const custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
type CustomMetadata = z.output<typeof custom_metadata>;

declare const device_error: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
    is_device_error: z.ZodLiteral<true>;
}, {
    error_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    error_code: string;
    is_device_error: true;
}, {
    message: string;
    error_code: string;
    is_device_error: true;
}>;
type DeviceError = z.infer<typeof device_error>;
declare const device_warning: z.ZodObject<z.objectUtil.extendShape<{
    message: z.ZodString;
}, {
    warning_code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    warning_code: string;
}, {
    message: string;
    warning_code: string;
}>;
type DeviceWarning = z.infer<typeof device_warning>;
declare const device: z.ZodObject<z.objectUtil.extendShape<{
    device_id: z.ZodString;
    device_type: z.ZodUnion<[z.ZodEnum<["akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock"]>, z.ZodEnum<["noiseaware_activity_zone" | "minut_sensor"]>, z.ZodEnum<["ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat"]>, z.ZodEnum<["ios_phone" | "android_phone"]>, z.ZodEnum<["visionline_encoder"]>]>;
    nickname: z.ZodOptional<z.ZodString>;
    display_name: z.ZodString;
    capabilities_supported: z.ZodArray<z.ZodEnum<["access_code", "lock", "noise_detection", "thermostat", "battery", "phone"]>, "many">;
    properties: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        online: z.ZodBoolean;
        name: z.ZodString;
        accessory_keypad: z.ZodOptional<z.ZodObject<{
            is_connected: z.ZodBoolean;
            battery: z.ZodOptional<z.ZodObject<{
                level: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                level: number;
            }, {
                level: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }>>;
        appearance: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
        model: z.ZodObject<{
            can_connect_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
            display_name: z.ZodString;
            manufacturer_display_name: z.ZodString;
            has_built_in_keypad: z.ZodOptional<z.ZodBoolean>;
            offline_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            online_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            accessory_keypad_supported: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }>;
        has_direct_power: z.ZodOptional<z.ZodBoolean>;
        battery_level: z.ZodOptional<z.ZodNumber>;
        battery: z.ZodOptional<z.ZodObject<{
            level: z.ZodNumber;
            status: z.ZodEnum<["critical", "low", "good", "full"]>;
        }, "strip", z.ZodTypeAny, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }>>;
        manufacturer: z.ZodOptional<z.ZodString>;
        image_url: z.ZodOptional<z.ZodString>;
        image_alt_text: z.ZodOptional<z.ZodString>;
        serial_number: z.ZodOptional<z.ZodString>;
        online_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        offline_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        supports_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
        supports_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
        noise_level_decibels: z.ZodOptional<z.ZodNumber>;
        currently_triggering_noise_threshold_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    }, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    }>, z.ZodObject<{
        assa_abloy_credential_service_metadata: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            has_active_endpoint: z.ZodBoolean;
            endpoints: z.ZodArray<z.ZodObject<{
                endpoint_id: z.ZodString;
                is_active: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                endpoint_id: string;
                is_active: boolean;
            }, {
                endpoint_id: string;
                is_active: boolean;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        }, {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    }, {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        august_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodString;
            lock_name: z.ZodString;
            house_name: z.ZodString;
            has_keypad: z.ZodBoolean;
            keypad_battery_level: z.ZodOptional<z.ZodString>;
            model: z.ZodOptional<z.ZodString>;
            house_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        }, {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        }>>;
        avigilon_alta_metadata: z.ZodOptional<z.ZodObject<{
            entry_name: z.ZodString;
            org_name: z.ZodString;
            zone_id: z.ZodNumber;
            zone_name: z.ZodString;
            site_id: z.ZodNumber;
            site_name: z.ZodString;
            entry_relays_total_count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        }, {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        }>>;
        schlage_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            access_code_length: z.ZodNullable<z.ZodNumber>;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        }>>;
        smartthings_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
            location_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        }>>;
        lockly_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        }>>;
        nuki_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            keypad_battery_critical: z.ZodOptional<z.ZodBoolean>;
            keypad_paired: z.ZodOptional<z.ZodBoolean>;
            keypad_2_paired: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        }, {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        }>>;
        kwikset_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model_number: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model_number: string;
        }, {
            device_id: string;
            device_name: string;
            model_number: string;
        }>>;
        salto_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodString;
            customer_reference: z.ZodString;
            lock_type: z.ZodString;
            battery_level: z.ZodString;
            locked_state: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        }, {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        }>>;
        genie_metadata: z.ZodOptional<z.ZodObject<{
            device_name: z.ZodString;
            door_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            door_name: string;
        }, {
            device_name: string;
            door_name: string;
        }>>;
        brivo_metadata: z.ZodOptional<z.ZodObject<{
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
        }, {
            device_name: string;
        }>>;
        igloo_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            bridge_id: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        }, {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        }>>;
        noiseaware_metadata: z.ZodOptional<z.ZodObject<{
            device_model: z.ZodEnum<["indoor", "outdoor"]>;
            noise_level_nrs: z.ZodNumber;
            noise_level_decibel: z.ZodNumber;
            device_name: z.ZodString;
            device_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        }, {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        }>>;
        minut_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            latest_sensor_values: z.ZodObject<{
                temperature: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                sound: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                humidity: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                pressure: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                accelerometer_z: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            }, {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        }, {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        }>>;
        four_suites_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            device_name: z.ZodString;
            reclose_delay_in_seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        }, {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        }>>;
        two_n_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_name: string;
        }, {
            device_id: number;
            device_name: string;
        }>>;
        controlbyweb_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            relay_name: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        }, {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        }>>;
        ttlock_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodNumber;
            lock_alias: z.ZodString;
            feature_value: z.ZodString;
            features: z.ZodObject<{
                passcode: z.ZodBoolean;
                passcode_management: z.ZodBoolean;
                unlock_via_gateway: z.ZodBoolean;
                lock_command: z.ZodBoolean;
                incomplete_keyboard_passcode: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            }, {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            }>;
            has_gateway: z.ZodOptional<z.ZodBoolean>;
            wireless_keypads: z.ZodOptional<z.ZodArray<z.ZodObject<{
                wireless_keypad_id: z.ZodNumber;
                wireless_keypad_name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }, {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        }, {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        }>>;
        seam_bridge_metadata: z.ZodOptional<z.ZodObject<{
            unlock_method: z.ZodOptional<z.ZodEnum<["bridge", "doorking"]>>;
            device_num: z.ZodNumber;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        }, {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        }>>;
        igloohome_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            bridge_id: z.ZodOptional<z.ZodString>;
            bridge_name: z.ZodOptional<z.ZodString>;
            keypad_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        }>>;
        nest_metadata: z.ZodOptional<z.ZodObject<{
            nest_device_id: z.ZodString;
            device_name: z.ZodString;
            custom_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        }, {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        }>>;
        ecobee_metadata: z.ZodOptional<z.ZodObject<{
            ecobee_device_id: z.ZodString;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            ecobee_device_id: string;
        }, {
            device_name: string;
            ecobee_device_id: string;
        }>>;
        honeywell_resideo_metadata: z.ZodOptional<z.ZodObject<{
            honeywell_resideo_device_id: z.ZodString;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            honeywell_resideo_device_id: string;
        }, {
            device_name: string;
            honeywell_resideo_device_id: string;
        }>>;
        hubitat_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            device_label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            device_label: string;
        }, {
            device_id: string;
            device_name: string;
            device_label: string;
        }>>;
        dormakaba_oracode_metadata: z.ZodOptional<z.ZodObject<{
            door_id: z.ZodOptional<z.ZodNumber>;
            door_name: z.ZodString;
            device_id: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
            door_is_wireless: z.ZodBoolean;
            site_id: z.ZodNullable<z.ZodNumber>;
            site_name: z.ZodString;
            iana_timezone: z.ZodOptional<z.ZodString>;
            predefined_time_slots: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                prefix: z.ZodNumber;
                check_in_time: z.ZodString;
                check_out_time: z.ZodString;
                is_24_hour: z.ZodBoolean;
                is_biweekly_mode: z.ZodBoolean;
                is_one_shot: z.ZodBoolean;
                is_master: z.ZodBoolean;
                ext_dormakaba_oracode_user_level_prefix: z.ZodNumber;
                dormakaba_oracode_user_level_id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }, {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        }, {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        }>>;
        wyze_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            product_name: z.ZodString;
            product_type: z.ZodString;
            product_model: z.ZodString;
            device_info_model: z.ZodString;
            keypad_uuid: z.ZodOptional<z.ZodString>;
            locker_status_hardlock: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        }, {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        }>>;
        tedee_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            serial_number: z.ZodString;
            device_name: z.ZodString;
            device_model: z.ZodString;
            bridge_id: z.ZodNumber;
            bridge_name: z.ZodString;
            keypad_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        }, {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        }>>;
        visionline_metadata: z.ZodOptional<z.ZodObject<{
            encoder_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            encoder_id: string;
        }, {
            encoder_id: string;
        }>>;
        akiles_metadata: z.ZodOptional<z.ZodObject<{
            gadget_name: z.ZodString;
            gadget_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            gadget_name: string;
            gadget_id: string;
        }, {
            gadget_name: string;
            gadget_id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    }, {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    }>>, z.ZodIntersection<z.ZodObject<z.objectUtil.extendShape<{
        _experimental_supported_code_from_access_codes_lengths: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        code_constraints: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            constraint_type: z.ZodEnum<["no_zeros", "cannot_start_with_12", "no_triple_consecutive_ints", "cannot_specify_pin_code", "pin_code_matches_existing_set", "start_date_in_future", "no_ascending_or_descending_sequence", "at_least_three_unique_digits", "cannot_contain_089", "cannot_contain_0789"]>;
        }, "strip", z.ZodTypeAny, {
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        }, {
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        }>, z.ZodObject<{
            constraint_type: z.ZodEnum<["name_length", "name_must_be_unique"]>;
            min_length: z.ZodOptional<z.ZodNumber>;
            max_length: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        }, {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        }>]>, "many">>>;
        supported_code_lengths: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        max_active_codes_supported: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        supports_backup_access_code_pool: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        has_native_entry_events: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, {
        locked: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        keypad_battery: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            level: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            level: number;
        }, {
            level: number;
        }>>>;
        door_open: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }>, "strip", z.ZodTypeAny, {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    }, {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    }>, z.ZodObject<{
        temperature_fahrenheit: z.ZodOptional<z.ZodNumber>;
        temperature_celsius: z.ZodOptional<z.ZodNumber>;
        relative_humidity: z.ZodOptional<z.ZodNumber>;
        available_hvac_mode_settings: z.ZodOptional<z.ZodArray<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>, "many">>;
        available_fan_mode_settings: z.ZodOptional<z.ZodArray<z.ZodEnum<["auto", "on", "circulate"]>, "many">>;
        is_heating: z.ZodOptional<z.ZodBoolean>;
        is_cooling: z.ZodOptional<z.ZodBoolean>;
        is_fan_running: z.ZodOptional<z.ZodBoolean>;
        fan_mode_setting: z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>;
        is_temporary_manual_override_active: z.ZodOptional<z.ZodBoolean>;
        current_climate_setting: z.ZodOptional<z.ZodObject<{
            climate_preset_key: z.ZodOptional<z.ZodString>;
            can_edit: z.ZodOptional<z.ZodBoolean>;
            can_delete: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
            display_name: z.ZodOptional<z.ZodString>;
            fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
            hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }>>;
        default_climate_setting: z.ZodOptional<z.ZodObject<{
            climate_preset_key: z.ZodOptional<z.ZodString>;
            can_edit: z.ZodOptional<z.ZodBoolean>;
            can_delete: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
            display_name: z.ZodOptional<z.ZodString>;
            fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
            hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }>>;
        available_climate_presets: z.ZodOptional<z.ZodArray<z.ZodObject<{
            climate_preset_key: z.ZodString;
            can_edit: z.ZodBoolean;
            can_delete: z.ZodBoolean;
            name: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
            display_name: z.ZodString;
            fan_mode_setting: z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>;
            hvac_mode_setting: z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
            heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
            manual_override_allowed: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }, {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }>, "many">>;
        fallback_climate_preset_key: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
        active_thermostat_schedule: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodObject<{
            thermostat_schedule_id: z.ZodString;
            device_id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            climate_preset_key: z.ZodString;
            max_override_period_minutes: z.ZodNumber;
            starts_at: z.ZodString;
            ends_at: z.ZodString;
            created_at: z.ZodString;
            errors: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        }, {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        }>>>>;
        min_cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        min_cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        max_cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        max_cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        min_heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        min_heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        max_heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        max_heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        min_heating_cooling_delta_celsius: z.ZodOptional<z.ZodNumber>;
        min_heating_cooling_delta_fahrenheit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    }, {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    }>>>;
    location: z.ZodNullable<z.ZodObject<{
        location_name: z.ZodOptional<z.ZodString>;
        timezone: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        location_name?: string | undefined;
        timezone?: string | undefined;
    }, {
        location_name?: string | undefined;
        timezone?: string | undefined;
    }>>;
    connected_account_id: z.ZodString;
    workspace_id: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_device_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_device_error: true;
    }, {
        message: string;
        error_code: string;
        is_device_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    created_at: z.ZodString;
    is_managed: z.ZodLiteral<true>;
    custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
}, z.objectUtil.extendShape<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat: z.ZodOptional<z.ZodBoolean>;
    can_hvac_cool: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat_cool: z.ZodOptional<z.ZodBoolean>;
    can_turn_off_hvac: z.ZodOptional<z.ZodBoolean>;
}, {
    can_simulate_removal: z.ZodOptional<z.ZodBoolean>;
    can_simulate_connection: z.ZodOptional<z.ZodBoolean>;
    can_simulate_disconnection: z.ZodOptional<z.ZodBoolean>;
}>>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    display_name: string;
    device_id: string;
    device_type: ("akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock") | ("noiseaware_activity_zone" | "minut_sensor") | ("ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat") | ("ios_phone" | "android_phone") | "visionline_encoder";
    capabilities_supported: ("phone" | "access_code" | "lock" | "noise_detection" | "thermostat" | "battery")[];
    properties: {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    } & {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    } & {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    } & {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    } & {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    };
    location: {
        location_name?: string | undefined;
        timezone?: string | undefined;
    } | null;
    workspace_id: string;
    is_managed: true;
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
    nickname?: string | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    custom_metadata: Record<string, string | boolean>;
    display_name: string;
    device_id: string;
    device_type: ("akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock") | ("noiseaware_activity_zone" | "minut_sensor") | ("ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat") | ("ios_phone" | "android_phone") | "visionline_encoder";
    capabilities_supported: ("phone" | "access_code" | "lock" | "noise_detection" | "thermostat" | "battery")[];
    properties: {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    } & {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    } & {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    } & {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    } & {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    };
    location: {
        location_name?: string | undefined;
        timezone?: string | undefined;
    } | null;
    workspace_id: string;
    is_managed: true;
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
    nickname?: string | undefined;
}>;
type Device = z.infer<typeof device>;

declare const DEVICE_PROVIDERS: {
    readonly AKUVOX: "akuvox";
    readonly AUGUST: "august";
    readonly AVIGILON_ALTA: "avigilon_alta";
    readonly BRIVO: "brivo";
    readonly BUTTERFLYMX: "butterflymx";
    readonly SCHLAGE: "schlage";
    readonly SMARTTHINGS: "smartthings";
    readonly YALE: "yale";
    readonly GENIE: "genie";
    readonly DOORKING: "doorking";
    readonly SALTO: "salto";
    readonly LOCKLY: "lockly";
    readonly TTLOCK: "ttlock";
    readonly LINEAR: "linear";
    readonly NOISEAWARE: "noiseaware";
    readonly NUKI: "nuki";
    readonly SEAM_RELAY_ADMIN: "seam_relay_admin";
    readonly IGLOO: "igloo";
    readonly KWIKSET: "kwikset";
    readonly MINUT: "minut";
    readonly MY_2N: "my_2n";
    readonly CONTROLBYWEB: "controlbyweb";
    readonly NEST: "nest";
    readonly IGLOOHOME: "igloohome";
    readonly ECOBEE: "ecobee";
    readonly HUBITAT: "hubitat";
    readonly FOUR_SUITES: "four_suites";
    readonly DORMAKABA_ORACODE: "dormakaba_oracode";
    readonly PTI: "pti";
    readonly WYZE: "wyze";
    readonly SEAM_PASSPORT: "seam_passport";
    readonly VISIONLINE: "visionline";
    readonly ASSA_ABLOY_CREDENTIAL_SERVICE: "assa_abloy_credential_service";
    readonly SEAM_BRIDGE: "seam_bridge";
    readonly TEDEE: "tedee";
    readonly HONEYWELL_RESIDEO: "honeywell_resideo";
    readonly LATCH: "latch";
    readonly AKILES: "akiles";
};
type DeviceProviderName = (typeof DEVICE_PROVIDERS)[keyof typeof DEVICE_PROVIDERS];
declare const device_provider: z.ZodObject<z.objectUtil.extendShape<{
    device_provider_name: z.ZodEnum<[DeviceProviderName, ...DeviceProviderName[]]>;
    display_name: z.ZodString;
    image_url: z.ZodString;
    provider_categories: z.ZodArray<z.ZodEnum<["stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta", ...("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[]]>, "many">;
}, z.objectUtil.extendShape<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat: z.ZodOptional<z.ZodBoolean>;
    can_hvac_cool: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat_cool: z.ZodOptional<z.ZodBoolean>;
    can_turn_off_hvac: z.ZodOptional<z.ZodBoolean>;
}, {
    can_simulate_removal: z.ZodOptional<z.ZodBoolean>;
    can_simulate_connection: z.ZodOptional<z.ZodBoolean>;
    can_simulate_disconnection: z.ZodOptional<z.ZodBoolean>;
}>>, "strip", z.ZodTypeAny, {
    display_name: string;
    image_url: string;
    device_provider_name: DeviceProviderName;
    provider_categories: ("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[];
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}, {
    display_name: string;
    image_url: string;
    device_provider_name: DeviceProviderName;
    provider_categories: ("stable" | "consumer_smartlocks" | "thermostats" | "noise_sensors" | "access_control_systems" | "internal_beta")[];
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}>;
type DeviceProvider = z.infer<typeof device_provider>;

declare const unmanaged_device: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<Pick<z.objectUtil.extendShape<{
    device_id: z.ZodString;
    device_type: z.ZodUnion<[z.ZodEnum<["akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock"]>, z.ZodEnum<["noiseaware_activity_zone" | "minut_sensor"]>, z.ZodEnum<["ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat"]>, z.ZodEnum<["ios_phone" | "android_phone"]>, z.ZodEnum<["visionline_encoder"]>]>;
    nickname: z.ZodOptional<z.ZodString>;
    display_name: z.ZodString;
    capabilities_supported: z.ZodArray<z.ZodEnum<["access_code", "lock", "noise_detection", "thermostat", "battery", "phone"]>, "many">;
    properties: z.ZodIntersection<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        online: z.ZodBoolean;
        name: z.ZodString;
        accessory_keypad: z.ZodOptional<z.ZodObject<{
            is_connected: z.ZodBoolean;
            battery: z.ZodOptional<z.ZodObject<{
                level: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                level: number;
            }, {
                level: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }>>;
        appearance: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
        model: z.ZodObject<{
            can_connect_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
            display_name: z.ZodString;
            manufacturer_display_name: z.ZodString;
            has_built_in_keypad: z.ZodOptional<z.ZodBoolean>;
            offline_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            online_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            accessory_keypad_supported: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }>;
        has_direct_power: z.ZodOptional<z.ZodBoolean>;
        battery_level: z.ZodOptional<z.ZodNumber>;
        battery: z.ZodOptional<z.ZodObject<{
            level: z.ZodNumber;
            status: z.ZodEnum<["critical", "low", "good", "full"]>;
        }, "strip", z.ZodTypeAny, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }>>;
        manufacturer: z.ZodOptional<z.ZodString>;
        image_url: z.ZodOptional<z.ZodString>;
        image_alt_text: z.ZodOptional<z.ZodString>;
        serial_number: z.ZodOptional<z.ZodString>;
        online_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        offline_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        supports_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
        supports_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
        noise_level_decibels: z.ZodOptional<z.ZodNumber>;
        currently_triggering_noise_threshold_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    }, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        appearance: {
            name: string;
        };
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        serial_number?: string | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        has_direct_power?: boolean | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
        supports_accessory_keypad?: boolean | undefined;
        supports_offline_access_codes?: boolean | undefined;
        noise_level_decibels?: number | undefined;
        currently_triggering_noise_threshold_ids?: string[] | undefined;
    }>, z.ZodObject<{
        assa_abloy_credential_service_metadata: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            has_active_endpoint: z.ZodBoolean;
            endpoints: z.ZodArray<z.ZodObject<{
                endpoint_id: z.ZodString;
                is_active: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                endpoint_id: string;
                is_active: boolean;
            }, {
                endpoint_id: string;
                is_active: boolean;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        }, {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        }>>>;
    }, "strip", z.ZodTypeAny, {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    }, {
        assa_abloy_credential_service_metadata?: {
            has_active_endpoint: boolean;
            endpoints: {
                endpoint_id: string;
                is_active: boolean;
            }[];
        } | undefined;
    }>>, z.ZodObject<{
        august_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodString;
            lock_name: z.ZodString;
            house_name: z.ZodString;
            has_keypad: z.ZodBoolean;
            keypad_battery_level: z.ZodOptional<z.ZodString>;
            model: z.ZodOptional<z.ZodString>;
            house_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        }, {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        }>>;
        avigilon_alta_metadata: z.ZodOptional<z.ZodObject<{
            entry_name: z.ZodString;
            org_name: z.ZodString;
            zone_id: z.ZodNumber;
            zone_name: z.ZodString;
            site_id: z.ZodNumber;
            site_name: z.ZodString;
            entry_relays_total_count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        }, {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        }>>;
        schlage_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            access_code_length: z.ZodNullable<z.ZodNumber>;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        }>>;
        smartthings_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
            location_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        }>>;
        lockly_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        }>>;
        nuki_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            keypad_battery_critical: z.ZodOptional<z.ZodBoolean>;
            keypad_paired: z.ZodOptional<z.ZodBoolean>;
            keypad_2_paired: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        }, {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        }>>;
        kwikset_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            model_number: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            model_number: string;
        }, {
            device_id: string;
            device_name: string;
            model_number: string;
        }>>;
        salto_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodString;
            customer_reference: z.ZodString;
            lock_type: z.ZodString;
            battery_level: z.ZodString;
            locked_state: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        }, {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        }>>;
        genie_metadata: z.ZodOptional<z.ZodObject<{
            device_name: z.ZodString;
            door_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            door_name: string;
        }, {
            device_name: string;
            door_name: string;
        }>>;
        brivo_metadata: z.ZodOptional<z.ZodObject<{
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
        }, {
            device_name: string;
        }>>;
        igloo_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            bridge_id: z.ZodString;
            model: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        }, {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        }>>;
        noiseaware_metadata: z.ZodOptional<z.ZodObject<{
            device_model: z.ZodEnum<["indoor", "outdoor"]>;
            noise_level_nrs: z.ZodNumber;
            noise_level_decibel: z.ZodNumber;
            device_name: z.ZodString;
            device_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        }, {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        }>>;
        minut_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            latest_sensor_values: z.ZodObject<{
                temperature: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                sound: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                humidity: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                pressure: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
                accelerometer_z: z.ZodObject<{
                    time: z.ZodString;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    time: string;
                }, {
                    value: number;
                    time: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            }, {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            }>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        }, {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        }>>;
        four_suites_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            device_name: z.ZodString;
            reclose_delay_in_seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        }, {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        }>>;
        two_n_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_name: string;
        }, {
            device_id: number;
            device_name: string;
        }>>;
        controlbyweb_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            relay_name: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        }, {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        }>>;
        ttlock_metadata: z.ZodOptional<z.ZodObject<{
            lock_id: z.ZodNumber;
            lock_alias: z.ZodString;
            feature_value: z.ZodString;
            features: z.ZodObject<{
                passcode: z.ZodBoolean;
                passcode_management: z.ZodBoolean;
                unlock_via_gateway: z.ZodBoolean;
                lock_command: z.ZodBoolean;
                incomplete_keyboard_passcode: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            }, {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            }>;
            has_gateway: z.ZodOptional<z.ZodBoolean>;
            wireless_keypads: z.ZodOptional<z.ZodArray<z.ZodObject<{
                wireless_keypad_id: z.ZodNumber;
                wireless_keypad_name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }, {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        }, {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        }>>;
        seam_bridge_metadata: z.ZodOptional<z.ZodObject<{
            unlock_method: z.ZodOptional<z.ZodEnum<["bridge", "doorking"]>>;
            device_num: z.ZodNumber;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        }, {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        }>>;
        igloohome_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            bridge_id: z.ZodOptional<z.ZodString>;
            bridge_name: z.ZodOptional<z.ZodString>;
            keypad_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        }, {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        }>>;
        nest_metadata: z.ZodOptional<z.ZodObject<{
            nest_device_id: z.ZodString;
            device_name: z.ZodString;
            custom_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        }, {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        }>>;
        ecobee_metadata: z.ZodOptional<z.ZodObject<{
            ecobee_device_id: z.ZodString;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            ecobee_device_id: string;
        }, {
            device_name: string;
            ecobee_device_id: string;
        }>>;
        honeywell_resideo_metadata: z.ZodOptional<z.ZodObject<{
            honeywell_resideo_device_id: z.ZodString;
            device_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_name: string;
            honeywell_resideo_device_id: string;
        }, {
            device_name: string;
            honeywell_resideo_device_id: string;
        }>>;
        hubitat_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            device_label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            device_label: string;
        }, {
            device_id: string;
            device_name: string;
            device_label: string;
        }>>;
        dormakaba_oracode_metadata: z.ZodOptional<z.ZodObject<{
            door_id: z.ZodOptional<z.ZodNumber>;
            door_name: z.ZodString;
            device_id: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
            door_is_wireless: z.ZodBoolean;
            site_id: z.ZodNullable<z.ZodNumber>;
            site_name: z.ZodString;
            iana_timezone: z.ZodOptional<z.ZodString>;
            predefined_time_slots: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                prefix: z.ZodNumber;
                check_in_time: z.ZodString;
                check_out_time: z.ZodString;
                is_24_hour: z.ZodBoolean;
                is_biweekly_mode: z.ZodBoolean;
                is_one_shot: z.ZodBoolean;
                is_master: z.ZodBoolean;
                ext_dormakaba_oracode_user_level_prefix: z.ZodNumber;
                dormakaba_oracode_user_level_id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }, {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        }, {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        }>>;
        wyze_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodString;
            device_name: z.ZodString;
            product_name: z.ZodString;
            product_type: z.ZodString;
            product_model: z.ZodString;
            device_info_model: z.ZodString;
            keypad_uuid: z.ZodOptional<z.ZodString>;
            locker_status_hardlock: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        }, {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        }>>;
        tedee_metadata: z.ZodOptional<z.ZodObject<{
            device_id: z.ZodNumber;
            serial_number: z.ZodString;
            device_name: z.ZodString;
            device_model: z.ZodString;
            bridge_id: z.ZodNumber;
            bridge_name: z.ZodString;
            keypad_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        }, {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        }>>;
        visionline_metadata: z.ZodOptional<z.ZodObject<{
            encoder_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            encoder_id: string;
        }, {
            encoder_id: string;
        }>>;
        akiles_metadata: z.ZodOptional<z.ZodObject<{
            gadget_name: z.ZodString;
            gadget_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            gadget_name: string;
            gadget_id: string;
        }, {
            gadget_name: string;
            gadget_id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    }, {
        august_metadata?: {
            lock_id: string;
            lock_name: string;
            house_name: string;
            has_keypad: boolean;
            keypad_battery_level?: string | undefined;
            model?: string | undefined;
            house_id?: string | undefined;
        } | undefined;
        avigilon_alta_metadata?: {
            entry_name: string;
            org_name: string;
            zone_id: number;
            zone_name: string;
            site_id: number;
            site_name: string;
            entry_relays_total_count: number;
        } | undefined;
        schlage_metadata?: {
            device_id: string;
            device_name: string;
            access_code_length: number | null;
            model?: string | undefined;
        } | undefined;
        smartthings_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
            location_id?: string | undefined;
        } | undefined;
        lockly_metadata?: {
            device_id: string;
            device_name: string;
            model?: string | undefined;
        } | undefined;
        nuki_metadata?: {
            device_id: string;
            device_name: string;
            keypad_battery_critical?: boolean | undefined;
            keypad_paired?: boolean | undefined;
            keypad_2_paired?: boolean | undefined;
        } | undefined;
        kwikset_metadata?: {
            device_id: string;
            device_name: string;
            model_number: string;
        } | undefined;
        salto_metadata?: {
            lock_type: string;
            lock_id: string;
            customer_reference: string;
            battery_level: string;
            locked_state: string;
            model?: string | undefined;
        } | undefined;
        genie_metadata?: {
            device_name: string;
            door_name: string;
        } | undefined;
        brivo_metadata?: {
            device_name: string;
        } | undefined;
        igloo_metadata?: {
            device_id: string;
            bridge_id: string;
            model?: string | undefined;
        } | undefined;
        noiseaware_metadata?: {
            device_id: string;
            device_model: "indoor" | "outdoor";
            device_name: string;
            noise_level_nrs: number;
            noise_level_decibel: number;
        } | undefined;
        minut_metadata?: {
            device_id: string;
            device_name: string;
            latest_sensor_values: {
                temperature: {
                    value: number;
                    time: string;
                };
                sound: {
                    value: number;
                    time: string;
                };
                humidity: {
                    value: number;
                    time: string;
                };
                pressure: {
                    value: number;
                    time: string;
                };
                accelerometer_z: {
                    value: number;
                    time: string;
                };
            };
        } | undefined;
        four_suites_metadata?: {
            device_id: number;
            device_name: string;
            reclose_delay_in_seconds: number;
        } | undefined;
        two_n_metadata?: {
            device_id: number;
            device_name: string;
        } | undefined;
        controlbyweb_metadata?: {
            device_id: string;
            device_name: string;
            relay_name: string | null;
        } | undefined;
        ttlock_metadata?: {
            lock_id: number;
            lock_alias: string;
            feature_value: string;
            features: {
                passcode: boolean;
                passcode_management: boolean;
                unlock_via_gateway: boolean;
                lock_command: boolean;
                incomplete_keyboard_passcode: boolean;
            };
            has_gateway?: boolean | undefined;
            wireless_keypads?: {
                wireless_keypad_id: number;
                wireless_keypad_name: string;
            }[] | undefined;
        } | undefined;
        seam_bridge_metadata?: {
            name: string;
            device_num: number;
            unlock_method?: "bridge" | "doorking" | undefined;
        } | undefined;
        igloohome_metadata?: {
            device_id: string;
            device_name: string;
            bridge_id?: string | undefined;
            bridge_name?: string | undefined;
            keypad_id?: string | undefined;
        } | undefined;
        nest_metadata?: {
            device_name: string;
            nest_device_id: string;
            custom_name: string;
        } | undefined;
        ecobee_metadata?: {
            device_name: string;
            ecobee_device_id: string;
        } | undefined;
        honeywell_resideo_metadata?: {
            device_name: string;
            honeywell_resideo_device_id: string;
        } | undefined;
        hubitat_metadata?: {
            device_id: string;
            device_name: string;
            device_label: string;
        } | undefined;
        dormakaba_oracode_metadata?: {
            site_id: number | null;
            site_name: string;
            door_name: string;
            door_is_wireless: boolean;
            device_id?: string | number | undefined;
            door_id?: number | undefined;
            iana_timezone?: string | undefined;
            predefined_time_slots?: {
                name: string;
                prefix: number;
                check_in_time: string;
                check_out_time: string;
                is_24_hour: boolean;
                is_biweekly_mode: boolean;
                is_one_shot: boolean;
                is_master: boolean;
                ext_dormakaba_oracode_user_level_prefix: number;
                dormakaba_oracode_user_level_id: string;
            }[] | undefined;
        } | undefined;
        wyze_metadata?: {
            device_id: string;
            device_name: string;
            product_name: string;
            product_type: string;
            product_model: string;
            device_info_model: string;
            keypad_uuid?: string | undefined;
            locker_status_hardlock?: number | undefined;
        } | undefined;
        tedee_metadata?: {
            device_id: number;
            device_model: string;
            device_name: string;
            bridge_id: number;
            bridge_name: string;
            serial_number: string;
            keypad_id?: number | undefined;
        } | undefined;
        visionline_metadata?: {
            encoder_id: string;
        } | undefined;
        akiles_metadata?: {
            gadget_name: string;
            gadget_id: string;
        } | undefined;
    }>>, z.ZodIntersection<z.ZodObject<z.objectUtil.extendShape<{
        _experimental_supported_code_from_access_codes_lengths: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        code_constraints: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            constraint_type: z.ZodEnum<["no_zeros", "cannot_start_with_12", "no_triple_consecutive_ints", "cannot_specify_pin_code", "pin_code_matches_existing_set", "start_date_in_future", "no_ascending_or_descending_sequence", "at_least_three_unique_digits", "cannot_contain_089", "cannot_contain_0789"]>;
        }, "strip", z.ZodTypeAny, {
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        }, {
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        }>, z.ZodObject<{
            constraint_type: z.ZodEnum<["name_length", "name_must_be_unique"]>;
            min_length: z.ZodOptional<z.ZodNumber>;
            max_length: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        }, {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        }>]>, "many">>>;
        supported_code_lengths: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        max_active_codes_supported: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        supports_backup_access_code_pool: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        has_native_entry_events: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }, {
        locked: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        keypad_battery: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            level: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            level: number;
        }, {
            level: number;
        }>>>;
        door_open: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    }>, "strip", z.ZodTypeAny, {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    }, {
        _experimental_supported_code_from_access_codes_lengths?: number[] | undefined;
        code_constraints?: ({
            constraint_type: "no_zeros" | "cannot_start_with_12" | "no_triple_consecutive_ints" | "cannot_specify_pin_code" | "pin_code_matches_existing_set" | "start_date_in_future" | "no_ascending_or_descending_sequence" | "at_least_three_unique_digits" | "cannot_contain_089" | "cannot_contain_0789";
        } | {
            constraint_type: "name_length" | "name_must_be_unique";
            min_length?: number | undefined;
            max_length?: number | undefined;
        })[] | undefined;
        supported_code_lengths?: number[] | undefined;
        max_active_codes_supported?: number | undefined;
        supports_backup_access_code_pool?: boolean | undefined;
        has_native_entry_events?: boolean | undefined;
        locked?: boolean | undefined;
        keypad_battery?: {
            level: number;
        } | undefined;
        door_open?: boolean | undefined;
    }>, z.ZodObject<{
        temperature_fahrenheit: z.ZodOptional<z.ZodNumber>;
        temperature_celsius: z.ZodOptional<z.ZodNumber>;
        relative_humidity: z.ZodOptional<z.ZodNumber>;
        available_hvac_mode_settings: z.ZodOptional<z.ZodArray<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>, "many">>;
        available_fan_mode_settings: z.ZodOptional<z.ZodArray<z.ZodEnum<["auto", "on", "circulate"]>, "many">>;
        is_heating: z.ZodOptional<z.ZodBoolean>;
        is_cooling: z.ZodOptional<z.ZodBoolean>;
        is_fan_running: z.ZodOptional<z.ZodBoolean>;
        fan_mode_setting: z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>;
        is_temporary_manual_override_active: z.ZodOptional<z.ZodBoolean>;
        current_climate_setting: z.ZodOptional<z.ZodObject<{
            climate_preset_key: z.ZodOptional<z.ZodString>;
            can_edit: z.ZodOptional<z.ZodBoolean>;
            can_delete: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
            display_name: z.ZodOptional<z.ZodString>;
            fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
            hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }>>;
        default_climate_setting: z.ZodOptional<z.ZodObject<{
            climate_preset_key: z.ZodOptional<z.ZodString>;
            can_edit: z.ZodOptional<z.ZodBoolean>;
            can_delete: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
            display_name: z.ZodOptional<z.ZodString>;
            fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
            hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
            manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }, {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        }>>;
        available_climate_presets: z.ZodOptional<z.ZodArray<z.ZodObject<{
            climate_preset_key: z.ZodString;
            can_edit: z.ZodBoolean;
            can_delete: z.ZodBoolean;
            name: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
            display_name: z.ZodString;
            fan_mode_setting: z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>;
            hvac_mode_setting: z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>;
            cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
            heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
            cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
            heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
            manual_override_allowed: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }, {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }>, "many">>;
        fallback_climate_preset_key: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
        active_thermostat_schedule: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodObject<{
            thermostat_schedule_id: z.ZodString;
            device_id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            climate_preset_key: z.ZodString;
            max_override_period_minutes: z.ZodNumber;
            starts_at: z.ZodString;
            ends_at: z.ZodString;
            created_at: z.ZodString;
            errors: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        }, {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        }>>>>;
        min_cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        min_cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        max_cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        max_cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        min_heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        min_heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        max_heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
        max_heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
        min_heating_cooling_delta_celsius: z.ZodOptional<z.ZodNumber>;
        min_heating_cooling_delta_fahrenheit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    }, {
        fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
        temperature_fahrenheit?: number | undefined;
        temperature_celsius?: number | undefined;
        relative_humidity?: number | undefined;
        available_hvac_mode_settings?: ("off" | "heat" | "cool" | "heat_cool")[] | undefined;
        available_fan_mode_settings?: ("auto" | "on" | "circulate")[] | undefined;
        is_heating?: boolean | undefined;
        is_cooling?: boolean | undefined;
        is_fan_running?: boolean | undefined;
        is_temporary_manual_override_active?: boolean | undefined;
        current_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        default_climate_setting?: {
            climate_preset_key?: string | undefined;
            can_edit?: boolean | undefined;
            can_delete?: boolean | undefined;
            name?: string | null | undefined;
            display_name?: string | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed?: boolean | undefined;
        } | undefined;
        available_climate_presets?: {
            climate_preset_key: string;
            can_edit: boolean;
            can_delete: boolean;
            display_name: string;
            manual_override_allowed: boolean;
            name?: string | null | undefined;
            fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
            hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
        }[] | undefined;
        fallback_climate_preset_key?: string | null | undefined;
        active_thermostat_schedule?: {
            created_at: string;
            climate_preset_key: string;
            thermostat_schedule_id: string;
            device_id: string;
            max_override_period_minutes: number;
            starts_at: string;
            ends_at: string;
            errors?: any;
            name?: string | undefined;
        } | null | undefined;
        min_cooling_set_point_celsius?: number | undefined;
        min_cooling_set_point_fahrenheit?: number | undefined;
        max_cooling_set_point_celsius?: number | undefined;
        max_cooling_set_point_fahrenheit?: number | undefined;
        min_heating_set_point_celsius?: number | undefined;
        min_heating_set_point_fahrenheit?: number | undefined;
        max_heating_set_point_celsius?: number | undefined;
        max_heating_set_point_fahrenheit?: number | undefined;
        min_heating_cooling_delta_celsius?: number | undefined;
        min_heating_cooling_delta_fahrenheit?: number | undefined;
    }>>>;
    location: z.ZodNullable<z.ZodObject<{
        location_name: z.ZodOptional<z.ZodString>;
        timezone: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        location_name?: string | undefined;
        timezone?: string | undefined;
    }, {
        location_name?: string | undefined;
        timezone?: string | undefined;
    }>>;
    connected_account_id: z.ZodString;
    workspace_id: z.ZodString;
    errors: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_device_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
        is_device_error: true;
    }, {
        message: string;
        error_code: string;
        is_device_error: true;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
        is_connected_account_error: z.ZodLiteral<true>;
    }, {
        error_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }, {
        message: string;
        is_connected_account_error: true;
        error_code: string;
    }>]>, "many">;
    warnings: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        message: z.ZodString;
    }, {
        warning_code: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        warning_code: string;
    }, {
        message: string;
        warning_code: string;
    }>, "many">;
    created_at: z.ZodString;
    is_managed: z.ZodLiteral<true>;
    custom_metadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
}, z.objectUtil.extendShape<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat: z.ZodOptional<z.ZodBoolean>;
    can_hvac_cool: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat_cool: z.ZodOptional<z.ZodBoolean>;
    can_turn_off_hvac: z.ZodOptional<z.ZodBoolean>;
}, {
    can_simulate_removal: z.ZodOptional<z.ZodBoolean>;
    can_simulate_connection: z.ZodOptional<z.ZodBoolean>;
    can_simulate_disconnection: z.ZodOptional<z.ZodBoolean>;
}>>, "connected_account_id" | "created_at" | "errors" | "warnings" | "device_id" | "device_type" | "capabilities_supported" | "location" | "workspace_id">, {
    is_managed: z.ZodLiteral<false>;
    properties: z.ZodObject<Pick<{
        online: z.ZodBoolean;
        name: z.ZodString;
        accessory_keypad: z.ZodOptional<z.ZodObject<{
            is_connected: z.ZodBoolean;
            battery: z.ZodOptional<z.ZodObject<{
                level: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                level: number;
            }, {
                level: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }, {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        }>>;
        appearance: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
        model: z.ZodObject<{
            can_connect_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
            display_name: z.ZodString;
            manufacturer_display_name: z.ZodString;
            has_built_in_keypad: z.ZodOptional<z.ZodBoolean>;
            offline_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            online_access_codes_supported: z.ZodOptional<z.ZodBoolean>;
            accessory_keypad_supported: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }, {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        }>;
        has_direct_power: z.ZodOptional<z.ZodBoolean>;
        battery_level: z.ZodOptional<z.ZodNumber>;
        battery: z.ZodOptional<z.ZodObject<{
            level: z.ZodNumber;
            status: z.ZodEnum<["critical", "low", "good", "full"]>;
        }, "strip", z.ZodTypeAny, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }, {
            status: "critical" | "low" | "good" | "full";
            level: number;
        }>>;
        manufacturer: z.ZodOptional<z.ZodString>;
        image_url: z.ZodOptional<z.ZodString>;
        image_alt_text: z.ZodOptional<z.ZodString>;
        serial_number: z.ZodOptional<z.ZodString>;
        online_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        offline_access_codes_enabled: z.ZodOptional<z.ZodBoolean>;
        supports_accessory_keypad: z.ZodOptional<z.ZodBoolean>;
        supports_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
        noise_level_decibels: z.ZodOptional<z.ZodNumber>;
        currently_triggering_noise_threshold_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "battery" | "name" | "manufacturer" | "model" | "battery_level" | "online" | "accessory_keypad" | "image_url" | "image_alt_text" | "online_access_codes_enabled" | "offline_access_codes_enabled">, "strip", z.ZodTypeAny, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
    }, {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
    }>;
}>, z.objectUtil.extendShape<{
    can_remotely_unlock: z.ZodOptional<z.ZodBoolean>;
    can_remotely_lock: z.ZodOptional<z.ZodBoolean>;
    can_program_offline_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_program_online_access_codes: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat: z.ZodOptional<z.ZodBoolean>;
    can_hvac_cool: z.ZodOptional<z.ZodBoolean>;
    can_hvac_heat_cool: z.ZodOptional<z.ZodBoolean>;
    can_turn_off_hvac: z.ZodOptional<z.ZodBoolean>;
}, {
    can_simulate_removal: z.ZodOptional<z.ZodBoolean>;
    can_simulate_connection: z.ZodOptional<z.ZodBoolean>;
    can_simulate_disconnection: z.ZodOptional<z.ZodBoolean>;
}>>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    device_id: string;
    device_type: ("akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock") | ("noiseaware_activity_zone" | "minut_sensor") | ("ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat") | ("ios_phone" | "android_phone") | "visionline_encoder";
    capabilities_supported: ("phone" | "access_code" | "lock" | "noise_detection" | "thermostat" | "battery")[];
    properties: {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
    };
    location: {
        location_name?: string | undefined;
        timezone?: string | undefined;
    } | null;
    workspace_id: string;
    is_managed: false;
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    errors: ({
        message: string;
        is_connected_account_error: true;
        error_code: string;
    } | {
        message: string;
        error_code: string;
        is_device_error: true;
    })[];
    warnings: {
        message: string;
        warning_code: string;
    }[];
    device_id: string;
    device_type: ("akuvox_lock" | "august_lock" | "brivo_access_point" | "butterflymx_panel" | "avigilon_alta_entry" | "doorking_lock" | "genie_door" | "igloo_lock" | "linear_lock" | "lockly_lock" | "kwikset_lock" | "nuki_lock" | "salto_lock" | "schlage_lock" | "seam_relay" | "smartthings_lock" | "wyze_lock" | "yale_lock" | "two_n_intercom" | "controlbyweb_device" | "ttlock_lock" | "igloohome_lock" | "hubitat_lock" | "four_suites_door" | "dormakaba_oracode_door" | "tedee_lock" | "akiles_lock") | ("noiseaware_activity_zone" | "minut_sensor") | ("ecobee_thermostat" | "nest_thermostat" | "honeywell_resideo_thermostat") | ("ios_phone" | "android_phone") | "visionline_encoder";
    capabilities_supported: ("phone" | "access_code" | "lock" | "noise_detection" | "thermostat" | "battery")[];
    properties: {
        name: string;
        model: {
            display_name: string;
            manufacturer_display_name: string;
            can_connect_accessory_keypad?: boolean | undefined;
            has_built_in_keypad?: boolean | undefined;
            offline_access_codes_supported?: boolean | undefined;
            online_access_codes_supported?: boolean | undefined;
            accessory_keypad_supported?: boolean | undefined;
        };
        online: boolean;
        battery?: {
            status: "critical" | "low" | "good" | "full";
            level: number;
        } | undefined;
        manufacturer?: string | undefined;
        battery_level?: number | undefined;
        accessory_keypad?: {
            is_connected: boolean;
            battery?: {
                level: number;
            } | undefined;
        } | undefined;
        image_url?: string | undefined;
        image_alt_text?: string | undefined;
        online_access_codes_enabled?: boolean | undefined;
        offline_access_codes_enabled?: boolean | undefined;
    };
    location: {
        location_name?: string | undefined;
        timezone?: string | undefined;
    } | null;
    workspace_id: string;
    is_managed: false;
    can_remotely_unlock?: boolean | undefined;
    can_remotely_lock?: boolean | undefined;
    can_program_offline_access_codes?: boolean | undefined;
    can_program_online_access_codes?: boolean | undefined;
    can_hvac_heat?: boolean | undefined;
    can_hvac_cool?: boolean | undefined;
    can_hvac_heat_cool?: boolean | undefined;
    can_turn_off_hvac?: boolean | undefined;
    can_simulate_removal?: boolean | undefined;
    can_simulate_connection?: boolean | undefined;
    can_simulate_disconnection?: boolean | undefined;
}>;
type UnmanagedDevice = z.infer<typeof unmanaged_device>;

declare const seam_event: z.ZodDiscriminatedUnion<"event_type", [z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.created">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.created";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.created";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.changed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.changed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.changed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.scheduled_on_device">;
    code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    code: string;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.scheduled_on_device";
}, {
    code: string;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.scheduled_on_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.set_on_device">;
    code: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    code: string;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.set_on_device";
}, {
    code: string;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.set_on_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.removed_from_device">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.removed_from_device";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.removed_from_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.delay_in_setting_on_device">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.delay_in_setting_on_device";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.delay_in_setting_on_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.failed_to_set_on_device">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.failed_to_set_on_device";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.failed_to_set_on_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.deleted">;
    code: z.ZodNullable<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    code: string | null;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.deleted";
}, {
    code: string | null;
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.deleted";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.delay_in_removing_from_device">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.delay_in_removing_from_device";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.delay_in_removing_from_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.failed_to_remove_from_device">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.failed_to_remove_from_device";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.failed_to_remove_from_device";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.modified_external_to_seam">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.modified_external_to_seam";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.modified_external_to_seam";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.deleted_external_to_seam">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.deleted_external_to_seam";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.deleted_external_to_seam";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.backup_access_code_pulled">;
    backup_access_code_id: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.backup_access_code_pulled";
    backup_access_code_id: string;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.backup_access_code_pulled";
    backup_access_code_id: string;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.unmanaged.converted_to_managed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.converted_to_managed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.converted_to_managed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.unmanaged.failed_to_convert_to_managed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.failed_to_convert_to_managed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.failed_to_convert_to_managed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.unmanaged.created">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.created";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.created";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    access_code_id: z.ZodString;
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"access_code.unmanaged.removed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.removed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    access_code_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "access_code.unmanaged.removed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
}>, {}>, {
    event_type: z.ZodLiteral<"acs_system.connected">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_system.connected";
    connected_account_id?: string | undefined;
}, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_system.connected";
    connected_account_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
}>, {}>, {
    event_type: z.ZodLiteral<"acs_system.added">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_system.added";
    connected_account_id?: string | undefined;
}, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_system.added";
    connected_account_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
}>, {
    acs_credential_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"acs_credential.deleted">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    acs_credential_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_credential.deleted";
    connected_account_id?: string | undefined;
}, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    acs_credential_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_credential.deleted";
    connected_account_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodOptional<z.ZodString>;
    acs_system_id: z.ZodString;
}>, {
    acs_user_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"acs_user.deleted">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    acs_user_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_user.deleted";
    connected_account_id?: string | undefined;
}, {
    created_at: string;
    workspace_id: string;
    acs_system_id: string;
    acs_user_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "acs_user.deleted";
    connected_account_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    client_session_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"client_session.deleted">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    client_session_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "client_session.deleted";
}, {
    created_at: string;
    workspace_id: string;
    client_session_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "client_session.deleted";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.connected">;
    connect_webview_id: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.connected";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.connected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.created">;
    connect_webview_id: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.created";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.created";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.successful_login">;
    connect_webview_id: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.successful_login";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.successful_login";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.disconnected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.disconnected";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.disconnected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.completed_first_sync">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.completed_first_sync";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.completed_first_sync";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.deleted">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.deleted";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.deleted";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connected_account.completed_first_sync_after_reconnection">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.completed_first_sync_after_reconnection";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connected_account.completed_first_sync_after_reconnection";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connect_webview_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connect_webview.login_succeeded">;
    connected_account_id: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connect_webview.login_succeeded";
}, {
    connected_account_id: string;
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connect_webview.login_succeeded";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    connect_webview_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"connect_webview.login_failed">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connect_webview.login_failed";
}, {
    created_at: string;
    workspace_id: string;
    connect_webview_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "connect_webview.login_failed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.connected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.converted_to_unmanaged">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.converted_to_unmanaged";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.converted_to_unmanaged";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.unmanaged.converted_to_managed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.converted_to_managed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.converted_to_managed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.unmanaged.connected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.connected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.connected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.disconnected">;
    error_code: z.ZodEnum<["account_disconnected", "hub_disconnected", "device_disconnected"]>;
}>, "strip", z.ZodTypeAny, {
    error_code: "account_disconnected" | "hub_disconnected" | "device_disconnected";
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.disconnected";
}, {
    error_code: "account_disconnected" | "hub_disconnected" | "device_disconnected";
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.disconnected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.unmanaged.disconnected">;
    error_code: z.ZodEnum<["account_disconnected", "hub_disconnected", "device_disconnected"]>;
}>, "strip", z.ZodTypeAny, {
    error_code: "account_disconnected" | "hub_disconnected" | "device_disconnected";
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.disconnected";
}, {
    error_code: "account_disconnected" | "hub_disconnected" | "device_disconnected";
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.unmanaged.disconnected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.tampered">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.tampered";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.tampered";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.low_battery">;
    battery_level: z.ZodNumber;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    battery_level: number;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.low_battery";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    battery_level: number;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.low_battery";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.battery_status_changed">;
    battery_status: z.ZodEnum<["critical", "low", "good", "full"]>;
    battery_level: z.ZodNumber;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    battery_level: number;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.battery_status_changed";
    battery_status: "critical" | "low" | "good" | "full";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    battery_level: number;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.battery_status_changed";
    battery_status: "critical" | "low" | "good" | "full";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.removed">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.removed";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.removed";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.deleted">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.deleted";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.deleted";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.third_party_integration_detected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.third_party_integration_detected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.third_party_integration_detected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.third_party_integration_no_longer_detected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.third_party_integration_no_longer_detected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.third_party_integration_no_longer_detected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.salto.privacy_mode_activated">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.salto.privacy_mode_activated";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.salto.privacy_mode_activated";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.salto.privacy_mode_deactivated">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.salto.privacy_mode_deactivated";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.salto.privacy_mode_deactivated";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.connection_became_flaky">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connection_became_flaky";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connection_became_flaky";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.connection_stabilized">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connection_stabilized";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.connection_stabilized";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.error.subscription_required">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.error.subscription_required";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.error.subscription_required";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.error.subscription_required.resolved">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.error.subscription_required.resolved";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.error.subscription_required.resolved";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.accessory_keypad_connected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.accessory_keypad_connected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.accessory_keypad_connected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"device.accessory_keypad_disconnected">;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.accessory_keypad_disconnected";
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "device.accessory_keypad_disconnected";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"noise_sensor.noise_threshold_triggered">;
    noise_level_decibels: z.ZodOptional<z.ZodNumber>;
    noise_level_nrs: z.ZodOptional<z.ZodNumber>;
    noise_threshold_id: z.ZodOptional<z.ZodString>;
    noise_threshold_name: z.ZodOptional<z.ZodString>;
    noiseaware_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    minut_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "noise_sensor.noise_threshold_triggered";
    noiseaware_metadata?: Record<string, unknown> | undefined;
    noise_level_nrs?: number | undefined;
    minut_metadata?: Record<string, unknown> | undefined;
    noise_level_decibels?: number | undefined;
    noise_threshold_id?: string | undefined;
    noise_threshold_name?: string | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "noise_sensor.noise_threshold_triggered";
    noiseaware_metadata?: Record<string, unknown> | undefined;
    noise_level_nrs?: number | undefined;
    minut_metadata?: Record<string, unknown> | undefined;
    noise_level_decibels?: number | undefined;
    noise_threshold_id?: string | undefined;
    noise_threshold_name?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"lock.locked">;
    access_code_id: z.ZodOptional<z.ZodString>;
    action_attempt_id: z.ZodOptional<z.ZodString>;
    method: z.ZodEnum<["keycode", "manual", "automatic", "unknown", "seamapi"]>;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    method: "unknown" | "keycode" | "manual" | "automatic" | "seamapi";
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.locked";
    access_code_id?: string | undefined;
    action_attempt_id?: string | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    method: "unknown" | "keycode" | "manual" | "automatic" | "seamapi";
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.locked";
    access_code_id?: string | undefined;
    action_attempt_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"lock.unlocked">;
    access_code_id: z.ZodOptional<z.ZodString>;
    action_attempt_id: z.ZodOptional<z.ZodString>;
    method: z.ZodEnum<["keycode", "manual", "automatic", "unknown", "seamapi"]>;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    method: "unknown" | "keycode" | "manual" | "automatic" | "seamapi";
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.unlocked";
    access_code_id?: string | undefined;
    action_attempt_id?: string | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    method: "unknown" | "keycode" | "manual" | "automatic" | "seamapi";
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.unlocked";
    access_code_id?: string | undefined;
    action_attempt_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"lock.access_denied">;
    access_code_id: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.access_denied";
    access_code_id?: string | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "lock.access_denied";
    access_code_id?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"thermostat.climate_preset_activated">;
    thermostat_schedule_id: z.ZodNullable<z.ZodString>;
    climate_preset_key: z.ZodString;
    is_fallback_climate_preset: z.ZodBoolean;
}>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    climate_preset_key: string;
    thermostat_schedule_id: string | null;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "thermostat.climate_preset_activated";
    is_fallback_climate_preset: boolean;
}, {
    connected_account_id: string;
    created_at: string;
    climate_preset_key: string;
    thermostat_schedule_id: string | null;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "thermostat.climate_preset_activated";
    is_fallback_climate_preset: boolean;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
    connected_account_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"thermostat.manually_adjusted">;
}>, Pick<{
    climate_preset_key: z.ZodOptional<z.ZodString>;
    can_edit: z.ZodOptional<z.ZodBoolean>;
    can_delete: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
    display_name: z.ZodOptional<z.ZodString>;
    fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
    hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool"]>>>;
    cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
}, "fan_mode_setting" | "hvac_mode_setting" | "cooling_set_point_celsius" | "heating_set_point_celsius" | "cooling_set_point_fahrenheit" | "heating_set_point_fahrenheit">>, "strip", z.ZodTypeAny, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "thermostat.manually_adjusted";
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
}, {
    connected_account_id: string;
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "thermostat.manually_adjusted";
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    enrollment_automation_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"enrollment_automation.deleted">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    workspace_id: string;
    enrollment_automation_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "enrollment_automation.deleted";
}, {
    created_at: string;
    workspace_id: string;
    enrollment_automation_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "enrollment_automation.deleted";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    event_id: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    occurred_at: z.ZodString;
}, {
    device_id: z.ZodString;
}>, {
    event_type: z.ZodLiteral<"phone.deactivated">;
}>, "strip", z.ZodTypeAny, {
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "phone.deactivated";
}, {
    created_at: string;
    device_id: string;
    workspace_id: string;
    event_id: string;
    occurred_at: string;
    event_type: "phone.deactivated";
}>]>;
type SeamEvent = z.infer<typeof seam_event>;
type SeamEventType = SeamEvent['event_type'];

declare const noise_threshold: z.ZodObject<{
    noise_threshold_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodString;
    noise_threshold_nrs: z.ZodOptional<z.ZodNumber>;
    starts_daily_at: z.ZodString;
    ends_daily_at: z.ZodString;
    noise_threshold_decibels: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    name: string;
    device_id: string;
    noise_threshold_id: string;
    starts_daily_at: string;
    ends_daily_at: string;
    noise_threshold_decibels: number;
    noise_threshold_nrs?: number | undefined;
}, {
    name: string;
    device_id: string;
    noise_threshold_id: string;
    starts_daily_at: string;
    ends_daily_at: string;
    noise_threshold_decibels: number;
    noise_threshold_nrs?: number | undefined;
}>;
type NoiseThreshold = z.infer<typeof noise_threshold>;

declare const thermostat_schedule: z.ZodObject<{
    thermostat_schedule_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    climate_preset_key: z.ZodString;
    max_override_period_minutes: z.ZodNumber;
    starts_at: z.ZodString;
    ends_at: z.ZodString;
    created_at: z.ZodString;
    errors: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    created_at: string;
    climate_preset_key: string;
    thermostat_schedule_id: string;
    device_id: string;
    max_override_period_minutes: number;
    starts_at: string;
    ends_at: string;
    errors?: any;
    name?: string | undefined;
}, {
    created_at: string;
    climate_preset_key: string;
    thermostat_schedule_id: string;
    device_id: string;
    max_override_period_minutes: number;
    starts_at: string;
    ends_at: string;
    errors?: any;
    name?: string | undefined;
}>;
type ThermostatSchedule = z.infer<typeof thermostat_schedule>;

declare const user_identity: z.ZodObject<{
    user_identity_id: z.ZodString;
    user_identity_key: z.ZodNullable<z.ZodString>;
    email_address: z.ZodNullable<z.ZodString>;
    phone_number: z.ZodNullable<z.ZodEffects<z.ZodString, string, string>>;
    display_name: z.ZodString;
    full_name: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    workspace_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    created_at: string;
    display_name: string;
    workspace_id: string;
    user_identity_id: string;
    full_name: string | null;
    email_address: string | null;
    phone_number: string | null;
    user_identity_key: string | null;
}, {
    created_at: string;
    display_name: string;
    workspace_id: string;
    user_identity_id: string;
    full_name: string | null;
    email_address: string | null;
    phone_number: string | null;
    user_identity_key: string | null;
}>;
type UserIdentity = z.output<typeof user_identity>;

declare const webhook: z.ZodObject<{
    webhook_id: z.ZodString;
    url: z.ZodString;
    event_types: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    secret: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url: string;
    webhook_id: string;
    event_types?: string[] | undefined;
    secret?: string | undefined;
}, {
    url: string;
    webhook_id: string;
    event_types?: string[] | undefined;
    secret?: string | undefined;
}>;
type Webhook = z.infer<typeof webhook>;

declare const workspace: z.ZodObject<{
    workspace_id: z.ZodString;
    name: z.ZodString;
    company_name: z.ZodString;
    is_sandbox: z.ZodBoolean;
    connect_partner_name: z.ZodNullable<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    workspace_id: string;
    company_name: string;
    is_sandbox: boolean;
    connect_partner_name: string | null;
}, {
    name: string;
    workspace_id: string;
    company_name: string;
    is_sandbox: boolean;
    connect_partner_name: string | null;
}>;
type Workspace = z.infer<typeof workspace>;

declare const schemas_access_code: typeof access_code;
declare const schemas_acs_access_group: typeof acs_access_group;
declare const schemas_acs_credential: typeof acs_credential;
declare const schemas_acs_entrance: typeof acs_entrance;
declare const schemas_acs_system: typeof acs_system;
declare const schemas_acs_user: typeof acs_user;
declare const schemas_action_attempt: typeof action_attempt;
declare const schemas_client_session: typeof client_session;
declare const schemas_connect_webview: typeof connect_webview;
declare const schemas_connected_account: typeof connected_account;
declare const schemas_custom_metadata: typeof custom_metadata;
declare const schemas_device: typeof device;
declare const schemas_device_provider: typeof device_provider;
declare const schemas_noise_threshold: typeof noise_threshold;
declare const schemas_seam_event: typeof seam_event;
declare const schemas_thermostat_schedule: typeof thermostat_schedule;
declare const schemas_unmanaged_access_code: typeof unmanaged_access_code;
declare const schemas_unmanaged_acs_access_group: typeof unmanaged_acs_access_group;
declare const schemas_unmanaged_acs_credential: typeof unmanaged_acs_credential;
declare const schemas_unmanaged_acs_user: typeof unmanaged_acs_user;
declare const schemas_unmanaged_device: typeof unmanaged_device;
declare const schemas_user_identity: typeof user_identity;
declare const schemas_webhook: typeof webhook;
declare const schemas_workspace: typeof workspace;
declare namespace schemas {
  export { schemas_access_code as access_code, schemas_acs_access_group as acs_access_group, schemas_acs_credential as acs_credential, schemas_acs_entrance as acs_entrance, schemas_acs_system as acs_system, schemas_acs_user as acs_user, schemas_action_attempt as action_attempt, schemas_client_session as client_session, schemas_connect_webview as connect_webview, schemas_connected_account as connected_account, schemas_custom_metadata as custom_metadata, schemas_device as device, schemas_device_provider as device_provider, schemas_noise_threshold as noise_threshold, schemas_seam_event as seam_event, schemas_thermostat_schedule as thermostat_schedule, schemas_unmanaged_access_code as unmanaged_access_code, schemas_unmanaged_acs_access_group as unmanaged_acs_access_group, schemas_unmanaged_acs_credential as unmanaged_acs_credential, schemas_unmanaged_acs_user as unmanaged_acs_user, schemas_unmanaged_device as unmanaged_device, schemas_user_identity as user_identity, schemas_webhook as webhook, schemas_workspace as workspace };
}

declare const _default: {
    components: {
        schemas: {
            access_code: {
                properties: {
                    access_code_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    code: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    common_code_key: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    ends_at: {
                        description: string;
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            oneOf: ({
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_access_code_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_device_error?: never;
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_device_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_access_code_error?: never;
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_connected_account_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_access_code_error?: never;
                                    is_device_error?: never;
                                };
                                required: string[];
                                type: string;
                            })[];
                        };
                        type: string;
                    };
                    is_backup: {
                        description: string;
                        type: string;
                    };
                    is_backup_access_code_available: {
                        description: string;
                        type: string;
                    };
                    is_external_modification_allowed: {
                        description: string;
                        type: string;
                    };
                    is_managed: {
                        description: string;
                        enum: boolean[];
                        type: string;
                    };
                    is_offline_access_code: {
                        description: string;
                        type: string;
                    };
                    is_one_time_use: {
                        description: string;
                        type: string;
                    };
                    is_scheduled_on_device: {
                        description: string;
                        type: string;
                    };
                    is_waiting_for_code_assignment: {
                        description: string;
                        type: string;
                    };
                    name: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    pulled_backup_access_code_id: {
                        description: string;
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    starts_at: {
                        description: string;
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    status: {
                        description: string;
                        enum: string[];
                        type: string;
                    };
                    type: {
                        description: string;
                        enum: string[];
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_access_group: {
                properties: {
                    access_group_type: {
                        deprecated: boolean;
                        enum: string[];
                        type: string;
                        'x-deprecated': string;
                    };
                    access_group_type_display_name: {
                        deprecated: boolean;
                        type: string;
                        'x-deprecated': string;
                    };
                    acs_access_group_id: {
                        format: string;
                        type: string;
                    };
                    acs_system_id: {
                        format: string;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    display_name: {
                        type: string;
                    };
                    external_type: {
                        enum: string[];
                        type: string;
                    };
                    external_type_display_name: {
                        type: string;
                    };
                    is_managed: {
                        enum: boolean[];
                        type: string;
                    };
                    name: {
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_credential: {
                properties: {
                    access_method: {
                        enum: string[];
                        type: string;
                    };
                    acs_credential_id: {
                        format: string;
                        type: string;
                    };
                    acs_credential_pool_id: {
                        format: string;
                        type: string;
                    };
                    acs_system_id: {
                        format: string;
                        type: string;
                    };
                    acs_user_id: {
                        format: string;
                        type: string;
                    };
                    card_number: {
                        nullable: boolean;
                        type: string;
                    };
                    code: {
                        nullable: boolean;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    display_name: {
                        minLength: number;
                        type: string;
                    };
                    encoded_at: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    ends_at: {
                        type: string;
                    };
                    errors: {
                        items: {
                            properties: {
                                error_code: {
                                    type: string;
                                };
                                message: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    external_type: {
                        enum: string[];
                        type: string;
                    };
                    external_type_display_name: {
                        type: string;
                    };
                    is_encoded: {
                        type: string;
                    };
                    is_latest_desired_state_synced_with_provider: {
                        type: string;
                    };
                    is_managed: {
                        enum: boolean[];
                        type: string;
                    };
                    is_multi_phone_sync_credential: {
                        type: string;
                    };
                    latest_desired_state_synced_with_provider_at: {
                        format: string;
                        type: string;
                    };
                    parent_acs_credential_id: {
                        format: string;
                        type: string;
                    };
                    starts_at: {
                        type: string;
                    };
                    visionline_metadata: {
                        properties: {
                            auto_join: {
                                type: string;
                            };
                            card_function_type: {
                                enum: string[];
                                type: string;
                            };
                            card_id: {
                                type: string;
                            };
                            common_acs_entrance_ids: {
                                items: {
                                    format: string;
                                    type: string;
                                };
                                type: string;
                            };
                            credential_id: {
                                type: string;
                            };
                            guest_acs_entrance_ids: {
                                items: {
                                    format: string;
                                    type: string;
                                };
                                type: string;
                            };
                            is_valid: {
                                type: string;
                            };
                            joiner_acs_credential_ids: {
                                items: {
                                    format: string;
                                    type: string;
                                };
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    warnings: {
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_credential_pool: {
                properties: {
                    acs_credential_pool_id: {
                        format: string;
                        type: string;
                    };
                    acs_system_id: {
                        format: string;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    display_name: {
                        minLength: number;
                        type: string;
                    };
                    external_type: {
                        enum: string[];
                        type: string;
                    };
                    external_type_display_name: {
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_credential_provisioning_automation: {
                properties: {
                    acs_credential_provisioning_automation_id: {
                        format: string;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    credential_manager_acs_system_id: {
                        format: string;
                        type: string;
                    };
                    user_identity_id: {
                        format: string;
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_entrance: {
                properties: {
                    acs_entrance_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    acs_system_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    display_name: {
                        description: string;
                        type: string;
                    };
                    errors: {
                        items: {
                            properties: {
                                error_code: {
                                    type: string;
                                };
                                message: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    latch_metadata: {
                        properties: {
                            accessibility_type: {
                                type: string;
                            };
                            door_name: {
                                type: string;
                            };
                            door_type: {
                                type: string;
                            };
                            is_connected: {
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    salto_ks_metadata: {
                        properties: {
                            battery_level: {
                                type: string;
                            };
                            door_name: {
                                type: string;
                            };
                            intrusion_alarm: {
                                type: string;
                            };
                            left_open_alarm: {
                                type: string;
                            };
                            lock_type: {
                                type: string;
                            };
                            locked_state: {
                                type: string;
                            };
                            online: {
                                type: string;
                            };
                            privacy_mode: {
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    visionline_metadata: {
                        properties: {
                            door_category: {
                                enum: string[];
                                type: string;
                            };
                            door_name: {
                                type: string;
                            };
                            profiles: {
                                items: {
                                    properties: {
                                        visionline_door_profile_id: {
                                            type: string;
                                        };
                                        visionline_door_profile_type: {
                                            enum: string[];
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_system: {
                description: string;
                properties: {
                    acs_system_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    can_add_acs_users_to_acs_access_groups: {
                        description: string;
                        type: string;
                    };
                    can_automate_enrollment: {
                        description: string;
                        type: string;
                    };
                    can_create_acs_access_groups: {
                        description: string;
                        type: string;
                    };
                    can_remove_acs_users_from_acs_access_groups: {
                        description: string;
                        type: string;
                    };
                    connected_account_ids: {
                        description: string;
                        items: {
                            format: string;
                            type: string;
                        };
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            description: string;
                            oneOf: ({
                                description: string;
                                properties: {
                                    created_at: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    error_code: {
                                        description: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    message: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    created_at: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    error_code: {
                                        description: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    message: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                                description?: never;
                            })[];
                        };
                        type: string;
                    };
                    external_type: {
                        description: string;
                        enum: string[];
                        type: string;
                    };
                    external_type_display_name: {
                        description: string;
                        type: string;
                    };
                    image_alt_text: {
                        description: string;
                        type: string;
                    };
                    image_url: {
                        description: string;
                        type: string;
                    };
                    name: {
                        description: string;
                        type: string;
                    };
                    system_type: {
                        deprecated: boolean;
                        enum: string[];
                        type: string;
                        'x-deprecated': string;
                    };
                    system_type_display_name: {
                        deprecated: boolean;
                        type: string;
                        'x-deprecated': string;
                    };
                    visionline_metadata: {
                        properties: {
                            lan_address: {
                                description: string;
                                type: string;
                            };
                            mobile_access_uuid: {
                                description: string;
                                type: string;
                            };
                            system_id: {
                                description: string;
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            description: string;
                            properties: {
                                created_at: {
                                    description: string;
                                    format: string;
                                    type: string;
                                };
                                message: {
                                    description: string;
                                    type: string;
                                };
                                warning_code: {
                                    description: string;
                                    enum: string[];
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            acs_user: {
                properties: {
                    access_schedule: {
                        description: string;
                        properties: {
                            ends_at: {
                                format: string;
                                type: string;
                            };
                            starts_at: {
                                format: string;
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    acs_system_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    acs_user_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    display_name: {
                        description: string;
                        type: string;
                    };
                    email: {
                        deprecated: boolean;
                        format: string;
                        type: string;
                        'x-deprecated': string;
                    };
                    email_address: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            description: string;
                            oneOf: {
                                description: string;
                                properties: {
                                    created_at: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    error_code: {
                                        enum: string[];
                                        type: string;
                                    };
                                    message: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    external_type: {
                        description: string;
                        enum: string[];
                        type: string;
                    };
                    external_type_display_name: {
                        description: string;
                        type: string;
                    };
                    full_name: {
                        description: string;
                        type: string;
                    };
                    hid_acs_system_id: {
                        format: string;
                        type: string;
                    };
                    is_latest_desired_state_synced_with_provider: {
                        type: string;
                        'x-undocumented': string;
                    };
                    is_managed: {
                        enum: boolean[];
                        type: string;
                    };
                    is_suspended: {
                        description: string;
                        type: string;
                    };
                    latest_desired_state_synced_with_provider_at: {
                        format: string;
                        type: string;
                        'x-undocumented': string;
                    };
                    phone_number: {
                        description: string;
                        type: string;
                    };
                    user_identity_email_address: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    user_identity_full_name: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    user_identity_id: {
                        description: string;
                        type: string;
                    };
                    user_identity_phone_number: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            description: string;
                            oneOf: {
                                description: string;
                                properties: {
                                    created_at: {
                                        format: string;
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    warning_code: {
                                        enum: string[];
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    workspace_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            action_attempt: {
                oneOf: ({
                    description: string;
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            nullable: boolean;
                            properties?: never;
                            required?: never;
                            type?: never;
                        };
                        result: {
                            nullable: boolean;
                            properties?: never;
                            type?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                } | {
                    description: string;
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            nullable: boolean;
                            properties?: never;
                            required?: never;
                            type?: never;
                        };
                        result: {
                            properties: {
                                acs_credential_id?: never;
                                card_number?: never;
                            };
                            type: string;
                            nullable?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                } | {
                    description: string;
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                type: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                            nullable?: never;
                        };
                        result: {
                            nullable: boolean;
                            properties?: never;
                            type?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                } | {
                    description: string;
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            nullable: boolean;
                            properties?: never;
                            required?: never;
                            type?: never;
                        };
                        result: {
                            properties: {
                                acs_credential_id: {
                                    description: string;
                                    format: string;
                                    nullable: boolean;
                                    type: string;
                                };
                                card_number: {
                                    description: string;
                                    nullable: boolean;
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                            nullable?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                } | {
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            nullable: boolean;
                            properties?: never;
                            required?: never;
                            type?: never;
                        };
                        result: {
                            nullable: boolean;
                            properties?: never;
                            type?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                    description?: never;
                } | {
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            nullable: boolean;
                            properties?: never;
                            required?: never;
                            type?: never;
                        };
                        result: {
                            nullable?: never;
                            properties?: never;
                            type?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                    description?: never;
                } | {
                    properties: {
                        action_attempt_id: {
                            description: string;
                            format: string;
                            type: string;
                            'x-title': string;
                        };
                        action_type: {
                            enum: string[];
                            type: string;
                        };
                        error: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                type: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                            nullable?: never;
                        };
                        result: {
                            nullable: boolean;
                            properties?: never;
                            type?: never;
                            required?: never;
                        };
                        status: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                    description?: never;
                })[];
            };
            client_session: {
                properties: {
                    client_session_id: {
                        format: string;
                        type: string;
                    };
                    connect_webview_ids: {
                        items: {
                            format: string;
                            type: string;
                        };
                        type: string;
                    };
                    connected_account_ids: {
                        items: {
                            format: string;
                            type: string;
                        };
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    device_count: {
                        format: string;
                        type: string;
                    };
                    token: {
                        type: string;
                    };
                    user_identifier_key: {
                        nullable: boolean;
                        type: string;
                    };
                    user_identity_ids: {
                        items: {
                            format: string;
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            connect_webview: {
                properties: {
                    accepted_devices: {
                        deprecated: boolean;
                        items: {
                            type: string;
                        };
                        type: string;
                        'x-deprecated': string;
                    };
                    accepted_providers: {
                        items: {
                            type: string;
                        };
                        type: string;
                    };
                    any_device_allowed: {
                        deprecated: boolean;
                        type: string;
                        'x-deprecated': string;
                    };
                    any_provider_allowed: {
                        type: string;
                    };
                    authorized_at: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    automatically_manage_new_devices: {
                        type: string;
                    };
                    connect_webview_id: {
                        format: string;
                        type: string;
                    };
                    connected_account_id: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    custom_metadata: {
                        additionalProperties: {
                            oneOf: {
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    custom_redirect_failure_url: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    custom_redirect_url: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    device_selection_mode: {
                        enum: string[];
                        type: string;
                    };
                    login_successful: {
                        type: string;
                    };
                    selected_provider: {
                        nullable: boolean;
                        type: string;
                    };
                    status: {
                        enum: string[];
                        type: string;
                    };
                    url: {
                        format: string;
                        type: string;
                    };
                    wait_for_device_creation: {
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            connected_account: {
                properties: {
                    account_type: {
                        type: string;
                    };
                    account_type_display_name: {
                        type: string;
                    };
                    automatically_manage_new_devices: {
                        type: string;
                    };
                    connected_account_id: {
                        format: string;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    custom_metadata: {
                        additionalProperties: {
                            oneOf: {
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    errors: {
                        items: {
                            properties: {
                                error_code: {
                                    type: string;
                                };
                                is_connected_account_error: {
                                    enum: boolean[];
                                    type: string;
                                };
                                message: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    user_identifier: {
                        properties: {
                            api_url: {
                                type: string;
                            };
                            email: {
                                type: string;
                            };
                            exclusive: {
                                type: string;
                            };
                            phone: {
                                type: string;
                            };
                            username: {
                                type: string;
                            };
                        };
                        type: string;
                    };
                    warnings: {
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            device: {
                properties: {
                    can_hvac_cool: {
                        type: string;
                    };
                    can_hvac_heat: {
                        type: string;
                    };
                    can_hvac_heat_cool: {
                        type: string;
                    };
                    can_program_offline_access_codes: {
                        type: string;
                    };
                    can_program_online_access_codes: {
                        type: string;
                    };
                    can_remotely_lock: {
                        type: string;
                    };
                    can_remotely_unlock: {
                        type: string;
                    };
                    can_simulate_connection: {
                        type: string;
                    };
                    can_simulate_disconnection: {
                        type: string;
                    };
                    can_simulate_removal: {
                        type: string;
                    };
                    can_turn_off_hvac: {
                        type: string;
                    };
                    capabilities_supported: {
                        description: string;
                        items: {
                            enum: string[];
                            type: string;
                        };
                        type: string;
                    };
                    connected_account_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    custom_metadata: {
                        additionalProperties: {
                            oneOf: {
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    device_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_type: {
                        description: string;
                        oneOf: {
                            enum: string[];
                            type: string;
                        }[];
                    };
                    display_name: {
                        description: string;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            oneOf: ({
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_device_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_connected_account_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_device_error?: never;
                                };
                                required: string[];
                                type: string;
                            })[];
                        };
                        type: string;
                    };
                    is_managed: {
                        description: string;
                        enum: boolean[];
                        type: string;
                    };
                    location: {
                        description: string;
                        nullable: boolean;
                        properties: {
                            location_name: {
                                description: string;
                                type: string;
                            };
                            timezone: {
                                description: string;
                                type: string;
                            };
                        };
                        type: string;
                    };
                    nickname: {
                        description: string;
                        type: string;
                    };
                    properties: {
                        allOf: ({
                            allOf: ({
                                allOf: ({
                                    properties: {
                                        accessory_keypad: {
                                            description: string;
                                            properties: {
                                                battery: {
                                                    description: string;
                                                    properties: {
                                                        level: {
                                                            format: string;
                                                            maximum: number;
                                                            minimum: number;
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                    type: string;
                                                };
                                                is_connected: {
                                                    description: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        appearance: {
                                            properties: {
                                                name: {
                                                    description: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        battery: {
                                            description: string;
                                            properties: {
                                                level: {
                                                    format: string;
                                                    maximum: number;
                                                    minimum: number;
                                                    type: string;
                                                };
                                                status: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        battery_level: {
                                            description: string;
                                            format: string;
                                            maximum: number;
                                            minimum: number;
                                            type: string;
                                        };
                                        currently_triggering_noise_threshold_ids: {
                                            description: string;
                                            items: {
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        has_direct_power: {
                                            description: string;
                                            type: string;
                                        };
                                        image_alt_text: {
                                            description: string;
                                            type: string;
                                        };
                                        image_url: {
                                            description: string;
                                            format: string;
                                            type: string;
                                        };
                                        manufacturer: {
                                            description: string;
                                            type: string;
                                        };
                                        model: {
                                            properties: {
                                                accessory_keypad_supported: {
                                                    deprecated: boolean;
                                                    type: string;
                                                    'x-deprecated': string;
                                                };
                                                can_connect_accessory_keypad: {
                                                    description: string;
                                                    type: string;
                                                };
                                                display_name: {
                                                    description: string;
                                                    type: string;
                                                };
                                                has_built_in_keypad: {
                                                    description: string;
                                                    type: string;
                                                };
                                                manufacturer_display_name: {
                                                    description: string;
                                                    type: string;
                                                };
                                                offline_access_codes_supported: {
                                                    description: string;
                                                    type: string;
                                                };
                                                online_access_codes_supported: {
                                                    description: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        name: {
                                            deprecated: boolean;
                                            description: string;
                                            type: string;
                                            'x-deprecated': string;
                                        };
                                        noise_level_decibels: {
                                            description: string;
                                            format: string;
                                            type: string;
                                        };
                                        offline_access_codes_enabled: {
                                            description: string;
                                            type: string;
                                        };
                                        online: {
                                            description: string;
                                            type: string;
                                        };
                                        online_access_codes_enabled: {
                                            description: string;
                                            type: string;
                                        };
                                        serial_number: {
                                            description: string;
                                            type: string;
                                        };
                                        supports_accessory_keypad: {
                                            deprecated: boolean;
                                            type: string;
                                            'x-deprecated': string;
                                        };
                                        supports_offline_access_codes: {
                                            deprecated: boolean;
                                            type: string;
                                            'x-deprecated': string;
                                        };
                                        assa_abloy_credential_service_metadata?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        assa_abloy_credential_service_metadata: {
                                            properties: {
                                                endpoints: {
                                                    items: {
                                                        properties: {
                                                            endpoint_id: {
                                                                type: string;
                                                            };
                                                            is_active: {
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    type: string;
                                                };
                                                has_active_endpoint: {
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        accessory_keypad?: never;
                                        appearance?: never;
                                        battery?: never;
                                        battery_level?: never;
                                        currently_triggering_noise_threshold_ids?: never;
                                        has_direct_power?: never;
                                        image_alt_text?: never;
                                        image_url?: never;
                                        manufacturer?: never;
                                        model?: never;
                                        name?: never;
                                        noise_level_decibels?: never;
                                        offline_access_codes_enabled?: never;
                                        online?: never;
                                        online_access_codes_enabled?: never;
                                        serial_number?: never;
                                        supports_accessory_keypad?: never;
                                        supports_offline_access_codes?: never;
                                    };
                                    type: string;
                                    required?: never;
                                })[];
                                properties?: never;
                                type?: never;
                            } | {
                                properties: {
                                    akiles_metadata: {
                                        properties: {
                                            gadget_id: {
                                                type: string;
                                            };
                                            gadget_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    august_metadata: {
                                        properties: {
                                            has_keypad: {
                                                type: string;
                                            };
                                            house_id: {
                                                type: string;
                                            };
                                            house_name: {
                                                type: string;
                                            };
                                            keypad_battery_level: {
                                                type: string;
                                            };
                                            lock_id: {
                                                type: string;
                                            };
                                            lock_name: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    avigilon_alta_metadata: {
                                        properties: {
                                            entry_name: {
                                                type: string;
                                            };
                                            entry_relays_total_count: {
                                                format: string;
                                                type: string;
                                            };
                                            org_name: {
                                                type: string;
                                            };
                                            site_id: {
                                                format: string;
                                                type: string;
                                            };
                                            site_name: {
                                                type: string;
                                            };
                                            zone_id: {
                                                format: string;
                                                type: string;
                                            };
                                            zone_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    brivo_metadata: {
                                        properties: {
                                            device_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    controlbyweb_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            relay_name: {
                                                nullable: boolean;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    dormakaba_oracode_metadata: {
                                        properties: {
                                            device_id: {
                                                oneOf: ({
                                                    format: string;
                                                    type: string;
                                                } | {
                                                    type: string;
                                                    format?: never;
                                                })[];
                                            };
                                            door_id: {
                                                format: string;
                                                type: string;
                                            };
                                            door_is_wireless: {
                                                type: string;
                                            };
                                            door_name: {
                                                type: string;
                                            };
                                            iana_timezone: {
                                                type: string;
                                            };
                                            predefined_time_slots: {
                                                items: {
                                                    properties: {
                                                        check_in_time: {
                                                            type: string;
                                                        };
                                                        check_out_time: {
                                                            type: string;
                                                        };
                                                        dormakaba_oracode_user_level_id: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                        ext_dormakaba_oracode_user_level_prefix: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                        is_24_hour: {
                                                            type: string;
                                                        };
                                                        is_biweekly_mode: {
                                                            type: string;
                                                        };
                                                        is_master: {
                                                            type: string;
                                                        };
                                                        is_one_shot: {
                                                            type: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                        };
                                                        prefix: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                    type: string;
                                                };
                                                type: string;
                                            };
                                            site_id: {
                                                description: string;
                                                format: string;
                                                nullable: boolean;
                                                type: string;
                                            };
                                            site_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    ecobee_metadata: {
                                        properties: {
                                            device_name: {
                                                type: string;
                                            };
                                            ecobee_device_id: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    four_suites_metadata: {
                                        properties: {
                                            device_id: {
                                                format: string;
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            reclose_delay_in_seconds: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    genie_metadata: {
                                        properties: {
                                            device_name: {
                                                type: string;
                                            };
                                            door_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    honeywell_resideo_metadata: {
                                        properties: {
                                            device_name: {
                                                type: string;
                                            };
                                            honeywell_resideo_device_id: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    hubitat_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_label: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    igloo_metadata: {
                                        properties: {
                                            bridge_id: {
                                                type: string;
                                            };
                                            device_id: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    igloohome_metadata: {
                                        properties: {
                                            bridge_id: {
                                                type: string;
                                            };
                                            bridge_name: {
                                                type: string;
                                            };
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            keypad_id: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    kwikset_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            model_number: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    lockly_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    minut_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            latest_sensor_values: {
                                                properties: {
                                                    accelerometer_z: {
                                                        properties: {
                                                            time: {
                                                                type: string;
                                                            };
                                                            value: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    humidity: {
                                                        properties: {
                                                            time: {
                                                                type: string;
                                                            };
                                                            value: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    pressure: {
                                                        properties: {
                                                            time: {
                                                                type: string;
                                                            };
                                                            value: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    sound: {
                                                        properties: {
                                                            time: {
                                                                type: string;
                                                            };
                                                            value: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    temperature: {
                                                        properties: {
                                                            time: {
                                                                type: string;
                                                            };
                                                            value: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    nest_metadata: {
                                        properties: {
                                            custom_name: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            nest_device_id: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    noiseaware_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_model: {
                                                enum: string[];
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            noise_level_decibel: {
                                                format: string;
                                                type: string;
                                            };
                                            noise_level_nrs: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    nuki_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            keypad_2_paired: {
                                                type: string;
                                            };
                                            keypad_battery_critical: {
                                                type: string;
                                            };
                                            keypad_paired: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    salto_metadata: {
                                        properties: {
                                            battery_level: {
                                                type: string;
                                            };
                                            customer_reference: {
                                                type: string;
                                            };
                                            lock_id: {
                                                type: string;
                                            };
                                            lock_type: {
                                                type: string;
                                            };
                                            locked_state: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    schlage_metadata: {
                                        properties: {
                                            access_code_length: {
                                                format: string;
                                                nullable: boolean;
                                                type: string;
                                            };
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    seam_bridge_metadata: {
                                        properties: {
                                            device_num: {
                                                format: string;
                                                type: string;
                                            };
                                            name: {
                                                type: string;
                                            };
                                            unlock_method: {
                                                enum: string[];
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    smartthings_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            location_id: {
                                                type: string;
                                            };
                                            model: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    tedee_metadata: {
                                        properties: {
                                            bridge_id: {
                                                format: string;
                                                type: string;
                                            };
                                            bridge_name: {
                                                type: string;
                                            };
                                            device_id: {
                                                format: string;
                                                type: string;
                                            };
                                            device_model: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            keypad_id: {
                                                format: string;
                                                type: string;
                                            };
                                            serial_number: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    ttlock_metadata: {
                                        properties: {
                                            feature_value: {
                                                type: string;
                                            };
                                            features: {
                                                properties: {
                                                    incomplete_keyboard_passcode: {
                                                        type: string;
                                                    };
                                                    lock_command: {
                                                        type: string;
                                                    };
                                                    passcode: {
                                                        type: string;
                                                    };
                                                    passcode_management: {
                                                        type: string;
                                                    };
                                                    unlock_via_gateway: {
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            };
                                            has_gateway: {
                                                type: string;
                                            };
                                            lock_alias: {
                                                type: string;
                                            };
                                            lock_id: {
                                                format: string;
                                                type: string;
                                            };
                                            wireless_keypads: {
                                                items: {
                                                    properties: {
                                                        wireless_keypad_id: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                        wireless_keypad_name: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                    type: string;
                                                };
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    two_n_metadata: {
                                        properties: {
                                            device_id: {
                                                format: string;
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    visionline_metadata: {
                                        properties: {
                                            encoder_id: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    wyze_metadata: {
                                        properties: {
                                            device_id: {
                                                type: string;
                                            };
                                            device_info_model: {
                                                type: string;
                                            };
                                            device_name: {
                                                type: string;
                                            };
                                            keypad_uuid: {
                                                type: string;
                                            };
                                            locker_status_hardlock: {
                                                format: string;
                                                type: string;
                                            };
                                            product_model: {
                                                type: string;
                                            };
                                            product_name: {
                                                type: string;
                                            };
                                            product_type: {
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                };
                                type: string;
                                allOf?: never;
                            })[];
                        } | {
                            allOf: ({
                                properties: {
                                    _experimental_supported_code_from_access_codes_lengths: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    code_constraints: {
                                        items: {
                                            oneOf: ({
                                                properties: {
                                                    constraint_type: {
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    max_length?: never;
                                                    min_length?: never;
                                                };
                                                required: string[];
                                                type: string;
                                            } | {
                                                properties: {
                                                    constraint_type: {
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    max_length: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    min_length: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            })[];
                                        };
                                        type: string;
                                    };
                                    door_open: {
                                        type: string;
                                    };
                                    has_native_entry_events: {
                                        type: string;
                                    };
                                    keypad_battery: {
                                        properties: {
                                            level: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    locked: {
                                        type: string;
                                    };
                                    max_active_codes_supported: {
                                        format: string;
                                        type: string;
                                    };
                                    supported_code_lengths: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    supports_backup_access_code_pool: {
                                        type: string;
                                    };
                                    active_thermostat_schedule?: never;
                                    available_climate_presets?: never;
                                    available_fan_mode_settings?: never;
                                    available_hvac_mode_settings?: never;
                                    current_climate_setting?: never;
                                    default_climate_setting?: never;
                                    fallback_climate_preset_key?: never;
                                    fan_mode_setting?: never;
                                    is_cooling?: never;
                                    is_fan_running?: never;
                                    is_heating?: never;
                                    is_temporary_manual_override_active?: never;
                                    max_cooling_set_point_celsius?: never;
                                    max_cooling_set_point_fahrenheit?: never;
                                    max_heating_set_point_celsius?: never;
                                    max_heating_set_point_fahrenheit?: never;
                                    min_cooling_set_point_celsius?: never;
                                    min_cooling_set_point_fahrenheit?: never;
                                    min_heating_cooling_delta_celsius?: never;
                                    min_heating_cooling_delta_fahrenheit?: never;
                                    min_heating_set_point_celsius?: never;
                                    min_heating_set_point_fahrenheit?: never;
                                    relative_humidity?: never;
                                    temperature_celsius?: never;
                                    temperature_fahrenheit?: never;
                                };
                                type: string;
                            } | {
                                properties: {
                                    active_thermostat_schedule: {
                                        default: null;
                                        nullable: boolean;
                                        properties: {
                                            climate_preset_key: {
                                                type: string;
                                            };
                                            created_at: {
                                                format: string;
                                                type: string;
                                            };
                                            device_id: {
                                                format: string;
                                                type: string;
                                            };
                                            ends_at: {
                                                format: string;
                                                type: string;
                                            };
                                            errors: {
                                                description: string;
                                            };
                                            max_override_period_minutes: {
                                                minimum: number;
                                                type: string;
                                            };
                                            name: {
                                                type: string;
                                            };
                                            starts_at: {
                                                format: string;
                                                type: string;
                                            };
                                            thermostat_schedule_id: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    available_climate_presets: {
                                        items: {
                                            properties: {
                                                can_delete: {
                                                    type: string;
                                                };
                                                can_edit: {
                                                    type: string;
                                                };
                                                climate_preset_key: {
                                                    type: string;
                                                };
                                                cooling_set_point_celsius: {
                                                    format: string;
                                                    type: string;
                                                };
                                                cooling_set_point_fahrenheit: {
                                                    format: string;
                                                    type: string;
                                                };
                                                display_name: {
                                                    type: string;
                                                };
                                                fan_mode_setting: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                                heating_set_point_celsius: {
                                                    format: string;
                                                    type: string;
                                                };
                                                heating_set_point_fahrenheit: {
                                                    format: string;
                                                    type: string;
                                                };
                                                hvac_mode_setting: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                                manual_override_allowed: {
                                                    type: string;
                                                };
                                                name: {
                                                    default: null;
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    available_fan_mode_settings: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    available_hvac_mode_settings: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    current_climate_setting: {
                                        properties: {
                                            can_delete: {
                                                type: string;
                                            };
                                            can_edit: {
                                                type: string;
                                            };
                                            climate_preset_key: {
                                                type: string;
                                            };
                                            cooling_set_point_celsius: {
                                                format: string;
                                                type: string;
                                            };
                                            cooling_set_point_fahrenheit: {
                                                format: string;
                                                type: string;
                                            };
                                            display_name: {
                                                type: string;
                                            };
                                            fan_mode_setting: {
                                                enum: string[];
                                                type: string;
                                            };
                                            heating_set_point_celsius: {
                                                format: string;
                                                type: string;
                                            };
                                            heating_set_point_fahrenheit: {
                                                format: string;
                                                type: string;
                                            };
                                            hvac_mode_setting: {
                                                enum: string[];
                                                type: string;
                                            };
                                            manual_override_allowed: {
                                                type: string;
                                            };
                                            name: {
                                                default: null;
                                                nullable: boolean;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                    default_climate_setting: {
                                        deprecated: boolean;
                                        properties: {
                                            can_delete: {
                                                type: string;
                                            };
                                            can_edit: {
                                                type: string;
                                            };
                                            climate_preset_key: {
                                                type: string;
                                            };
                                            cooling_set_point_celsius: {
                                                format: string;
                                                type: string;
                                            };
                                            cooling_set_point_fahrenheit: {
                                                format: string;
                                                type: string;
                                            };
                                            display_name: {
                                                type: string;
                                            };
                                            fan_mode_setting: {
                                                enum: string[];
                                                type: string;
                                            };
                                            heating_set_point_celsius: {
                                                format: string;
                                                type: string;
                                            };
                                            heating_set_point_fahrenheit: {
                                                format: string;
                                                type: string;
                                            };
                                            hvac_mode_setting: {
                                                enum: string[];
                                                type: string;
                                            };
                                            manual_override_allowed: {
                                                type: string;
                                            };
                                            name: {
                                                default: null;
                                                nullable: boolean;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    fallback_climate_preset_key: {
                                        default: null;
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    fan_mode_setting: {
                                        deprecated: boolean;
                                        enum: string[];
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    is_cooling: {
                                        type: string;
                                    };
                                    is_fan_running: {
                                        type: string;
                                    };
                                    is_heating: {
                                        type: string;
                                    };
                                    is_temporary_manual_override_active: {
                                        type: string;
                                    };
                                    max_cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    max_cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    max_heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    max_heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    min_cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    min_cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    min_heating_cooling_delta_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    min_heating_cooling_delta_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    min_heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    min_heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    relative_humidity: {
                                        format: string;
                                        maximum: number;
                                        minimum: number;
                                        type: string;
                                    };
                                    temperature_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    temperature_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    _experimental_supported_code_from_access_codes_lengths?: never;
                                    code_constraints?: never;
                                    door_open?: never;
                                    has_native_entry_events?: never;
                                    keypad_battery?: never;
                                    locked?: never;
                                    max_active_codes_supported?: never;
                                    supported_code_lengths?: never;
                                    supports_backup_access_code_pool?: never;
                                };
                                type: string;
                            })[];
                        })[];
                        description: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            device_provider: {
                properties: {
                    can_hvac_cool: {
                        type: string;
                    };
                    can_hvac_heat: {
                        type: string;
                    };
                    can_hvac_heat_cool: {
                        type: string;
                    };
                    can_program_offline_access_codes: {
                        type: string;
                    };
                    can_program_online_access_codes: {
                        type: string;
                    };
                    can_remotely_lock: {
                        type: string;
                    };
                    can_remotely_unlock: {
                        type: string;
                    };
                    can_simulate_connection: {
                        type: string;
                    };
                    can_simulate_disconnection: {
                        type: string;
                    };
                    can_simulate_removal: {
                        type: string;
                    };
                    can_turn_off_hvac: {
                        type: string;
                    };
                    device_provider_name: {
                        enum: string[];
                        type: string;
                    };
                    display_name: {
                        type: string;
                    };
                    image_url: {
                        type: string;
                    };
                    provider_categories: {
                        items: {
                            enum: string[];
                            type: string;
                        };
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            enrollment_automation: {
                properties: {
                    created_at: {
                        format: string;
                        type: string;
                    };
                    credential_manager_acs_system_id: {
                        format: string;
                        type: string;
                    };
                    enrollment_automation_id: {
                        format: string;
                        type: string;
                    };
                    user_identity_id: {
                        format: string;
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            event: {
                properties: {
                    acs_credential_id: {
                        format: string;
                        type: string;
                    };
                    acs_system_id: {
                        format: string;
                        type: string;
                    };
                    acs_user_id: {
                        format: string;
                        type: string;
                    };
                    action_attempt_id: {
                        format: string;
                        type: string;
                    };
                    client_session_id: {
                        format: string;
                        type: string;
                    };
                    climate_preset_key: {
                        type: string;
                    };
                    cooling_set_point_celsius: {
                        format: string;
                        type: string;
                    };
                    cooling_set_point_fahrenheit: {
                        format: string;
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    device_id: {
                        format: string;
                        type: string;
                    };
                    enrollment_automation_id: {
                        format: string;
                        type: string;
                    };
                    event_description: {
                        type: string;
                    };
                    event_id: {
                        format: string;
                        type: string;
                    };
                    event_type: {
                        type: string;
                    };
                    fan_mode_setting: {
                        type: string;
                    };
                    heating_set_point_celsius: {
                        format: string;
                        type: string;
                    };
                    heating_set_point_fahrenheit: {
                        format: string;
                        type: string;
                    };
                    hvac_mode_setting: {
                        type: string;
                    };
                    is_fallback_climate_preset: {
                        type: string;
                    };
                    occurred_at: {
                        format: string;
                        type: string;
                    };
                    thermostat_schedule_id: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            network: {
                properties: {
                    created_at: {
                        format: string;
                        type: string;
                    };
                    display_name: {
                        type: string;
                    };
                    network_id: {
                        format: string;
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            noise_threshold: {
                properties: {
                    device_id: {
                        format: string;
                        type: string;
                    };
                    ends_daily_at: {
                        type: string;
                    };
                    name: {
                        type: string;
                    };
                    noise_threshold_decibels: {
                        format: string;
                        type: string;
                    };
                    noise_threshold_id: {
                        format: string;
                        type: string;
                    };
                    noise_threshold_nrs: {
                        format: string;
                        type: string;
                    };
                    starts_daily_at: {
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            phone: {
                properties: {
                    can_hvac_cool: {
                        type: string;
                    };
                    can_hvac_heat: {
                        type: string;
                    };
                    can_hvac_heat_cool: {
                        type: string;
                    };
                    can_program_offline_access_codes: {
                        type: string;
                    };
                    can_program_online_access_codes: {
                        type: string;
                    };
                    can_remotely_lock: {
                        type: string;
                    };
                    can_remotely_unlock: {
                        type: string;
                    };
                    can_simulate_connection: {
                        type: string;
                    };
                    can_simulate_disconnection: {
                        type: string;
                    };
                    can_simulate_removal: {
                        type: string;
                    };
                    can_turn_off_hvac: {
                        type: string;
                    };
                    capabilities_supported: {
                        description: string;
                        items: {
                            enum: string[];
                            type: string;
                        };
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    custom_metadata: {
                        additionalProperties: {
                            oneOf: {
                                type: string;
                            }[];
                        };
                        type: string;
                    };
                    device_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_type: {
                        enum: string[];
                        type: string;
                    };
                    display_name: {
                        description: string;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            oneOf: ({
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_device_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_connected_account_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_device_error?: never;
                                };
                                required: string[];
                                type: string;
                            })[];
                        };
                        type: string;
                    };
                    is_managed: {
                        description: string;
                        enum: boolean[];
                        type: string;
                    };
                    location: {
                        description: string;
                        nullable: boolean;
                        properties: {
                            location_name: {
                                description: string;
                                type: string;
                            };
                            timezone: {
                                description: string;
                                type: string;
                            };
                        };
                        type: string;
                    };
                    nickname: {
                        description: string;
                        type: string;
                    };
                    properties: {
                        properties: {
                            assa_abloy_credential_service_metadata: {
                                properties: {
                                    endpoints: {
                                        items: {
                                            properties: {
                                                endpoint_id: {
                                                    type: string;
                                                };
                                                is_active: {
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    has_active_endpoint: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            service_health: {
                properties: {
                    description: {
                        type: string;
                    };
                    service: {
                        type: string;
                    };
                    status: {
                        enum: string[];
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            thermostat_schedule: {
                properties: {
                    climate_preset_key: {
                        type: string;
                    };
                    created_at: {
                        format: string;
                        type: string;
                    };
                    device_id: {
                        format: string;
                        type: string;
                    };
                    ends_at: {
                        format: string;
                        type: string;
                    };
                    errors: {
                        description: string;
                    };
                    max_override_period_minutes: {
                        minimum: number;
                        type: string;
                    };
                    name: {
                        type: string;
                    };
                    starts_at: {
                        format: string;
                        type: string;
                    };
                    thermostat_schedule_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            unmanaged_access_code: {
                properties: {
                    access_code_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    code: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    ends_at: {
                        description: string;
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    errors: {
                        description: string;
                        items: {
                            oneOf: ({
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_access_code_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_device_error?: never;
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_device_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_access_code_error?: never;
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_connected_account_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_access_code_error?: never;
                                    is_device_error?: never;
                                };
                                required: string[];
                                type: string;
                            })[];
                        };
                        type: string;
                    };
                    is_managed: {
                        enum: boolean[];
                        type: string;
                    };
                    name: {
                        description: string;
                        nullable: boolean;
                        type: string;
                    };
                    starts_at: {
                        description: string;
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    status: {
                        enum: string[];
                        type: string;
                    };
                    type: {
                        description: string;
                        enum: string[];
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            unmanaged_device: {
                properties: {
                    can_hvac_cool: {
                        type: string;
                    };
                    can_hvac_heat: {
                        type: string;
                    };
                    can_hvac_heat_cool: {
                        type: string;
                    };
                    can_program_offline_access_codes: {
                        type: string;
                    };
                    can_program_online_access_codes: {
                        type: string;
                    };
                    can_remotely_lock: {
                        type: string;
                    };
                    can_remotely_unlock: {
                        type: string;
                    };
                    can_simulate_connection: {
                        type: string;
                    };
                    can_simulate_disconnection: {
                        type: string;
                    };
                    can_simulate_removal: {
                        type: string;
                    };
                    can_turn_off_hvac: {
                        type: string;
                    };
                    capabilities_supported: {
                        description: string;
                        items: {
                            enum: string[];
                            type: string;
                        };
                        type: string;
                    };
                    connected_account_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    created_at: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                    device_type: {
                        description: string;
                        oneOf: {
                            enum: string[];
                            type: string;
                        }[];
                    };
                    errors: {
                        description: string;
                        items: {
                            oneOf: ({
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_device_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_connected_account_error?: never;
                                };
                                required: string[];
                                type: string;
                            } | {
                                properties: {
                                    error_code: {
                                        type: string;
                                    };
                                    is_connected_account_error: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                    message: {
                                        type: string;
                                    };
                                    is_device_error?: never;
                                };
                                required: string[];
                                type: string;
                            })[];
                        };
                        type: string;
                    };
                    is_managed: {
                        enum: boolean[];
                        type: string;
                    };
                    location: {
                        description: string;
                        nullable: boolean;
                        properties: {
                            location_name: {
                                description: string;
                                type: string;
                            };
                            timezone: {
                                description: string;
                                type: string;
                            };
                        };
                        type: string;
                    };
                    properties: {
                        properties: {
                            accessory_keypad: {
                                description: string;
                                properties: {
                                    battery: {
                                        description: string;
                                        properties: {
                                            level: {
                                                format: string;
                                                maximum: number;
                                                minimum: number;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    is_connected: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                            battery: {
                                description: string;
                                properties: {
                                    level: {
                                        format: string;
                                        maximum: number;
                                        minimum: number;
                                        type: string;
                                    };
                                    status: {
                                        enum: string[];
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                            battery_level: {
                                description: string;
                                format: string;
                                maximum: number;
                                minimum: number;
                                type: string;
                            };
                            image_alt_text: {
                                description: string;
                                type: string;
                            };
                            image_url: {
                                description: string;
                                format: string;
                                type: string;
                            };
                            manufacturer: {
                                description: string;
                                type: string;
                            };
                            model: {
                                properties: {
                                    accessory_keypad_supported: {
                                        deprecated: boolean;
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    can_connect_accessory_keypad: {
                                        description: string;
                                        type: string;
                                    };
                                    display_name: {
                                        description: string;
                                        type: string;
                                    };
                                    has_built_in_keypad: {
                                        description: string;
                                        type: string;
                                    };
                                    manufacturer_display_name: {
                                        description: string;
                                        type: string;
                                    };
                                    offline_access_codes_supported: {
                                        description: string;
                                        type: string;
                                    };
                                    online_access_codes_supported: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                            name: {
                                deprecated: boolean;
                                description: string;
                                type: string;
                                'x-deprecated': string;
                            };
                            offline_access_codes_enabled: {
                                description: string;
                                type: string;
                            };
                            online: {
                                description: string;
                                type: string;
                            };
                            online_access_codes_enabled: {
                                description: string;
                                type: string;
                            };
                        };
                        required: string[];
                        type: string;
                    };
                    warnings: {
                        description: string;
                        items: {
                            properties: {
                                message: {
                                    type: string;
                                };
                                warning_code: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        type: string;
                    };
                    workspace_id: {
                        description: string;
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            user_identity: {
                properties: {
                    created_at: {
                        format: string;
                        type: string;
                    };
                    display_name: {
                        minLength: number;
                        type: string;
                    };
                    email_address: {
                        format: string;
                        nullable: boolean;
                        type: string;
                    };
                    full_name: {
                        minLength: number;
                        nullable: boolean;
                        type: string;
                    };
                    phone_number: {
                        nullable: boolean;
                        type: string;
                    };
                    user_identity_id: {
                        format: string;
                        type: string;
                    };
                    user_identity_key: {
                        minLength: number;
                        nullable: boolean;
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            webhook: {
                properties: {
                    event_types: {
                        items: {
                            type: string;
                        };
                        type: string;
                    };
                    secret: {
                        type: string;
                    };
                    url: {
                        type: string;
                    };
                    webhook_id: {
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
            workspace: {
                properties: {
                    company_name: {
                        type: string;
                    };
                    connect_partner_name: {
                        deprecated: boolean;
                        nullable: boolean;
                        type: string;
                        'x-deprecated': string;
                    };
                    is_sandbox: {
                        type: string;
                    };
                    name: {
                        type: string;
                    };
                    workspace_id: {
                        format: string;
                        type: string;
                    };
                };
                required: string[];
                type: string;
            };
        };
        securitySchemes: {
            access_token: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            api_key: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            client_session: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            client_session_token: {
                in: string;
                name: string;
                type: string;
            };
            console_session: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            pat_with_workspace: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            pat_without_workspace: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            seam_client_session_token: {
                in: string;
                name: string;
                type: string;
            };
            seam_workspace: {
                in: string;
                name: string;
                type: string;
            };
            user_session: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
            user_session_without_workspace: {
                bearerFormat: string;
                scheme: string;
                type: string;
            };
        };
    };
    info: {
        title: string;
        version: string;
    };
    openapi: string;
    paths: {
        '/access_codes/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    common_code_key: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_code: {
                                            $ref: string;
                                        };
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/create_multiple': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    behavior_when_code_cannot_be_shared: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_codes: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    behavior_when_code_cannot_be_shared: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_codes: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/access_codes/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/access_codes/generate_code': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        generated_code: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    code: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_code: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    access_token?: never;
                    user_session?: never;
                    client_session?: never;
                } | {
                    access_token: never[];
                    api_key?: never;
                    user_session?: never;
                    client_session?: never;
                } | {
                    user_session: never[];
                    api_key?: never;
                    access_token?: never;
                    client_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    access_token?: never;
                    user_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_codes: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/pull_backup_access_code': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        backup_access_code: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/simulate/create_unmanaged_access_code': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_code: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/unmanaged/convert_to_managed': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    force: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    force: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/access_codes/unmanaged/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/access_codes/unmanaged/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    code: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_code: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/unmanaged/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        access_codes: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/access_codes/unmanaged/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    force: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_managed: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    force: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_managed: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/access_codes/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_managed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                    type: {
                                        enum: string[];
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_managed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                    type: {
                                        enum: string[];
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allow_external_modification: {
                                        type: string;
                                    };
                                    attempt_for_offline_device: {
                                        default: boolean;
                                        type: string;
                                    };
                                    code: {
                                        maxLength: number;
                                        minLength: number;
                                        pattern: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    is_external_modification_allowed: {
                                        type: string;
                                    };
                                    is_managed: {
                                        type: string;
                                    };
                                    is_offline_access_code: {
                                        type: string;
                                    };
                                    is_one_time_use: {
                                        type: string;
                                    };
                                    max_time_rounding: {
                                        default: string;
                                        enum: string[];
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    prefer_native_scheduling: {
                                        type: string;
                                    };
                                    preferred_code_length: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                    type: {
                                        enum: string[];
                                        type: string;
                                    };
                                    use_backup_access_code_pool: {
                                        type: string;
                                    };
                                    use_offline_access_code: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/acs/access_groups/add_user': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/acs/access_groups/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_access_group: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/access_groups/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_access_groups: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/access_groups/list_accessible_entrances': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_entrances: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/access_groups/list_users': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_users: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/access_groups/remove_user': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/access_groups/unmanaged/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_access_group: {
                                            properties: {
                                                access_group_type: {
                                                    deprecated: boolean;
                                                    enum: string[];
                                                    type: string;
                                                    'x-deprecated': string;
                                                };
                                                access_group_type_display_name: {
                                                    deprecated: boolean;
                                                    type: string;
                                                    'x-deprecated': string;
                                                };
                                                acs_access_group_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                acs_system_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                created_at: {
                                                    format: string;
                                                    type: string;
                                                };
                                                display_name: {
                                                    type: string;
                                                };
                                                external_type: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                                external_type_display_name: {
                                                    type: string;
                                                };
                                                is_managed: {
                                                    enum: boolean[];
                                                    type: string;
                                                };
                                                name: {
                                                    type: string;
                                                };
                                                workspace_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/access_groups/unmanaged/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_access_groups: {
                                            items: {
                                                properties: {
                                                    access_group_type: {
                                                        deprecated: boolean;
                                                        enum: string[];
                                                        type: string;
                                                        'x-deprecated': string;
                                                    };
                                                    access_group_type_display_name: {
                                                        deprecated: boolean;
                                                        type: string;
                                                        'x-deprecated': string;
                                                    };
                                                    acs_access_group_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    acs_system_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    created_at: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    display_name: {
                                                        type: string;
                                                    };
                                                    external_type: {
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    external_type_display_name: {
                                                        type: string;
                                                    };
                                                    is_managed: {
                                                        enum: boolean[];
                                                        type: string;
                                                    };
                                                    name: {
                                                        type: string;
                                                    };
                                                    workspace_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credential_pools/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential_pools: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credential_provisioning_automations/launch': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_pool_id: {
                                        format: string;
                                        type: string;
                                    };
                                    create_credential_manager_user: {
                                        type: string;
                                    };
                                    credential_manager_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    credential_manager_acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential_provisioning_automation: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/assign': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/credentials/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_method: {
                                        enum: string[];
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    allowed_acs_entrance_ids: {
                                        default: never[];
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    code: {
                                        pattern: string;
                                        type: string;
                                    };
                                    credential_manager_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        format: string;
                                        type: string;
                                    };
                                    is_multi_phone_sync_credential: {
                                        default: boolean;
                                        type: string;
                                    };
                                    starts_at: {
                                        format: string;
                                        type: string;
                                    };
                                    visionline_metadata: {
                                        properties: {
                                            assa_abloy_credential_service_mobile_endpoint_id: {
                                                format: string;
                                                type: string;
                                            };
                                            auto_join: {
                                                type: string;
                                            };
                                            card_format: {
                                                enum: string[];
                                                type: string;
                                            };
                                            card_function_type: {
                                                default: string;
                                                enum: string[];
                                                type: string;
                                            };
                                            is_override_key: {
                                                deprecated: boolean;
                                                type: string;
                                                'x-deprecated': string;
                                            };
                                            joiner_acs_credential_ids: {
                                                items: {
                                                    format: string;
                                                    type: string;
                                                };
                                                type: string;
                                            };
                                            override: {
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/credentials/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                allOf: ({
                                    oneOf: ({
                                        properties: {
                                            acs_user_id: {
                                                format: string;
                                                type: string;
                                            };
                                            acs_system_id?: never;
                                            user_identity_id?: never;
                                        };
                                        required: string[];
                                        type: string;
                                    } | {
                                        properties: {
                                            acs_system_id: {
                                                format: string;
                                                type: string;
                                            };
                                            acs_user_id?: never;
                                            user_identity_id?: never;
                                        };
                                        required: string[];
                                        type: string;
                                    } | {
                                        properties: {
                                            acs_system_id: {
                                                format: string;
                                                type: string;
                                            };
                                            acs_user_id: {
                                                format: string;
                                                type: string;
                                            };
                                            user_identity_id?: never;
                                        };
                                        required: string[];
                                        type: string;
                                    } | {
                                        properties: {
                                            user_identity_id: {
                                                format: string;
                                                type: string;
                                            };
                                            acs_user_id?: never;
                                            acs_system_id?: never;
                                        };
                                        required: string[];
                                        type: string;
                                    })[];
                                    properties?: never;
                                    type?: never;
                                } | {
                                    properties: {
                                        created_before: {
                                            format: string;
                                            type: string;
                                        };
                                        is_multi_phone_sync_credential: {
                                            type: string;
                                        };
                                        limit: {
                                            default: number;
                                            format: string;
                                            type: string;
                                        };
                                    };
                                    type: string;
                                    oneOf?: never;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credentials: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    client_session?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/list_accessible_entrances': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_entrances: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/unassign': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/credentials/unmanaged/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            properties: {
                                                access_method: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                                acs_credential_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                acs_credential_pool_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                acs_system_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                acs_user_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                card_number: {
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                code: {
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                created_at: {
                                                    format: string;
                                                    type: string;
                                                };
                                                display_name: {
                                                    minLength: number;
                                                    type: string;
                                                };
                                                encoded_at: {
                                                    format: string;
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                ends_at: {
                                                    type: string;
                                                };
                                                errors: {
                                                    items: {
                                                        properties: {
                                                            error_code: {
                                                                type: string;
                                                            };
                                                            message: {
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    type: string;
                                                };
                                                external_type: {
                                                    enum: string[];
                                                    type: string;
                                                };
                                                external_type_display_name: {
                                                    type: string;
                                                };
                                                is_encoded: {
                                                    type: string;
                                                };
                                                is_latest_desired_state_synced_with_provider: {
                                                    type: string;
                                                };
                                                is_managed: {
                                                    enum: boolean[];
                                                    type: string;
                                                };
                                                is_multi_phone_sync_credential: {
                                                    type: string;
                                                };
                                                latest_desired_state_synced_with_provider_at: {
                                                    format: string;
                                                    type: string;
                                                };
                                                parent_acs_credential_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                starts_at: {
                                                    type: string;
                                                };
                                                visionline_metadata: {
                                                    properties: {
                                                        auto_join: {
                                                            type: string;
                                                        };
                                                        card_function_type: {
                                                            enum: string[];
                                                            type: string;
                                                        };
                                                        card_id: {
                                                            type: string;
                                                        };
                                                        common_acs_entrance_ids: {
                                                            items: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                            type: string;
                                                        };
                                                        credential_id: {
                                                            type: string;
                                                        };
                                                        guest_acs_entrance_ids: {
                                                            items: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                            type: string;
                                                        };
                                                        is_valid: {
                                                            type: string;
                                                        };
                                                        joiner_acs_credential_ids: {
                                                            items: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                    type: string;
                                                };
                                                warnings: {
                                                    items: {
                                                        properties: {
                                                            message: {
                                                                type: string;
                                                            };
                                                            warning_code: {
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    type: string;
                                                };
                                                workspace_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/unmanaged/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        acs_user_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_system_id?: never;
                                        user_identity_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        acs_system_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_user_id?: never;
                                        user_identity_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        acs_system_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_user_id: {
                                            format: string;
                                            type: string;
                                        };
                                        user_identity_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        user_identity_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_user_id?: never;
                                        acs_system_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credentials: {
                                            items: {
                                                properties: {
                                                    access_method: {
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    acs_credential_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    acs_credential_pool_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    acs_system_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    acs_user_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    card_number: {
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    code: {
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    created_at: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    display_name: {
                                                        minLength: number;
                                                        type: string;
                                                    };
                                                    encoded_at: {
                                                        format: string;
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    ends_at: {
                                                        type: string;
                                                    };
                                                    errors: {
                                                        items: {
                                                            properties: {
                                                                error_code: {
                                                                    type: string;
                                                                };
                                                                message: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                            type: string;
                                                        };
                                                        type: string;
                                                    };
                                                    external_type: {
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    external_type_display_name: {
                                                        type: string;
                                                    };
                                                    is_encoded: {
                                                        type: string;
                                                    };
                                                    is_latest_desired_state_synced_with_provider: {
                                                        type: string;
                                                    };
                                                    is_managed: {
                                                        enum: boolean[];
                                                        type: string;
                                                    };
                                                    is_multi_phone_sync_credential: {
                                                        type: string;
                                                    };
                                                    latest_desired_state_synced_with_provider_at: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    parent_acs_credential_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    starts_at: {
                                                        type: string;
                                                    };
                                                    visionline_metadata: {
                                                        properties: {
                                                            auto_join: {
                                                                type: string;
                                                            };
                                                            card_function_type: {
                                                                enum: string[];
                                                                type: string;
                                                            };
                                                            card_id: {
                                                                type: string;
                                                            };
                                                            common_acs_entrance_ids: {
                                                                items: {
                                                                    format: string;
                                                                    type: string;
                                                                };
                                                                type: string;
                                                            };
                                                            credential_id: {
                                                                type: string;
                                                            };
                                                            guest_acs_entrance_ids: {
                                                                items: {
                                                                    format: string;
                                                                    type: string;
                                                                };
                                                                type: string;
                                                            };
                                                            is_valid: {
                                                                type: string;
                                                            };
                                                            joiner_acs_credential_ids: {
                                                                items: {
                                                                    format: string;
                                                                    type: string;
                                                                };
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    warnings: {
                                                        items: {
                                                            properties: {
                                                                message: {
                                                                    type: string;
                                                                };
                                                                warning_code: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                            type: string;
                                                        };
                                                        type: string;
                                                    };
                                                    workspace_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/credentials/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        type: string;
                                    };
                                    code: {
                                        pattern: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        type: string;
                                    };
                                    code: {
                                        pattern: string;
                                        type: string;
                                    };
                                    ends_at: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credential: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/encoders/encode_card': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        acs_system_id: {
                                            format: string;
                                            type: string;
                                        };
                                        device_name: {
                                            type: string;
                                        };
                                        device_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        device_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_system_id?: never;
                                        device_name?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-undocumented': string;
            };
        };
        '/acs/encoders/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        acs_system_ids: {
                                            items: {
                                                format: string;
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        device_ids: {
                                            items: {
                                                format: string;
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        limit: {
                                            default: number;
                                            format: string;
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        device_ids: {
                                            items: {
                                                format: string;
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        limit: {
                                            default: number;
                                            format: string;
                                            type: string;
                                        };
                                        acs_system_ids?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        acs_system_ids: {
                                            items: {
                                                format: string;
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        limit: {
                                            default: number;
                                            format: string;
                                            type: string;
                                        };
                                        device_ids?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-undocumented': string;
            };
        };
        '/acs/encoders/read_card': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        acs_system_id: {
                                            format: string;
                                            type: string;
                                        };
                                        device_name: {
                                            type: string;
                                        };
                                        device_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        device_id: {
                                            format: string;
                                            type: string;
                                        };
                                        acs_system_id?: never;
                                        device_name?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-undocumented': string;
            };
        };
        '/acs/entrances/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_entrance_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_entrance: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    access_token?: never;
                    user_session?: never;
                    client_session?: never;
                } | {
                    access_token: never[];
                    api_key?: never;
                    user_session?: never;
                    client_session?: never;
                } | {
                    user_session: never[];
                    api_key?: never;
                    access_token?: never;
                    client_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    access_token?: never;
                    user_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/entrances/grant_access': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_entrance_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/acs/entrances/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_entrances: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    client_session?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/entrances/list_credentials_with_access': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_entrance_id: {
                                        format: string;
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_credentials: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/acs/systems/get': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_system: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/systems/list': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_systems: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/systems/list_compatible_credential_manager_acs_systems': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_systems: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/users/add_to_access_group': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
            put: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
                'x-title': string;
            };
        };
        '/acs/users/create': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_schedule: {
                                        description: string;
                                        properties: {
                                            ends_at: {
                                                format: string;
                                                type: string;
                                            };
                                            starts_at: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    acs_access_group_ids: {
                                        default: never[];
                                        description: string;
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    acs_system_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    email: {
                                        deprecated: boolean;
                                        format: string;
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    email_address: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    full_name: {
                                        description: string;
                                        type: string;
                                    };
                                    phone_number: {
                                        description: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_user: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/users/delete': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/acs/users/get': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_user: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/users/list': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_email_address: {
                                        description: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_phone_number: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_users: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/users/list_accessible_entrances': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_entrances: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-response-key': string;
                'x-title': string;
            };
        };
        '/acs/users/remove_from_access_group': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_access_group_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/acs/users/revoke_access_to_all_entrances': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/acs/users/suspend': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/acs/users/unmanaged/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_user: {
                                            properties: {
                                                access_schedule: {
                                                    description: string;
                                                    properties: {
                                                        ends_at: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                        starts_at: {
                                                            format: string;
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                    type: string;
                                                };
                                                acs_system_id: {
                                                    description: string;
                                                    format: string;
                                                    type: string;
                                                };
                                                acs_user_id: {
                                                    description: string;
                                                    format: string;
                                                    type: string;
                                                };
                                                created_at: {
                                                    description: string;
                                                    format: string;
                                                    type: string;
                                                };
                                                display_name: {
                                                    description: string;
                                                    type: string;
                                                };
                                                email: {
                                                    deprecated: boolean;
                                                    format: string;
                                                    type: string;
                                                    'x-deprecated': string;
                                                };
                                                email_address: {
                                                    description: string;
                                                    format: string;
                                                    type: string;
                                                };
                                                errors: {
                                                    description: string;
                                                    items: {
                                                        description: string;
                                                        oneOf: {
                                                            description: string;
                                                            properties: {
                                                                created_at: {
                                                                    description: string;
                                                                    format: string;
                                                                    type: string;
                                                                };
                                                                error_code: {
                                                                    enum: string[];
                                                                    type: string;
                                                                };
                                                                message: {
                                                                    description: string;
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                            type: string;
                                                        }[];
                                                    };
                                                    type: string;
                                                };
                                                external_type: {
                                                    description: string;
                                                    enum: string[];
                                                    type: string;
                                                };
                                                external_type_display_name: {
                                                    description: string;
                                                    type: string;
                                                };
                                                full_name: {
                                                    description: string;
                                                    type: string;
                                                };
                                                hid_acs_system_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                is_latest_desired_state_synced_with_provider: {
                                                    type: string;
                                                    'x-undocumented': string;
                                                };
                                                is_managed: {
                                                    enum: boolean[];
                                                    type: string;
                                                };
                                                is_suspended: {
                                                    description: string;
                                                    type: string;
                                                };
                                                latest_desired_state_synced_with_provider_at: {
                                                    format: string;
                                                    type: string;
                                                    'x-undocumented': string;
                                                };
                                                phone_number: {
                                                    description: string;
                                                    type: string;
                                                };
                                                user_identity_email_address: {
                                                    description: string;
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                user_identity_full_name: {
                                                    description: string;
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                user_identity_id: {
                                                    description: string;
                                                    type: string;
                                                };
                                                user_identity_phone_number: {
                                                    description: string;
                                                    nullable: boolean;
                                                    type: string;
                                                };
                                                warnings: {
                                                    description: string;
                                                    items: {
                                                        description: string;
                                                        oneOf: {
                                                            description: string;
                                                            properties: {
                                                                created_at: {
                                                                    format: string;
                                                                    type: string;
                                                                };
                                                                message: {
                                                                    type: string;
                                                                };
                                                                warning_code: {
                                                                    enum: string[];
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                            type: string;
                                                        }[];
                                                    };
                                                    type: string;
                                                };
                                                workspace_id: {
                                                    description: string;
                                                    format: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-undocumented': string;
            };
        };
        '/acs/users/unmanaged/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_email_address: {
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_phone_number: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_users: {
                                            items: {
                                                properties: {
                                                    access_schedule: {
                                                        description: string;
                                                        properties: {
                                                            ends_at: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                            starts_at: {
                                                                format: string;
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                        type: string;
                                                    };
                                                    acs_system_id: {
                                                        description: string;
                                                        format: string;
                                                        type: string;
                                                    };
                                                    acs_user_id: {
                                                        description: string;
                                                        format: string;
                                                        type: string;
                                                    };
                                                    created_at: {
                                                        description: string;
                                                        format: string;
                                                        type: string;
                                                    };
                                                    display_name: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    email: {
                                                        deprecated: boolean;
                                                        format: string;
                                                        type: string;
                                                        'x-deprecated': string;
                                                    };
                                                    email_address: {
                                                        description: string;
                                                        format: string;
                                                        type: string;
                                                    };
                                                    errors: {
                                                        description: string;
                                                        items: {
                                                            description: string;
                                                            oneOf: {
                                                                description: string;
                                                                properties: {
                                                                    created_at: {
                                                                        description: string;
                                                                        format: string;
                                                                        type: string;
                                                                    };
                                                                    error_code: {
                                                                        enum: string[];
                                                                        type: string;
                                                                    };
                                                                    message: {
                                                                        description: string;
                                                                        type: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                                type: string;
                                                            }[];
                                                        };
                                                        type: string;
                                                    };
                                                    external_type: {
                                                        description: string;
                                                        enum: string[];
                                                        type: string;
                                                    };
                                                    external_type_display_name: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    full_name: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    hid_acs_system_id: {
                                                        format: string;
                                                        type: string;
                                                    };
                                                    is_latest_desired_state_synced_with_provider: {
                                                        type: string;
                                                        'x-undocumented': string;
                                                    };
                                                    is_managed: {
                                                        enum: boolean[];
                                                        type: string;
                                                    };
                                                    is_suspended: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    latest_desired_state_synced_with_provider_at: {
                                                        format: string;
                                                        type: string;
                                                        'x-undocumented': string;
                                                    };
                                                    phone_number: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    user_identity_email_address: {
                                                        description: string;
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    user_identity_full_name: {
                                                        description: string;
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    user_identity_id: {
                                                        description: string;
                                                        type: string;
                                                    };
                                                    user_identity_phone_number: {
                                                        description: string;
                                                        nullable: boolean;
                                                        type: string;
                                                    };
                                                    warnings: {
                                                        description: string;
                                                        items: {
                                                            description: string;
                                                            oneOf: {
                                                                description: string;
                                                                properties: {
                                                                    created_at: {
                                                                        format: string;
                                                                        type: string;
                                                                    };
                                                                    message: {
                                                                        type: string;
                                                                    };
                                                                    warning_code: {
                                                                        enum: string[];
                                                                        type: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                                type: string;
                                                            }[];
                                                        };
                                                        type: string;
                                                    };
                                                    workspace_id: {
                                                        description: string;
                                                        format: string;
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                                type: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
                'x-undocumented': string;
            };
        };
        '/acs/users/unsuspend': {
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/acs/users/update': {
            patch: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_schedule: {
                                        description: string;
                                        nullable: boolean;
                                        properties: {
                                            ends_at: {
                                                format: string;
                                                type: string;
                                            };
                                            starts_at: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    email: {
                                        deprecated: boolean;
                                        format: string;
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    email_address: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    full_name: {
                                        description: string;
                                        type: string;
                                    };
                                    hid_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    phone_number: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
                'x-title': string;
            };
            post: {
                description: string;
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_schedule: {
                                        description: string;
                                        nullable: boolean;
                                        properties: {
                                            ends_at: {
                                                format: string;
                                                type: string;
                                            };
                                            starts_at: {
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        required: string[];
                                        type: string;
                                    };
                                    acs_user_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    email: {
                                        deprecated: boolean;
                                        format: string;
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    email_address: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    full_name: {
                                        description: string;
                                        type: string;
                                    };
                                    hid_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    phone_number: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-title': string;
            };
        };
        '/action_attempts/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    action_attempt_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/action_attempts/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    action_attempt_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempts: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/client_sessions/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    expires_at: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        minLength: number;
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    expires_at: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        minLength: number;
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/client_sessions/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/client_sessions/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/client_sessions/get_or_create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    expires_at: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        minLength: number;
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    expires_at: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        minLength: number;
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/client_sessions/grant_access': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        type: string;
                                    };
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        type: string;
                                    };
                                    connect_webview_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                    user_identity_ids: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_session: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/client_sessions/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        type: string;
                                    };
                                    connect_webview_id: {
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                    user_identity_id: {
                                        type: string;
                                    };
                                    without_user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        client_sessions: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/client_sessions/revoke': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    client_session_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/connect_webviews/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    accepted_providers: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    automatically_manage_new_devices: {
                                        default: boolean;
                                        type: string;
                                    };
                                    custom_metadata: {
                                        additionalProperties: {
                                            nullable: boolean;
                                            oneOf: ({
                                                maxLength: number;
                                                type: string;
                                            } | {
                                                type: string;
                                                maxLength?: never;
                                            })[];
                                        };
                                        type: string;
                                    };
                                    custom_redirect_failure_url: {
                                        type: string;
                                    };
                                    custom_redirect_url: {
                                        type: string;
                                    };
                                    device_selection_mode: {
                                        enum: string[];
                                        type: string;
                                    };
                                    provider_category: {
                                        enum: string[];
                                        type: string;
                                    };
                                    wait_for_device_creation: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connect_webview: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/connect_webviews/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/connect_webviews/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connect_webview: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/connect_webviews/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        description: string;
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connect_webviews: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/connected_accounts/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connected_account_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/connected_accounts/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        connected_account_id: {
                                            format: string;
                                            type: string;
                                        };
                                        email?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        email: {
                                            format: string;
                                            type: string;
                                        };
                                        connected_account_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connected_account: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/connected_accounts/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        description: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        description: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connected_accounts: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/connected_accounts/update': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    automatically_manage_new_devices: {
                                        type: string;
                                    };
                                    connected_account_id: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata: {
                                        additionalProperties: {
                                            nullable: boolean;
                                            oneOf: ({
                                                maxLength: number;
                                                type: string;
                                            } | {
                                                type: string;
                                                maxLength?: never;
                                            })[];
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        connected_account: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/devices/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        device: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_type: {
                                        oneOf: {
                                            enum: string[];
                                            type: string;
                                        }[];
                                    };
                                    device_types: {
                                        items: {
                                            oneOf: {
                                                enum: string[];
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    exclude_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    manufacturer: {
                                        enum: string[];
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/list_device_providers': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    provider_category: {
                                        enum: string[];
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        device_providers: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/simulate/connect': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/devices/simulate/disconnect': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/devices/simulate/remove': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/devices/unmanaged/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        device: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/unmanaged/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_type: {
                                        oneOf: {
                                            enum: string[];
                                            type: string;
                                        }[];
                                    };
                                    device_types: {
                                        items: {
                                            oneOf: {
                                                enum: string[];
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    exclude_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    manufacturer: {
                                        enum: string[];
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/devices/unmanaged/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    is_managed: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    is_managed: {
                                        enum: boolean[];
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/devices/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    custom_metadata: {
                                        additionalProperties: {
                                            nullable: boolean;
                                            oneOf: ({
                                                maxLength: number;
                                                type: string;
                                            } | {
                                                type: string;
                                                maxLength?: never;
                                            })[];
                                        };
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    is_managed: {
                                        default: boolean;
                                        type: string;
                                    };
                                    name: {
                                        nullable: boolean;
                                        type: string;
                                    };
                                    properties: {
                                        properties: {
                                            name: {
                                                nullable: boolean;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    custom_metadata: {
                                        additionalProperties: {
                                            nullable: boolean;
                                            oneOf: ({
                                                maxLength: number;
                                                type: string;
                                            } | {
                                                type: string;
                                                maxLength?: never;
                                            })[];
                                        };
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    is_managed: {
                                        default: boolean;
                                        type: string;
                                    };
                                    name: {
                                        nullable: boolean;
                                        type: string;
                                    };
                                    properties: {
                                        properties: {
                                            name: {
                                                nullable: boolean;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/events/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    event_id: {
                                        format: string;
                                        type: string;
                                    };
                                    event_type: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        event: {
                                            $ref: string;
                                        };
                                        message: {
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/events/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    access_code_id: {
                                        format: string;
                                        type: string;
                                    };
                                    access_code_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    between: {
                                        items: {
                                            oneOf: ({
                                                type: string;
                                                format?: never;
                                            } | {
                                                format: string;
                                                type: string;
                                            })[];
                                        };
                                        maxItems: number;
                                        minItems: number;
                                        type: string;
                                    };
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    event_type: {
                                        enum: string[];
                                        type: string;
                                    };
                                    event_types: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    since: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        events: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/locks/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        device: {
                                            $ref: string;
                                        };
                                        lock: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-deprecated': string;
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/locks/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_type: {
                                        oneOf: {
                                            enum: string[];
                                            type: string;
                                        }[];
                                    };
                                    device_types: {
                                        items: {
                                            oneOf: {
                                                enum: string[];
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    exclude_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    manufacturer: {
                                        enum: string[];
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        locks: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/locks/lock_door': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/locks/unlock_door': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/networks/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    network_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        network: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/networks/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {};
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        networks: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/noise_sensors/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_type: {
                                        oneOf: {
                                            enum: string[];
                                            type: string;
                                        }[];
                                    };
                                    device_types: {
                                        items: {
                                            oneOf: {
                                                enum: string[];
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    exclude_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    manufacturer: {
                                        enum: string[];
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        noise_sensors: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/noise_sensors/noise_thresholds/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_daily_at: {
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    noise_threshold_decibels: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_nrs: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_daily_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        noise_threshold: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/noise_sensors/noise_thresholds/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/noise_sensors/noise_thresholds/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    noise_threshold_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        noise_threshold: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/noise_sensors/noise_thresholds/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    is_programmed: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        noise_thresholds: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/noise_sensors/noise_thresholds/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_daily_at: {
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    noise_threshold_decibels: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_id: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_nrs: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_daily_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_daily_at: {
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    noise_threshold_decibels: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_id: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_nrs: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_daily_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    ends_daily_at: {
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    noise_threshold_decibels: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_id: {
                                        format: string;
                                        type: string;
                                    };
                                    noise_threshold_nrs: {
                                        format: string;
                                        type: string;
                                    };
                                    starts_daily_at: {
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/noise_sensors/simulate/trigger_noise_threshold': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/phones/deactivate': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/phones/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_id: {
                                        format: string;
                                        type: string;
                                    };
                                    owner_user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        phones: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/phones/simulate/create_sandbox_phone': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    assa_abloy_metadata: {
                                        default: {};
                                        properties: {
                                            application_version: {
                                                default: string;
                                                type: string;
                                            };
                                            ble_capability: {
                                                default: boolean;
                                                type: string;
                                            };
                                            hce_capability: {
                                                default: boolean;
                                                type: string;
                                            };
                                            nfc_capability: {
                                                default: boolean;
                                                type: string;
                                            };
                                            seos_applet_version: {
                                                default: string;
                                                type: string;
                                            };
                                            seos_tsm_endpoint_id: {
                                                default: number;
                                                format: string;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                    custom_sdk_installation_id: {
                                        type: string;
                                    };
                                    phone_metadata: {
                                        default: {};
                                        properties: {
                                            device_manufacturer: {
                                                default: string;
                                                type: string;
                                            };
                                            device_model: {
                                                default: string;
                                                type: string;
                                            };
                                            operating_system: {
                                                default: string;
                                                enum: string[];
                                                type: string;
                                            };
                                            os_version: {
                                                default: string;
                                                type: string;
                                            };
                                        };
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        phone: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/activate_climate_preset': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/cool': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/create_climate_preset': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    fan_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    hvac_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    manual_override_allowed: {
                                        type: string;
                                    };
                                    name: {
                                        default: null;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/thermostats/delete_climate_preset': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/thermostats/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        thermostat: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-deprecated': string;
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/heat': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/heat_cool': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    connect_webview_id: {
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_id: {
                                        description: string;
                                        format: string;
                                        type: string;
                                    };
                                    connected_account_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    created_before: {
                                        format: string;
                                        type: string;
                                    };
                                    custom_metadata_has: {
                                        additionalProperties: {
                                            oneOf: {
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    device_ids: {
                                        items: {
                                            format: string;
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    device_type: {
                                        oneOf: {
                                            enum: string[];
                                            type: string;
                                        }[];
                                    };
                                    device_types: {
                                        items: {
                                            oneOf: {
                                                enum: string[];
                                                type: string;
                                            }[];
                                        };
                                        type: string;
                                    };
                                    exclude_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    include_if: {
                                        items: {
                                            enum: string[];
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    limit: {
                                        default: number;
                                        format: string;
                                        type: string;
                                    };
                                    manufacturer: {
                                        enum: string[];
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        thermostats: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    client_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                    client_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    client_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/off': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/schedules/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    device_id: {
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    max_override_period_minutes: {
                                        default: number;
                                        minimum: number;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        thermostat_schedule: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/schedules/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    thermostat_schedule_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/thermostats/schedules/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    thermostat_schedule_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        thermostat_schedule: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/schedules/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identifier_key: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        thermostat_schedules: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    client_session?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/schedules/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    max_override_period_minutes: {
                                        minimum: number;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    thermostat_schedule_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    ends_at: {
                                        type: string;
                                    };
                                    max_override_period_minutes: {
                                        minimum: number;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    starts_at: {
                                        type: string;
                                    };
                                    thermostat_schedule_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/thermostats/set_fallback_climate_preset': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/thermostats/set_fan_mode': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    fan_mode: {
                                        deprecated: boolean;
                                        enum: string[];
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    fan_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    sync: {
                                        default: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/thermostats/update_climate_preset': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    fan_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    hvac_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    manual_override_allowed: {
                                        type: string;
                                    };
                                    name: {
                                        default: null;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    climate_preset_key: {
                                        type: string;
                                    };
                                    cooling_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    cooling_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    fan_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    heating_set_point_celsius: {
                                        format: string;
                                        type: string;
                                    };
                                    heating_set_point_fahrenheit: {
                                        format: string;
                                        type: string;
                                    };
                                    hvac_mode_setting: {
                                        enum: string[];
                                        type: string;
                                    };
                                    manual_override_allowed: {
                                        type: string;
                                    };
                                    name: {
                                        default: null;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/user_identities/add_acs_user': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/user_identities/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    email_address: {
                                        format: string;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    full_name: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    phone_number: {
                                        nullable: boolean;
                                        type: string;
                                    };
                                    user_identity_key: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        user_identity: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/user_identities/enrollment_automations/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    enrollment_automation_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/user_identities/enrollment_automations/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    enrollment_automation_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        enrollment_automation: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/enrollment_automations/launch': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_credential_pool_id: {
                                        format: string;
                                        type: string;
                                    };
                                    create_credential_manager_user: {
                                        type: string;
                                    };
                                    credential_manager_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                    credential_manager_acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        enrollment_automation: {
                                            properties: {
                                                acs_credential_provisioning_automation_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                created_at: {
                                                    format: string;
                                                    type: string;
                                                };
                                                credential_manager_acs_system_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                enrollment_automation_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                user_identity_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                                workspace_id: {
                                                    format: string;
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/enrollment_automations/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        enrollment_automations: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                oneOf: ({
                                    properties: {
                                        user_identity_id: {
                                            format: string;
                                            type: string;
                                        };
                                        user_identity_key?: never;
                                    };
                                    required: string[];
                                    type: string;
                                } | {
                                    properties: {
                                        user_identity_key: {
                                            type: string;
                                        };
                                        user_identity_id?: never;
                                    };
                                    required: string[];
                                    type: string;
                                })[];
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        user_identity: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/grant_access_to_device': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/user_identities/list': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    credential_manager_acs_system_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        user_identities: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    client_session?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/list_accessible_devices': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        accessible_devices: {
                                            deprecated: boolean;
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                            'x-deprecated': string;
                                        };
                                        devices: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/list_acs_systems': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_systems: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    client_session: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    pat_with_workspace: never[];
                    client_session?: never;
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    client_session?: never;
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/list_acs_users': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        acs_users: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/user_identities/remove_acs_user': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    acs_user_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/user_identities/revoke_access_to_device': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    device_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/user_identities/update': {
            patch: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    email_address: {
                                        format: string;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    full_name: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    phone_number: {
                                        nullable: boolean;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_key: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    email_address: {
                                        format: string;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    full_name: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                    phone_number: {
                                        nullable: boolean;
                                        type: string;
                                    };
                                    user_identity_id: {
                                        format: string;
                                        type: string;
                                    };
                                    user_identity_key: {
                                        minLength: number;
                                        nullable: boolean;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    console_session?: never;
                    api_key?: never;
                } | {
                    console_session: never[];
                    pat_with_workspace?: never;
                    api_key?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/webhooks/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    event_types: {
                                        default: string[];
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    url: {
                                        format: string;
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        webhook: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/webhooks/delete': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    webhook_id: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
        };
        '/webhooks/get': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    webhook_id: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        webhook: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/webhooks/list': {
            get: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        webhooks: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        webhooks: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/webhooks/update': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    event_types: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    webhook_id: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
            };
            put: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    event_types: {
                                        items: {
                                            type: string;
                                        };
                                        type: string;
                                    };
                                    webhook_id: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
        };
        '/workspaces/create': {
            post: {
                operationId: string;
                requestBody: {
                    content: {
                        'application/json': {
                            schema: {
                                properties: {
                                    company_name: {
                                        type: string;
                                    };
                                    connect_partner_name: {
                                        deprecated: boolean;
                                        nullable: boolean;
                                        type: string;
                                        'x-deprecated': string;
                                    };
                                    is_sandbox: {
                                        default: boolean;
                                        type: string;
                                    };
                                    name: {
                                        type: string;
                                    };
                                    webview_logo_shape: {
                                        enum: string[];
                                        type: string;
                                    };
                                    webview_primary_button_color: {
                                        type: string;
                                    };
                                };
                                required: string[];
                                type: string;
                            };
                        };
                    };
                };
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        workspace: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: {
                    pat_without_workspace: never[];
                }[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/workspaces/get': {
            get: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        workspace: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    user_session?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                } | {
                    user_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    user_session?: never;
                    pat_with_workspace?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    user_session?: never;
                    client_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        workspace: {
                                            $ref: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    user_session?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                } | {
                    user_session: never[];
                    api_key?: never;
                    client_session?: never;
                    pat_with_workspace?: never;
                } | {
                    client_session: never[];
                    api_key?: never;
                    user_session?: never;
                    pat_with_workspace?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    user_session?: never;
                    client_session?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/workspaces/list': {
            get: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        workspaces: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    pat_without_workspace: never[];
                    pat_with_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    user_session: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    user_session_without_workspace: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    client_session?: never;
                } | {
                    client_session: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-ignore': boolean;
            };
            post: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        ok: {
                                            type: string;
                                        };
                                        workspaces: {
                                            items: {
                                                $ref: string;
                                            };
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    pat_with_workspace: never[];
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    pat_without_workspace: never[];
                    pat_with_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    user_session: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    user_session_without_workspace: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    api_key?: never;
                    client_session?: never;
                } | {
                    api_key: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    client_session?: never;
                } | {
                    client_session: never[];
                    pat_with_workspace?: never;
                    pat_without_workspace?: never;
                    user_session?: never;
                    user_session_without_workspace?: never;
                    api_key?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
        '/workspaces/reset_sandbox': {
            post: {
                operationId: string;
                responses: {
                    200: {
                        content: {
                            'application/json': {
                                schema: {
                                    properties: {
                                        action_attempt: {
                                            $ref: string;
                                        };
                                        ok: {
                                            type: string;
                                        };
                                    };
                                    required: string[];
                                    type: string;
                                };
                            };
                        };
                        description: string;
                    };
                    400: {
                        description: string;
                    };
                    401: {
                        description: string;
                    };
                };
                security: ({
                    api_key: never[];
                    pat_with_workspace?: never;
                    console_session?: never;
                } | {
                    pat_with_workspace: never[];
                    api_key?: never;
                    console_session?: never;
                } | {
                    console_session: never[];
                    api_key?: never;
                    pat_with_workspace?: never;
                })[];
                summary: string;
                tags: string[];
                'x-fern-sdk-group-name': string[];
                'x-fern-sdk-method-name': string;
                'x-fern-sdk-return-value': string;
            };
        };
    };
    servers: {
        url: string;
    }[];
    tags: {
        description: string;
        name: string;
    }[];
};

interface Routes {
    '/access_codes/create': {
        route: '/access_codes/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            name?: string | undefined;
            starts_at?: string | undefined;
            ends_at?: string | undefined;
            code?: string | undefined;
            sync?: boolean;
            attempt_for_offline_device?: boolean;
            common_code_key?: string | undefined;
            prefer_native_scheduling?: boolean | undefined;
            use_backup_access_code_pool?: boolean | undefined;
            allow_external_modification?: boolean | undefined;
            is_external_modification_allowed?: boolean | undefined;
            preferred_code_length?: number | undefined;
            use_offline_access_code?: boolean | undefined;
            is_offline_access_code?: boolean | undefined;
            is_one_time_use?: boolean | undefined;
            max_time_rounding?: '1hour' | '1day' | '1h' | '1d';
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
            access_code: {
                /** Unique identifier for a group of access codes that share the same code. */
                common_code_key: string | null;
                /** Indicates whether the code is set on the device according to a preconfigured schedule. */
                is_scheduled_on_device?: boolean | undefined;
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Indicates whether the access code is waiting for a code assignment. */
                is_waiting_for_code_assignment?: boolean | undefined;
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Indicates whether Seam manages the access code. */
                is_managed: true;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                /**
                    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
                   */
                status: 'setting' | 'set' | 'unset' | 'removing' | 'unknown';
                /** Indicates whether a backup access code is available for use if the primary access code is lost or compromised. */
                is_backup_access_code_available: boolean;
                /** Indicates whether the access code is a backup code. */
                is_backup?: boolean | undefined;
                /** Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code. */
                pulled_backup_access_code_id?: (string | null) | undefined;
                /** Indicates whether changes to the access code from external sources are permitted. */
                is_external_modification_allowed: boolean;
                /** Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use. */
                is_one_time_use: boolean;
                /** Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection. */
                is_offline_access_code: boolean;
            };
        };
    };
    '/access_codes/create_multiple': {
        route: '/access_codes/create_multiple';
        method: 'POST' | 'PUT';
        queryParams: {};
        jsonBody: {
            device_ids: string[];
            behavior_when_code_cannot_be_shared?: 'throw' | 'create_random_code';
            preferred_code_length?: number | undefined;
            name?: string | undefined;
            starts_at?: string | undefined;
            ends_at?: string | undefined;
            code?: string | undefined;
            attempt_for_offline_device?: boolean;
            prefer_native_scheduling?: boolean | undefined;
            use_backup_access_code_pool?: boolean | undefined;
            allow_external_modification?: boolean | undefined;
            is_external_modification_allowed?: boolean | undefined;
            use_offline_access_code?: boolean | undefined;
            is_offline_access_code?: boolean | undefined;
            is_one_time_use?: boolean | undefined;
            max_time_rounding?: '1hour' | '1day' | '1h' | '1d';
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            access_codes: Array<{
                /** Unique identifier for a group of access codes that share the same code. */
                common_code_key: string | null;
                /** Indicates whether the code is set on the device according to a preconfigured schedule. */
                is_scheduled_on_device?: boolean | undefined;
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Indicates whether the access code is waiting for a code assignment. */
                is_waiting_for_code_assignment?: boolean | undefined;
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Indicates whether Seam manages the access code. */
                is_managed: true;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                /**
                    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
                   */
                status: 'setting' | 'set' | 'unset' | 'removing' | 'unknown';
                /** Indicates whether a backup access code is available for use if the primary access code is lost or compromised. */
                is_backup_access_code_available: boolean;
                /** Indicates whether the access code is a backup code. */
                is_backup?: boolean | undefined;
                /** Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code. */
                pulled_backup_access_code_id?: (string | null) | undefined;
                /** Indicates whether changes to the access code from external sources are permitted. */
                is_external_modification_allowed: boolean;
                /** Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use. */
                is_one_time_use: boolean;
                /** Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection. */
                is_offline_access_code: boolean;
            }>;
        };
    };
    '/access_codes/delete': {
        route: '/access_codes/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            access_code_id: string;
            sync?: boolean;
        };
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/access_codes/generate_code': {
        route: '/access_codes/generate_code';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
        };
        formData: {};
        jsonResponse: {
            generated_code: {
                device_id: string;
                code: string;
            };
        };
    };
    '/access_codes/get': {
        route: '/access_codes/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            access_code_id?: string | undefined;
            code?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            access_code: {
                /** Unique identifier for a group of access codes that share the same code. */
                common_code_key: string | null;
                /** Indicates whether the code is set on the device according to a preconfigured schedule. */
                is_scheduled_on_device?: boolean | undefined;
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Indicates whether the access code is waiting for a code assignment. */
                is_waiting_for_code_assignment?: boolean | undefined;
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Indicates whether Seam manages the access code. */
                is_managed: true;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                /**
                    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
                   */
                status: 'setting' | 'set' | 'unset' | 'removing' | 'unknown';
                /** Indicates whether a backup access code is available for use if the primary access code is lost or compromised. */
                is_backup_access_code_available: boolean;
                /** Indicates whether the access code is a backup code. */
                is_backup?: boolean | undefined;
                /** Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code. */
                pulled_backup_access_code_id?: (string | null) | undefined;
                /** Indicates whether changes to the access code from external sources are permitted. */
                is_external_modification_allowed: boolean;
                /** Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use. */
                is_one_time_use: boolean;
                /** Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection. */
                is_offline_access_code: boolean;
            };
        };
    };
    '/access_codes/list': {
        route: '/access_codes/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            access_code_ids?: string[] | undefined;
            user_identifier_key?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            access_codes: Array<{
                /** Unique identifier for a group of access codes that share the same code. */
                common_code_key: string | null;
                /** Indicates whether the code is set on the device according to a preconfigured schedule. */
                is_scheduled_on_device?: boolean | undefined;
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Indicates whether the access code is waiting for a code assignment. */
                is_waiting_for_code_assignment?: boolean | undefined;
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Indicates whether Seam manages the access code. */
                is_managed: true;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                /**
                    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
                   */
                status: 'setting' | 'set' | 'unset' | 'removing' | 'unknown';
                /** Indicates whether a backup access code is available for use if the primary access code is lost or compromised. */
                is_backup_access_code_available: boolean;
                /** Indicates whether the access code is a backup code. */
                is_backup?: boolean | undefined;
                /** Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code. */
                pulled_backup_access_code_id?: (string | null) | undefined;
                /** Indicates whether changes to the access code from external sources are permitted. */
                is_external_modification_allowed: boolean;
                /** Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use. */
                is_one_time_use: boolean;
                /** Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection. */
                is_offline_access_code: boolean;
            }>;
        };
    };
    '/access_codes/pull_backup_access_code': {
        route: '/access_codes/pull_backup_access_code';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            access_code_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            backup_access_code: {
                /** Unique identifier for a group of access codes that share the same code. */
                common_code_key: string | null;
                /** Indicates whether the code is set on the device according to a preconfigured schedule. */
                is_scheduled_on_device?: boolean | undefined;
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Indicates whether the access code is waiting for a code assignment. */
                is_waiting_for_code_assignment?: boolean | undefined;
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Indicates whether Seam manages the access code. */
                is_managed: true;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                /**
                    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
                   */
                status: 'setting' | 'set' | 'unset' | 'removing' | 'unknown';
                /** Indicates whether a backup access code is available for use if the primary access code is lost or compromised. */
                is_backup_access_code_available: boolean;
                /** Indicates whether the access code is a backup code. */
                is_backup?: boolean | undefined;
                /** Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code. */
                pulled_backup_access_code_id?: (string | null) | undefined;
                /** Indicates whether changes to the access code from external sources are permitted. */
                is_external_modification_allowed: boolean;
                /** Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use. */
                is_one_time_use: boolean;
                /** Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection. */
                is_offline_access_code: boolean;
            };
        };
    };
    '/access_codes/simulate/create_unmanaged_access_code': {
        route: '/access_codes/simulate/create_unmanaged_access_code';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            name: string;
            code: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            access_code: {
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                is_managed: false;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                status: 'set';
            };
        };
    };
    '/access_codes/unmanaged/convert_to_managed': {
        route: '/access_codes/unmanaged/convert_to_managed';
        method: 'POST' | 'PATCH';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            access_code_id: string;
            is_external_modification_allowed?: boolean | undefined;
            allow_external_modification?: boolean | undefined;
            force?: boolean | undefined;
            sync?: boolean;
        };
        formData: {};
        jsonResponse: {};
    };
    '/access_codes/unmanaged/delete': {
        route: '/access_codes/unmanaged/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            access_code_id: string;
            sync?: boolean;
        };
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/access_codes/unmanaged/get': {
        route: '/access_codes/unmanaged/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            access_code_id?: string | undefined;
            code?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            access_code: {
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                is_managed: false;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                status: 'set';
            };
        };
    };
    '/access_codes/unmanaged/list': {
        route: '/access_codes/unmanaged/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
            user_identifier_key?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            access_codes: Array<{
                /** Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration. */
                type: 'time_bound' | 'ongoing';
                /** Unique identifier for the access code. */
                access_code_id: string;
                /** Unique identifier for the device associated with the access code. */
                device_id: string;
                /** Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes. */
                name: string | null;
                /** Code used for access. Typically, a numeric or alphanumeric string. */
                code: string | null;
                /** Date and time at which the access code was created. */
                created_at: string;
                /** Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors: Array<{
                    message: string;
                    is_access_code_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                is_managed: false;
                /** Date and time at which the time-bound access code becomes active. */
                starts_at?: (string | null) | undefined;
                /** Date and time after which the time-bound access code becomes inactive. */
                ends_at?: (string | null) | undefined;
                status: 'set';
            }>;
        };
    };
    '/access_codes/unmanaged/update': {
        route: '/access_codes/unmanaged/update';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            access_code_id: string;
            is_managed: boolean;
            allow_external_modification?: boolean | undefined;
            is_external_modification_allowed?: boolean | undefined;
            force?: boolean | undefined;
        };
        formData: {};
        jsonResponse: {};
    };
    '/access_codes/update': {
        route: '/access_codes/update';
        method: 'POST' | 'PATCH' | 'PUT';
        queryParams: {};
        jsonBody: {
            name?: string | undefined;
            starts_at?: string | undefined;
            ends_at?: string | undefined;
            code?: string | undefined;
            sync?: boolean;
            attempt_for_offline_device?: boolean;
            prefer_native_scheduling?: boolean | undefined;
            use_backup_access_code_pool?: boolean | undefined;
            allow_external_modification?: boolean | undefined;
            is_external_modification_allowed?: boolean | undefined;
            preferred_code_length?: number | undefined;
            use_offline_access_code?: boolean | undefined;
            is_offline_access_code?: boolean | undefined;
            is_one_time_use?: boolean | undefined;
            max_time_rounding?: ('1hour' | '1day' | '1h' | '1d') | undefined;
            access_code_id: string;
            device_id?: string | undefined;
            type?: ('ongoing' | 'time_bound') | undefined;
            is_managed?: boolean | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/acs/access_groups/add_user': {
        route: '/acs/access_groups/add_user';
        method: 'PUT' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/access_groups/get': {
        route: '/acs/access_groups/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_access_group: {
                acs_access_group_id: string;
                acs_system_id: string;
                workspace_id: string;
                name: string;
                /**
                 * @deprecated use external_type */
                access_group_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                /**
                 * @deprecated use external_type_display_name */
                access_group_type_display_name: string;
                display_name: string;
                external_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                external_type_display_name: string;
                created_at: string;
                is_managed: true;
            };
        };
    };
    '/acs/access_groups/list': {
        route: '/acs/access_groups/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id?: string | undefined;
            acs_user_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_access_groups: Array<{
                acs_access_group_id: string;
                acs_system_id: string;
                workspace_id: string;
                name: string;
                /**
                 * @deprecated use external_type */
                access_group_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                /**
                 * @deprecated use external_type_display_name */
                access_group_type_display_name: string;
                display_name: string;
                external_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                external_type_display_name: string;
                created_at: string;
                is_managed: true;
            }>;
        };
    };
    '/acs/access_groups/list_accessible_entrances': {
        route: '/acs/access_groups/list_accessible_entrances';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_entrances: Array<{
                /** ID of the access control system that contains the entrance. */
                acs_system_id: string;
                /** ID of the entrance. */
                acs_entrance_id: string;
                /** Date and time at which the entrance was created. */
                created_at: string;
                /** Display name for the entrance. */
                display_name: string;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                latch_metadata?: {
                    accessibility_type: string;
                    door_name: string;
                    door_type: string;
                    is_connected: boolean;
                } | undefined;
                visionline_metadata?: {
                    door_name: string;
                    door_category: 'entrance' | 'guest' | 'elevator reader' | 'common' | 'common (PMS)';
                    profiles?: Array<{
                        visionline_door_profile_id: string;
                        visionline_door_profile_type: 'BLE' | 'commonDoor' | 'touch';
                    }> | undefined;
                } | undefined;
                salto_ks_metadata?: {
                    door_name: string;
                    locked_state: string;
                    lock_type: string;
                    online: boolean;
                    battery_level: string;
                    left_open_alarm: boolean;
                    intrusion_alarm: boolean;
                    privacy_mode: boolean;
                } | undefined;
            }>;
        };
    };
    '/acs/access_groups/list_users': {
        route: '/acs/access_groups/list_users';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_users: Array<{
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: true;
            }>;
        };
    };
    '/acs/access_groups/remove_user': {
        route: '/acs/access_groups/remove_user';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/access_groups/unmanaged/get': {
        route: '/acs/access_groups/unmanaged/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_access_group: {
                acs_access_group_id: string;
                acs_system_id: string;
                workspace_id: string;
                name: string;
                /**
                 * @deprecated use external_type */
                access_group_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                /**
                 * @deprecated use external_type_display_name */
                access_group_type_display_name: string;
                display_name: string;
                external_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                external_type_display_name: string;
                created_at: string;
                is_managed: false;
            };
        };
    };
    '/acs/access_groups/unmanaged/list': {
        route: '/acs/access_groups/unmanaged/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id?: string | undefined;
            acs_user_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_access_groups: Array<{
                acs_access_group_id: string;
                acs_system_id: string;
                workspace_id: string;
                name: string;
                /**
                 * @deprecated use external_type */
                access_group_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                /**
                 * @deprecated use external_type_display_name */
                access_group_type_display_name: string;
                display_name: string;
                external_type: 'pti_unit' | 'pti_access_level' | 'salto_access_group' | 'brivo_group';
                external_type_display_name: string;
                created_at: string;
                is_managed: false;
            }>;
        };
    };
    '/acs/credential_pools/list': {
        route: '/acs/credential_pools/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_credential_pools: Array<{
                acs_credential_pool_id: string;
                acs_system_id: string;
                display_name: string;
                external_type: 'hid_part_number';
                external_type_display_name: string;
                created_at: string;
                workspace_id: string;
            }>;
        };
    };
    '/acs/credential_provisioning_automations/launch': {
        route: '/acs/credential_provisioning_automations/launch';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            credential_manager_acs_system_id: string;
            acs_credential_pool_id?: string | undefined;
            create_credential_manager_user?: boolean | undefined;
            credential_manager_acs_user_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_credential_provisioning_automation: {
                acs_credential_provisioning_automation_id: string;
                credential_manager_acs_system_id: string;
                user_identity_id: string;
                created_at: string;
                workspace_id: string;
            };
        };
    };
    '/acs/credentials/assign': {
        route: '/acs/credentials/assign';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            acs_user_id: string;
            acs_credential_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/credentials/create': {
        route: '/acs/credentials/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            credential_manager_acs_system_id?: string | undefined;
            acs_user_id: string;
            access_method: 'code' | 'card' | 'mobile_key';
            code?: string | undefined;
            is_multi_phone_sync_credential?: boolean;
            allowed_acs_entrance_ids?: string[];
            visionline_metadata?: {
                assa_abloy_credential_service_mobile_endpoint_id?: string | undefined;
                card_format?: ('TLCode' | 'rfid48') | undefined;
                card_function_type?: 'guest' | 'staff';
                /**
                 * @deprecated use override. */
                is_override_key?: boolean | undefined;
                override?: boolean | undefined;
                auto_join?: boolean | undefined;
                joiner_acs_credential_ids?: string[] | undefined;
            } | undefined;
            starts_at?: string | undefined;
            ends_at?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/credentials/delete': {
        route: '/acs/credentials/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_credential_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/credentials/get': {
        route: '/acs/credentials/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_credential_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/credentials/list': {
        route: '/acs/credentials/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: ({
            acs_user_id: string;
        } | {
            acs_system_id: string;
        } | {
            acs_user_id: string;
            acs_system_id: string;
        } | {
            user_identity_id: string;
        }) & {
            limit?: number;
            created_before?: Date | undefined;
            is_multi_phone_sync_credential?: boolean | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_credentials: Array<{
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            }>;
        };
    };
    '/acs/credentials/list_accessible_entrances': {
        route: '/acs/credentials/list_accessible_entrances';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_credential_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_entrances: Array<{
                /** ID of the access control system that contains the entrance. */
                acs_system_id: string;
                /** ID of the entrance. */
                acs_entrance_id: string;
                /** Date and time at which the entrance was created. */
                created_at: string;
                /** Display name for the entrance. */
                display_name: string;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                latch_metadata?: {
                    accessibility_type: string;
                    door_name: string;
                    door_type: string;
                    is_connected: boolean;
                } | undefined;
                visionline_metadata?: {
                    door_name: string;
                    door_category: 'entrance' | 'guest' | 'elevator reader' | 'common' | 'common (PMS)';
                    profiles?: Array<{
                        visionline_door_profile_id: string;
                        visionline_door_profile_type: 'BLE' | 'commonDoor' | 'touch';
                    }> | undefined;
                } | undefined;
                salto_ks_metadata?: {
                    door_name: string;
                    locked_state: string;
                    lock_type: string;
                    online: boolean;
                    battery_level: string;
                    left_open_alarm: boolean;
                    intrusion_alarm: boolean;
                    privacy_mode: boolean;
                } | undefined;
            }>;
        };
    };
    '/acs/credentials/unassign': {
        route: '/acs/credentials/unassign';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            acs_user_id: string;
            acs_credential_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/credentials/unmanaged/get': {
        route: '/acs/credentials/unmanaged/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_credential_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: false;
            };
        };
    };
    '/acs/credentials/unmanaged/list': {
        route: '/acs/credentials/unmanaged/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_user_id: string;
        } | {
            acs_system_id: string;
        } | {
            acs_user_id: string;
            acs_system_id: string;
        } | {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_credentials: Array<{
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: false;
            }>;
        };
    };
    '/acs/credentials/update': {
        route: '/acs/credentials/update';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            acs_credential_id: string;
            code?: string | undefined;
            ends_at?: string | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            acs_credential: {
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/encoders/encode_card': {
        route: '/acs/encoders/encode_card';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id: string;
            device_name: string;
        } | {
            device_id: string;
        };
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/acs/encoders/list': {
        route: '/acs/encoders/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_ids: string[];
            device_ids: string[];
            limit?: number;
        } | {
            device_ids: string[];
            limit?: number;
        } | {
            acs_system_ids: string[];
            limit?: number;
        };
        formData: {};
        jsonResponse: {
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/acs/encoders/read_card': {
        route: '/acs/encoders/read_card';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id: string;
            device_name: string;
        } | {
            device_id: string;
        };
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/acs/entrances/get': {
        route: '/acs/entrances/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_entrance_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_entrance: {
                /** ID of the access control system that contains the entrance. */
                acs_system_id: string;
                /** ID of the entrance. */
                acs_entrance_id: string;
                /** Date and time at which the entrance was created. */
                created_at: string;
                /** Display name for the entrance. */
                display_name: string;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                latch_metadata?: {
                    accessibility_type: string;
                    door_name: string;
                    door_type: string;
                    is_connected: boolean;
                } | undefined;
                visionline_metadata?: {
                    door_name: string;
                    door_category: 'entrance' | 'guest' | 'elevator reader' | 'common' | 'common (PMS)';
                    profiles?: Array<{
                        visionline_door_profile_id: string;
                        visionline_door_profile_type: 'BLE' | 'commonDoor' | 'touch';
                    }> | undefined;
                } | undefined;
                salto_ks_metadata?: {
                    door_name: string;
                    locked_state: string;
                    lock_type: string;
                    online: boolean;
                    battery_level: string;
                    left_open_alarm: boolean;
                    intrusion_alarm: boolean;
                    privacy_mode: boolean;
                } | undefined;
            };
        };
    };
    '/acs/entrances/grant_access': {
        route: '/acs/entrances/grant_access';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            acs_entrance_id: string;
            acs_user_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/acs/entrances/list': {
        route: '/acs/entrances/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_system_id?: string | undefined;
            acs_credential_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_entrances: Array<{
                /** ID of the access control system that contains the entrance. */
                acs_system_id: string;
                /** ID of the entrance. */
                acs_entrance_id: string;
                /** Date and time at which the entrance was created. */
                created_at: string;
                /** Display name for the entrance. */
                display_name: string;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                latch_metadata?: {
                    accessibility_type: string;
                    door_name: string;
                    door_type: string;
                    is_connected: boolean;
                } | undefined;
                visionline_metadata?: {
                    door_name: string;
                    door_category: 'entrance' | 'guest' | 'elevator reader' | 'common' | 'common (PMS)';
                    profiles?: Array<{
                        visionline_door_profile_id: string;
                        visionline_door_profile_type: 'BLE' | 'commonDoor' | 'touch';
                    }> | undefined;
                } | undefined;
                salto_ks_metadata?: {
                    door_name: string;
                    locked_state: string;
                    lock_type: string;
                    online: boolean;
                    battery_level: string;
                    left_open_alarm: boolean;
                    intrusion_alarm: boolean;
                    privacy_mode: boolean;
                } | undefined;
            }>;
        };
    };
    '/acs/entrances/list_credentials_with_access': {
        route: '/acs/entrances/list_credentials_with_access';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_entrance_id: string;
            include_if?: Array<'visionline_metadata.is_valid'> | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_credentials: Array<{
                acs_credential_id: string;
                acs_user_id?: string | undefined;
                acs_credential_pool_id?: string | undefined;
                acs_system_id: string;
                parent_acs_credential_id?: string | undefined;
                display_name: string;
                code?: (string | undefined) | null;
                card_number?: (string | undefined) | null;
                is_encoded?: boolean | undefined;
                encoded_at?: (string | undefined) | null;
                access_method: 'code' | 'card' | 'mobile_key';
                external_type?: ('pti_card' | 'brivo_credential' | 'hid_credential' | 'visionline_card' | 'salto_ks_credential') | undefined;
                external_type_display_name?: string | undefined;
                created_at: string;
                workspace_id: string;
                starts_at?: string | undefined;
                ends_at?: string | undefined;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                warnings: Array<{
                    warning_code: string;
                    message: string;
                }>;
                is_multi_phone_sync_credential?: boolean | undefined;
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                latest_desired_state_synced_with_provider_at?: string | undefined;
                visionline_metadata?: {
                    card_function_type: 'guest' | 'staff';
                    joiner_acs_credential_ids?: string[] | undefined;
                    guest_acs_entrance_ids?: string[] | undefined;
                    common_acs_entrance_ids?: string[] | undefined;
                    is_valid?: boolean | undefined;
                    auto_join?: boolean | undefined;
                    card_id?: string | undefined;
                    credential_id?: string | undefined;
                } | undefined;
                is_managed: true;
            }>;
        };
    };
    '/acs/systems/get': {
        route: '/acs/systems/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired access control system. */
            acs_system_id: string;
        };
        formData: {};
        jsonResponse: {
            /** Represents an [access control system](https://docs.seam.co/latest/capability-guides/access-systems). */
            acs_system: {
                /** ID of the `acs_system`. */
                acs_system_id: string;
                /** Brand-specific terminology for the `acs_system` type. */
                external_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_system` type. */
                external_type_display_name?: string | undefined;
                visionline_metadata?: {
                    /** Keyset loaded into a reader. Mobile keys and reader administration tools securely authenticate only with readers programmed with a matching keyset. */
                    mobile_access_uuid: string;
                    /** Unique ID assigned by the ASSA ABLOY licensing team that identifies each hotel in your credential manager. */
                    system_id: string;
                    /** IP address or hostname of the main Visionline server relative to the Seam Bridge on the local network. */
                    lan_address: string;
                } | undefined;
                /**
                 * @deprecated Use `external_type`. */
                system_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /**
                 * @deprecated Use `external_type_display_name`. */
                system_type_display_name?: string | undefined;
                /** Name of the `acs_system`. */
                name: string;
                /** Date and time at which the `acs_system` was created. */
                created_at: string;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`. */
                workspace_id: string;
                /** IDs of the [connected accounts](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`. */
                connected_account_ids: string[];
                /** URL for the image that represents the `acs_system`. */
                image_url: string;
                /** Alternative text for the `acs_system` image. */
                image_alt_text: string;
                /** Errors associated with the `acs_system`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'seam_bridge_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'visionline_instance_unreachable';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the maximum number of users allowed for the site has been reached. This means that new access codes cannot be created. Contact Salto support to increase the user limit. */
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the access system has been disconnected. Please refer to [this guide](https://docs.seam.co/latest/capability-guides/access-systems/troubleshooting-your-access-control-system guide) to resolve the issue. */
                    error_code: 'acs_system_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the login credentials are invalid. Please reconnect the account using the Connect Webview to restore access. */
                    error_code: 'account_disconnected';
                }>;
                /** Warnings associated with the `acs_system`. */
                warnings: Array<{
                    /** Date and time at which Seam created the warning. */
                    created_at: string;
                    /** Detailed description of the warning. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the Salto KS site has exceeded 80% of the maximum number of allowed users. Please increase your subscription limit, or delete some users from your site to rectify this. */
                    warning_code: 'salto_ks_subscription_limit_almost_reached';
                }>;
                /** Indicates whether it is possible to [launch enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) for the `acs_system`. */
                can_automate_enrollment?: boolean | undefined;
                /** Indicates whether the `acs_system` supports creating [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_create_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [removing users from access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#remove-an-acs-user-from-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [adding users to access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#add-an-acs-user-to-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_add_acs_users_to_acs_access_groups?: boolean | undefined;
            };
        };
    };
    '/acs/systems/list': {
        route: '/acs/systems/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the connected account by which to filter the list of returned access control systems. */
            connected_account_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_systems: Array<{
                /** ID of the `acs_system`. */
                acs_system_id: string;
                /** Brand-specific terminology for the `acs_system` type. */
                external_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_system` type. */
                external_type_display_name?: string | undefined;
                visionline_metadata?: {
                    /** Keyset loaded into a reader. Mobile keys and reader administration tools securely authenticate only with readers programmed with a matching keyset. */
                    mobile_access_uuid: string;
                    /** Unique ID assigned by the ASSA ABLOY licensing team that identifies each hotel in your credential manager. */
                    system_id: string;
                    /** IP address or hostname of the main Visionline server relative to the Seam Bridge on the local network. */
                    lan_address: string;
                } | undefined;
                /**
                 * @deprecated Use `external_type`. */
                system_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /**
                 * @deprecated Use `external_type_display_name`. */
                system_type_display_name?: string | undefined;
                /** Name of the `acs_system`. */
                name: string;
                /** Date and time at which the `acs_system` was created. */
                created_at: string;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`. */
                workspace_id: string;
                /** IDs of the [connected accounts](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`. */
                connected_account_ids: string[];
                /** URL for the image that represents the `acs_system`. */
                image_url: string;
                /** Alternative text for the `acs_system` image. */
                image_alt_text: string;
                /** Errors associated with the `acs_system`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'seam_bridge_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'visionline_instance_unreachable';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the maximum number of users allowed for the site has been reached. This means that new access codes cannot be created. Contact Salto support to increase the user limit. */
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the access system has been disconnected. Please refer to [this guide](https://docs.seam.co/latest/capability-guides/access-systems/troubleshooting-your-access-control-system guide) to resolve the issue. */
                    error_code: 'acs_system_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the login credentials are invalid. Please reconnect the account using the Connect Webview to restore access. */
                    error_code: 'account_disconnected';
                }>;
                /** Warnings associated with the `acs_system`. */
                warnings: Array<{
                    /** Date and time at which Seam created the warning. */
                    created_at: string;
                    /** Detailed description of the warning. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the Salto KS site has exceeded 80% of the maximum number of allowed users. Please increase your subscription limit, or delete some users from your site to rectify this. */
                    warning_code: 'salto_ks_subscription_limit_almost_reached';
                }>;
                /** Indicates whether it is possible to [launch enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) for the `acs_system`. */
                can_automate_enrollment?: boolean | undefined;
                /** Indicates whether the `acs_system` supports creating [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_create_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [removing users from access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#remove-an-acs-user-from-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [adding users to access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#add-an-acs-user-to-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_add_acs_users_to_acs_access_groups?: boolean | undefined;
            }>;
        };
    };
    '/acs/systems/list_compatible_credential_manager_acs_systems': {
        route: '/acs/systems/list_compatible_credential_manager_acs_systems';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the ACS system for which you want to retrieve all compatible credential manager ACS systems. */
            acs_system_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_systems: Array<{
                /** ID of the `acs_system`. */
                acs_system_id: string;
                /** Brand-specific terminology for the `acs_system` type. */
                external_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_system` type. */
                external_type_display_name?: string | undefined;
                visionline_metadata?: {
                    /** Keyset loaded into a reader. Mobile keys and reader administration tools securely authenticate only with readers programmed with a matching keyset. */
                    mobile_access_uuid: string;
                    /** Unique ID assigned by the ASSA ABLOY licensing team that identifies each hotel in your credential manager. */
                    system_id: string;
                    /** IP address or hostname of the main Visionline server relative to the Seam Bridge on the local network. */
                    lan_address: string;
                } | undefined;
                /**
                 * @deprecated Use `external_type`. */
                system_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /**
                 * @deprecated Use `external_type_display_name`. */
                system_type_display_name?: string | undefined;
                /** Name of the `acs_system`. */
                name: string;
                /** Date and time at which the `acs_system` was created. */
                created_at: string;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`. */
                workspace_id: string;
                /** IDs of the [connected accounts](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`. */
                connected_account_ids: string[];
                /** URL for the image that represents the `acs_system`. */
                image_url: string;
                /** Alternative text for the `acs_system` image. */
                image_alt_text: string;
                /** Errors associated with the `acs_system`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'seam_bridge_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'visionline_instance_unreachable';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the maximum number of users allowed for the site has been reached. This means that new access codes cannot be created. Contact Salto support to increase the user limit. */
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the access system has been disconnected. Please refer to [this guide](https://docs.seam.co/latest/capability-guides/access-systems/troubleshooting-your-access-control-system guide) to resolve the issue. */
                    error_code: 'acs_system_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the login credentials are invalid. Please reconnect the account using the Connect Webview to restore access. */
                    error_code: 'account_disconnected';
                }>;
                /** Warnings associated with the `acs_system`. */
                warnings: Array<{
                    /** Date and time at which Seam created the warning. */
                    created_at: string;
                    /** Detailed description of the warning. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the Salto KS site has exceeded 80% of the maximum number of allowed users. Please increase your subscription limit, or delete some users from your site to rectify this. */
                    warning_code: 'salto_ks_subscription_limit_almost_reached';
                }>;
                /** Indicates whether it is possible to [launch enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) for the `acs_system`. */
                can_automate_enrollment?: boolean | undefined;
                /** Indicates whether the `acs_system` supports creating [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_create_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [removing users from access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#remove-an-acs-user-from-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [adding users to access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#add-an-acs-user-to-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_add_acs_users_to_acs_access_groups?: boolean | undefined;
            }>;
        };
    };
    '/acs/users/add_to_access_group': {
        route: '/acs/users/add_to_access_group';
        method: 'PUT' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
            /** ID of the desired access group. */
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/create': {
        route: '/acs/users/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            /** ID of the `acs_system` to which to add the new `acs_user`. */
            acs_system_id: string;
            /** Array of `access_group_id`s to indicate the access groups to which to add the new `acs_user`. */
            acs_access_group_ids?: string[];
            /** ID of the user identity with which to associate the new `acs_user`. */
            user_identity_id?: string | undefined;
            /** `starts_at` and `ends_at` timestamps for the new `acs_user`'s access. If you specify an `access_schedule`, you must include both `starts_at` and `ends_at`. `ends_at` must be a time in the future and after `starts_at`. Only applicable to Salto KS access control systems. */
            access_schedule?: {
                starts_at: string;
                ends_at: string;
            } | undefined;
            /** Full name of the `acs_user`. */
            full_name?: string | undefined;
            /**
             * @deprecated use email_address. */
            email?: string | undefined;
            /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
            phone_number?: string | undefined;
            /** Email address of the `acs_user`. */
            email_address?: string | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            acs_user: {
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/users/delete': {
        route: '/acs/users/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/get': {
        route: '/acs/users/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_user: {
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: true;
            };
        };
    };
    '/acs/users/list': {
        route: '/acs/users/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the user identity for which you want to retrieve all `acs_user`s. */
            user_identity_id?: string | undefined;
            /** Phone number of the user identity for which you want to retrieve all `acs_user`s, in [E.164 format](https://www.itu.int/rec/T-REC-E.164/en) (for example, `+15555550100`). */
            user_identity_phone_number?: string | undefined;
            /** Email address of the user identity for which you want to retrieve all `acs_user`s. */
            user_identity_email_address?: string | undefined;
            /** ID of the `acs_system` for which you want to retrieve all `acs_user`s. */
            acs_system_id?: string | undefined;
            limit?: number;
            created_before?: Date | undefined;
        };
        formData: {};
        jsonResponse: {
            acs_users: Array<{
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: true;
            }>;
        };
    };
    '/acs/users/list_accessible_entrances': {
        route: '/acs/users/list_accessible_entrances';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_entrances: Array<{
                /** ID of the access control system that contains the entrance. */
                acs_system_id: string;
                /** ID of the entrance. */
                acs_entrance_id: string;
                /** Date and time at which the entrance was created. */
                created_at: string;
                /** Display name for the entrance. */
                display_name: string;
                errors: Array<{
                    error_code: string;
                    message: string;
                }>;
                latch_metadata?: {
                    accessibility_type: string;
                    door_name: string;
                    door_type: string;
                    is_connected: boolean;
                } | undefined;
                visionline_metadata?: {
                    door_name: string;
                    door_category: 'entrance' | 'guest' | 'elevator reader' | 'common' | 'common (PMS)';
                    profiles?: Array<{
                        visionline_door_profile_id: string;
                        visionline_door_profile_type: 'BLE' | 'commonDoor' | 'touch';
                    }> | undefined;
                } | undefined;
                salto_ks_metadata?: {
                    door_name: string;
                    locked_state: string;
                    lock_type: string;
                    online: boolean;
                    battery_level: string;
                    left_open_alarm: boolean;
                    intrusion_alarm: boolean;
                    privacy_mode: boolean;
                } | undefined;
            }>;
        };
    };
    '/acs/users/remove_from_access_group': {
        route: '/acs/users/remove_from_access_group';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
            /** ID of the desired access group. */
            acs_access_group_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/revoke_access_to_all_entrances': {
        route: '/acs/users/revoke_access_to_all_entrances';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/suspend': {
        route: '/acs/users/suspend';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/unmanaged/get': {
        route: '/acs/users/unmanaged/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_user: {
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: false;
            };
        };
    };
    '/acs/users/unmanaged/list': {
        route: '/acs/users/unmanaged/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id?: string | undefined;
            user_identity_phone_number?: string | undefined;
            user_identity_email_address?: string | undefined;
            acs_system_id?: string | undefined;
            limit?: number;
        };
        formData: {};
        jsonResponse: {
            acs_users: Array<{
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: false;
            }>;
        };
    };
    '/acs/users/unsuspend': {
        route: '/acs/users/unsuspend';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** ID of the desired `acs_user`. */
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/acs/users/update': {
        route: '/acs/users/update';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. If you specify an `access_schedule`, you must include both `starts_at` and `ends_at`. `ends_at` must be a time in the future and after `starts_at`. Only applicable to Salto KS access control systems. */
            access_schedule?: ({
                starts_at: string;
                ends_at: string;
            } | null) | undefined;
            /** ID of the `acs_user`. */
            acs_user_id: string;
            /** Full name of the `acs_user`. */
            full_name?: string | undefined;
            /**
             * @deprecated use email_address. */
            email?: string | undefined;
            /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
            phone_number?: string | undefined;
            /** Email address of the `acs_user`. */
            email_address?: string | undefined;
            hid_acs_system_id?: string | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/action_attempts/get': {
        route: '/action_attempts/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            action_attempt_id: string;
        };
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/action_attempts/list': {
        route: '/action_attempts/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            action_attempt_ids: string[];
        };
        formData: {};
        jsonResponse: {
            action_attempts: Array<{
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            }>;
        };
    };
    '/client_sessions/create': {
        route: '/client_sessions/create';
        method: 'POST' | 'PUT';
        queryParams: {};
        jsonBody: {
            user_identifier_key?: string | undefined;
            connect_webview_ids?: string[] | undefined;
            connected_account_ids?: string[] | undefined;
            user_identity_ids?: string[] | undefined;
            expires_at?: Date | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            client_session: {
                client_session_id: string;
                workspace_id: string;
                created_at: string;
                token: string;
                user_identifier_key: string | null;
                device_count: number;
                connected_account_ids: string[];
                connect_webview_ids: string[];
                user_identity_ids: string[];
            };
        };
    };
    '/client_sessions/delete': {
        route: '/client_sessions/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            client_session_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/client_sessions/get': {
        route: '/client_sessions/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            client_session_id?: string | undefined;
            user_identifier_key?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            client_session: {
                client_session_id: string;
                workspace_id: string;
                created_at: string;
                token: string;
                user_identifier_key: string | null;
                device_count: number;
                connected_account_ids: string[];
                connect_webview_ids: string[];
                user_identity_ids: string[];
            };
        };
    };
    '/client_sessions/get_or_create': {
        route: '/client_sessions/get_or_create';
        method: 'POST' | 'PUT';
        queryParams: {};
        jsonBody: {
            user_identifier_key?: string | undefined;
            connect_webview_ids?: string[] | undefined;
            connected_account_ids?: string[] | undefined;
            user_identity_ids?: string[] | undefined;
            expires_at?: Date | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            client_session: {
                client_session_id: string;
                workspace_id: string;
                created_at: string;
                token: string;
                user_identifier_key: string | null;
                device_count: number;
                connected_account_ids: string[];
                connect_webview_ids: string[];
                user_identity_ids: string[];
            };
        };
    };
    '/client_sessions/grant_access': {
        route: '/client_sessions/grant_access';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            client_session_id?: string | undefined;
            user_identifier_key?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_ids?: string[] | undefined;
            user_identity_ids?: string[] | undefined;
        };
        formData: {};
        jsonResponse: {
            client_session: {
                client_session_id: string;
                workspace_id: string;
                created_at: string;
                token: string;
                user_identifier_key: string | null;
                device_count: number;
                connected_account_ids: string[];
                connect_webview_ids: string[];
                user_identity_ids: string[];
            };
        };
    };
    '/client_sessions/list': {
        route: '/client_sessions/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            client_session_id?: string | undefined;
            user_identifier_key?: string | undefined;
            connect_webview_id?: string | undefined;
            without_user_identifier_key?: boolean | undefined;
            user_identity_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            client_sessions: Array<{
                client_session_id: string;
                workspace_id: string;
                created_at: string;
                token: string;
                user_identifier_key: string | null;
                device_count: number;
                connected_account_ids: string[];
                connect_webview_ids: string[];
                user_identity_ids: string[];
            }>;
        };
    };
    '/client_sessions/revoke': {
        route: '/client_sessions/revoke';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            client_session_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/connect_webviews/create': {
        route: '/connect_webviews/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_selection_mode?: ('none' | 'single' | 'multiple') | undefined;
            custom_redirect_url?: string | undefined;
            custom_redirect_failure_url?: string | undefined;
            accepted_providers?: Array<'akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'schlage' | 'smartthings' | 'yale' | 'genie' | 'doorking' | 'salto' | 'lockly' | 'ttlock' | 'linear' | 'noiseaware' | 'nuki' | 'seam_relay_admin' | 'igloo' | 'kwikset' | 'minut' | 'my_2n' | 'controlbyweb' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'four_suites' | 'dormakaba_oracode' | 'pti' | 'wyze' | 'seam_passport' | 'visionline' | 'assa_abloy_credential_service' | 'seam_bridge' | 'tedee' | 'honeywell_resideo' | 'latch' | 'akiles' | 'yale_access' | 'hid_cm' | 'google_nest'> | undefined;
            provider_category?: ('stable' | 'consumer_smartlocks' | 'thermostats' | 'noise_sensors' | 'access_control_systems' | 'internal_beta') | undefined;
            custom_metadata?: Record<string, string | boolean | null> | undefined;
            automatically_manage_new_devices?: boolean;
            wait_for_device_creation?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            connect_webview: {
                connect_webview_id: string;
                workspace_id: string;
                created_at: string;
                connected_account_id: string | null;
                url: string;
                device_selection_mode: 'none' | 'single' | 'multiple';
                accepted_providers: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                accepted_devices: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                any_device_allowed: boolean;
                any_provider_allowed: boolean;
                login_successful: boolean;
                status: 'pending' | 'failed' | 'authorized';
                custom_redirect_url: string | null;
                custom_redirect_failure_url: string | null;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
                wait_for_device_creation: boolean;
                authorized_at: string | null;
                selected_provider: string | null;
            };
        };
    };
    '/connect_webviews/delete': {
        route: '/connect_webviews/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {
            connect_webview_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/connect_webviews/get': {
        route: '/connect_webviews/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            connect_webview_id: string;
        };
        formData: {};
        jsonResponse: {
            connect_webview: {
                connect_webview_id: string;
                workspace_id: string;
                created_at: string;
                connected_account_id: string | null;
                url: string;
                device_selection_mode: 'none' | 'single' | 'multiple';
                accepted_providers: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                accepted_devices: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                any_device_allowed: boolean;
                any_provider_allowed: boolean;
                login_successful: boolean;
                status: 'pending' | 'failed' | 'authorized';
                custom_redirect_url: string | null;
                custom_redirect_failure_url: string | null;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
                wait_for_device_creation: boolean;
                authorized_at: string | null;
                selected_provider: string | null;
            };
        };
    };
    '/connect_webviews/list': {
        route: '/connect_webviews/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** Returns webviews that can be accessed by the provided user_identifier_key. */
            user_identifier_key?: string | undefined;
            /** Returns webviews whose custom_metadata contains all of the provided key/value pairs. */
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            limit?: number;
        };
        formData: {};
        jsonResponse: {
            connect_webviews: Array<{
                connect_webview_id: string;
                workspace_id: string;
                created_at: string;
                connected_account_id: string | null;
                url: string;
                device_selection_mode: 'none' | 'single' | 'multiple';
                accepted_providers: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                accepted_devices: string[];
                /**
                 * @deprecated Unused. Will be removed. */
                any_device_allowed: boolean;
                any_provider_allowed: boolean;
                login_successful: boolean;
                status: 'pending' | 'failed' | 'authorized';
                custom_redirect_url: string | null;
                custom_redirect_failure_url: string | null;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
                wait_for_device_creation: boolean;
                authorized_at: string | null;
                selected_provider: string | null;
            }>;
        };
    };
    '/connected_accounts/delete': {
        route: '/connected_accounts/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {
            connected_account_id: string;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/connected_accounts/get': {
        route: '/connected_accounts/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            connected_account_id: string;
        } | {
            email: string;
        };
        formData: {};
        jsonResponse: {
            connected_account: {
                connected_account_id?: string | undefined;
                created_at?: string | undefined;
                user_identifier?: {
                    username?: string | undefined;
                    api_url?: string | undefined;
                    email?: string | undefined;
                    phone?: string | undefined;
                    exclusive?: boolean | undefined;
                } | undefined;
                account_type?: string | undefined;
                account_type_display_name: string;
                errors: Array<{
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
            };
        };
    };
    '/connected_accounts/list': {
        route: '/connected_accounts/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** Returns accounts that can be accessed by the provided user_identifier_key. */
            user_identifier_key?: string | undefined;
            /** Returns accounts whose custom_metadata contains all of the provided key/value pairs. */
            custom_metadata_has?: Record<string, string | boolean> | undefined;
        };
        formData: {};
        jsonResponse: {
            connected_accounts: Array<{
                connected_account_id?: string | undefined;
                created_at?: string | undefined;
                user_identifier?: {
                    username?: string | undefined;
                    api_url?: string | undefined;
                    email?: string | undefined;
                    phone?: string | undefined;
                    exclusive?: boolean | undefined;
                } | undefined;
                account_type?: string | undefined;
                account_type_display_name: string;
                errors: Array<{
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
            }>;
        };
    };
    '/connected_accounts/update': {
        route: '/connected_accounts/update';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            connected_account_id: string;
            automatically_manage_new_devices?: boolean | undefined;
            custom_metadata?: Record<string, string | boolean | null> | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            connected_account: {
                connected_account_id?: string | undefined;
                created_at?: string | undefined;
                user_identifier?: {
                    username?: string | undefined;
                    api_url?: string | undefined;
                    email?: string | undefined;
                    phone?: string | undefined;
                    exclusive?: boolean | undefined;
                } | undefined;
                account_type?: string | undefined;
                account_type_display_name: string;
                errors: Array<{
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                custom_metadata: Record<string, string | boolean>;
                automatically_manage_new_devices: boolean;
            };
        };
    };
    '/devices/delete': {
        route: '/devices/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/devices/get': {
        route: '/devices/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            name?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            device: {
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
        };
    };
    '/devices/list': {
        route: '/devices/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** List all devices owned by this connected account */
            connected_account_id?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_id?: string | undefined;
            device_type?: (('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder') | undefined;
            device_types?: Array<('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder'> | undefined;
            manufacturer?: ('akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'doorking' | 'four_suites' | 'genie' | 'igloo' | 'keywe' | 'kwikset' | 'linear' | 'lockly' | 'nuki' | 'philia' | 'salto' | 'samsung' | 'schlage' | 'seam' | 'unknown' | 'wyze' | 'yale' | 'minut' | 'two_n' | 'ttlock' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'controlbyweb' | 'smartthings' | 'dormakaba_oracode' | 'tedee' | 'honeywell_resideo' | 'akiles') | undefined;
            device_ids?: string[] | undefined;
            limit?: number;
            created_before?: Date | undefined;
            user_identifier_key?: string | undefined;
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            include_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
            exclude_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
        };
        formData: {};
        jsonResponse: {
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/devices/list_device_providers': {
        route: '/devices/list_device_providers';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            provider_category?: ('stable' | 'consumer_smartlocks' | 'thermostats' | 'noise_sensors' | 'access_control_systems') | undefined;
        };
        formData: {};
        jsonResponse: {
            device_providers: Array<{
                device_provider_name: 'akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'schlage' | 'smartthings' | 'yale' | 'genie' | 'doorking' | 'salto' | 'lockly' | 'ttlock' | 'linear' | 'noiseaware' | 'nuki' | 'seam_relay_admin' | 'igloo' | 'kwikset' | 'minut' | 'my_2n' | 'controlbyweb' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'four_suites' | 'dormakaba_oracode' | 'pti' | 'wyze' | 'seam_passport' | 'visionline' | 'assa_abloy_credential_service' | 'seam_bridge' | 'tedee' | 'honeywell_resideo' | 'latch' | 'akiles';
                display_name: string;
                image_url: string;
                provider_categories: Array<'stable' | 'consumer_smartlocks' | 'thermostats' | 'noise_sensors' | 'access_control_systems'>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/devices/simulate/connect': {
        route: '/devices/simulate/connect';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/devices/simulate/disconnect': {
        route: '/devices/simulate/disconnect';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/devices/simulate/remove': {
        route: '/devices/simulate/remove';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/devices/unmanaged/get': {
        route: '/devices/unmanaged/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            name?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            device: {
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                is_managed: false;
                properties: {
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                };
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
        };
    };
    '/devices/unmanaged/list': {
        route: '/devices/unmanaged/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** List all devices owned by this connected account */
            connected_account_id?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_id?: string | undefined;
            device_type?: (('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder') | undefined;
            device_types?: Array<('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder'> | undefined;
            manufacturer?: ('akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'doorking' | 'four_suites' | 'genie' | 'igloo' | 'keywe' | 'kwikset' | 'linear' | 'lockly' | 'nuki' | 'philia' | 'salto' | 'samsung' | 'schlage' | 'seam' | 'unknown' | 'wyze' | 'yale' | 'minut' | 'two_n' | 'ttlock' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'controlbyweb' | 'smartthings' | 'dormakaba_oracode' | 'tedee' | 'honeywell_resideo' | 'akiles') | undefined;
            device_ids?: string[] | undefined;
            limit?: number;
            created_before?: Date | undefined;
            user_identifier_key?: string | undefined;
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            include_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
            exclude_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
        };
        formData: {};
        jsonResponse: {
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                is_managed: false;
                properties: {
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                };
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/devices/unmanaged/update': {
        route: '/devices/unmanaged/update';
        method: 'POST' | 'PATCH';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
            is_managed: true;
        };
        formData: {};
        jsonResponse: {};
    };
    '/devices/update': {
        route: '/devices/update';
        method: 'POST' | 'PATCH';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
            properties?: {
                name?: (string | null) | undefined;
            } | undefined;
            name?: (string | null) | undefined;
            is_managed?: boolean;
            custom_metadata?: Record<string, string | boolean | null> | undefined;
        };
        formData: {};
        jsonResponse: {};
    };
    '/events/get': {
        route: '/events/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            event_id?: string | undefined;
            event_type?: string | undefined;
            device_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            event?: {
                event_id: string;
                device_id?: string | undefined;
                action_attempt_id?: string | undefined;
                acs_credential_id?: string | undefined;
                acs_user_id?: string | undefined;
                acs_system_id?: string | undefined;
                client_session_id?: string | undefined;
                enrollment_automation_id?: string | undefined;
                event_type: string;
                workspace_id: string;
                created_at: string;
                occurred_at: string;
                event_description: string;
                thermostat_schedule_id?: (string | undefined) | null;
                is_fallback_climate_preset?: boolean | undefined;
                climate_preset_key?: string | undefined;
                hvac_mode_setting?: string | undefined;
                fan_mode_setting?: string | undefined;
                cooling_set_point_celsius?: number | undefined;
                heating_set_point_celsius?: number | undefined;
                cooling_set_point_fahrenheit?: number | undefined;
                heating_set_point_fahrenheit?: number | undefined;
            } | undefined;
            message?: string | undefined;
        };
    };
    '/events/list': {
        route: '/events/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            since?: string | undefined;
            between?: Array<string | Date> | undefined;
            device_id?: string | undefined;
            device_ids?: string[] | undefined;
            access_code_id?: string | undefined;
            access_code_ids?: string[] | undefined;
            event_type?: ('device.accessory_keypad_connected' | 'device.accessory_keypad_disconnected' | 'device.connected' | 'device.unmanaged.connected' | 'device.disconnected' | 'device.unmanaged.disconnected' | 'device.converted_to_unmanaged' | 'device.unmanaged.converted_to_managed' | 'device.removed' | 'device.deleted' | 'device.tampered' | 'device.low_battery' | 'device.battery_status_changed' | 'device.third_party_integration_detected' | 'device.third_party_integration_no_longer_detected' | 'device.salto.privacy_mode_activated' | 'device.salto.privacy_mode_deactivated' | 'device.connection_became_flaky' | 'device.connection_stabilized' | 'device.error.subscription_required' | 'device.error.subscription_required.resolved' | 'access_code.created' | 'access_code.changed' | 'access_code.scheduled_on_device' | 'access_code.set_on_device' | 'access_code.deleted' | 'access_code.removed_from_device' | 'access_code.failed_to_set_on_device' | 'access_code.delay_in_setting_on_device' | 'access_code.failed_to_remove_from_device' | 'access_code.delay_in_removing_from_device' | 'access_code.deleted_external_to_seam' | 'access_code.modified_external_to_seam' | 'access_code.unmanaged.converted_to_managed' | 'access_code.unmanaged.failed_to_convert_to_managed' | 'access_code.unmanaged.created' | 'access_code.unmanaged.removed' | 'lock.locked' | 'lock.unlocked' | 'lock.access_denied' | 'phone.deactivated' | 'connected_account.connected' | 'connected_account.successful_login' | 'connected_account.created' | 'connected_account.deleted' | 'connected_account.disconnected' | 'connected_account.completed_first_sync' | 'connected_account.completed_first_sync_after_reconnection' | 'connect_webview.login_succeeded' | 'connect_webview.login_failed' | 'noise_sensor.noise_threshold_triggered' | 'access_code.backup_access_code_pulled' | 'acs_system.added' | 'acs_system.connected' | 'acs_user.deleted' | 'acs_credential.deleted' | 'enrollment_automation.deleted' | 'client_session.deleted' | 'action_attempt.lock_door.succeeded' | 'action_attempt.lock_door.failed' | 'action_attempt.unlock_door.succeeded' | 'action_attempt.unlock_door.failed' | 'thermostat.climate_preset_activated' | 'thermostat.manually_adjusted') | undefined;
            event_types?: Array<'device.accessory_keypad_connected' | 'device.accessory_keypad_disconnected' | 'device.connected' | 'device.unmanaged.connected' | 'device.disconnected' | 'device.unmanaged.disconnected' | 'device.converted_to_unmanaged' | 'device.unmanaged.converted_to_managed' | 'device.removed' | 'device.deleted' | 'device.tampered' | 'device.low_battery' | 'device.battery_status_changed' | 'device.third_party_integration_detected' | 'device.third_party_integration_no_longer_detected' | 'device.salto.privacy_mode_activated' | 'device.salto.privacy_mode_deactivated' | 'device.connection_became_flaky' | 'device.connection_stabilized' | 'device.error.subscription_required' | 'device.error.subscription_required.resolved' | 'access_code.created' | 'access_code.changed' | 'access_code.scheduled_on_device' | 'access_code.set_on_device' | 'access_code.deleted' | 'access_code.removed_from_device' | 'access_code.failed_to_set_on_device' | 'access_code.delay_in_setting_on_device' | 'access_code.failed_to_remove_from_device' | 'access_code.delay_in_removing_from_device' | 'access_code.deleted_external_to_seam' | 'access_code.modified_external_to_seam' | 'access_code.unmanaged.converted_to_managed' | 'access_code.unmanaged.failed_to_convert_to_managed' | 'access_code.unmanaged.created' | 'access_code.unmanaged.removed' | 'lock.locked' | 'lock.unlocked' | 'lock.access_denied' | 'phone.deactivated' | 'connected_account.connected' | 'connected_account.successful_login' | 'connected_account.created' | 'connected_account.deleted' | 'connected_account.disconnected' | 'connected_account.completed_first_sync' | 'connected_account.completed_first_sync_after_reconnection' | 'connect_webview.login_succeeded' | 'connect_webview.login_failed' | 'noise_sensor.noise_threshold_triggered' | 'access_code.backup_access_code_pulled' | 'acs_system.added' | 'acs_system.connected' | 'acs_user.deleted' | 'acs_credential.deleted' | 'enrollment_automation.deleted' | 'client_session.deleted' | 'action_attempt.lock_door.succeeded' | 'action_attempt.lock_door.failed' | 'action_attempt.unlock_door.succeeded' | 'action_attempt.unlock_door.failed' | 'thermostat.climate_preset_activated' | 'thermostat.manually_adjusted'> | undefined;
            connected_account_id?: string | undefined;
            connect_webview_id?: string | undefined;
            limit?: number;
        };
        formData: {};
        jsonResponse: {
            events: Array<{
                event_id: string;
                device_id?: string | undefined;
                action_attempt_id?: string | undefined;
                acs_credential_id?: string | undefined;
                acs_user_id?: string | undefined;
                acs_system_id?: string | undefined;
                client_session_id?: string | undefined;
                enrollment_automation_id?: string | undefined;
                event_type: string;
                workspace_id: string;
                created_at: string;
                occurred_at: string;
                event_description: string;
                thermostat_schedule_id?: (string | undefined) | null;
                is_fallback_climate_preset?: boolean | undefined;
                climate_preset_key?: string | undefined;
                hvac_mode_setting?: string | undefined;
                fan_mode_setting?: string | undefined;
                cooling_set_point_celsius?: number | undefined;
                heating_set_point_celsius?: number | undefined;
                cooling_set_point_fahrenheit?: number | undefined;
                heating_set_point_fahrenheit?: number | undefined;
            }>;
        };
    };
    '/locks/get': {
        route: '/locks/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            name?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            lock: {
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
            device: {
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
        };
    };
    '/locks/list': {
        route: '/locks/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** List all devices owned by this connected account */
            connected_account_id?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_id?: string | undefined;
            device_type?: (('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder') | undefined;
            device_types?: Array<('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder'> | undefined;
            manufacturer?: ('akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'doorking' | 'four_suites' | 'genie' | 'igloo' | 'keywe' | 'kwikset' | 'linear' | 'lockly' | 'nuki' | 'philia' | 'salto' | 'samsung' | 'schlage' | 'seam' | 'unknown' | 'wyze' | 'yale' | 'minut' | 'two_n' | 'ttlock' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'controlbyweb' | 'smartthings' | 'dormakaba_oracode' | 'tedee' | 'honeywell_resideo' | 'akiles') | undefined;
            device_ids?: string[] | undefined;
            limit?: number;
            created_before?: Date | undefined;
            user_identifier_key?: string | undefined;
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            include_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
            exclude_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
        };
        formData: {};
        jsonResponse: {
            locks: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/locks/lock_door': {
        route: '/locks/lock_door';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/locks/unlock_door': {
        route: '/locks/unlock_door';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/networks/get': {
        route: '/networks/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            network_id: string;
        };
        formData: {};
        jsonResponse: {
            network: {
                network_id: string;
                workspace_id: string;
                display_name: string;
                created_at: string;
            };
        };
    };
    '/networks/list': {
        route: '/networks/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            networks: Array<{
                network_id: string;
                workspace_id: string;
                display_name: string;
                created_at: string;
            }>;
        };
    };
    '/noise_sensors/list': {
        route: '/noise_sensors/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** List all devices owned by this connected account */
            connected_account_id?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_id?: string | undefined;
            device_type?: (('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder') | undefined;
            device_types?: Array<('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder'> | undefined;
            manufacturer?: ('akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'doorking' | 'four_suites' | 'genie' | 'igloo' | 'keywe' | 'kwikset' | 'linear' | 'lockly' | 'nuki' | 'philia' | 'salto' | 'samsung' | 'schlage' | 'seam' | 'unknown' | 'wyze' | 'yale' | 'minut' | 'two_n' | 'ttlock' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'controlbyweb' | 'smartthings' | 'dormakaba_oracode' | 'tedee' | 'honeywell_resideo' | 'akiles') | undefined;
            device_ids?: string[] | undefined;
            limit?: number;
            created_before?: Date | undefined;
            user_identifier_key?: string | undefined;
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            include_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
            exclude_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
        };
        formData: {};
        jsonResponse: {
            noise_sensors: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/noise_sensors/noise_thresholds/create': {
        route: '/noise_sensors/noise_thresholds/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            sync?: boolean;
            name?: string | undefined;
            starts_daily_at: string;
            ends_daily_at: string;
            noise_threshold_decibels?: number | undefined;
            noise_threshold_nrs?: number | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
            noise_threshold: {
                noise_threshold_id: string;
                device_id: string;
                name: string;
                noise_threshold_nrs?: number | undefined;
                starts_daily_at: string;
                ends_daily_at: string;
                noise_threshold_decibels: number;
            };
        };
    };
    '/noise_sensors/noise_thresholds/delete': {
        route: '/noise_sensors/noise_thresholds/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {
            noise_threshold_id: string;
            device_id: string;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/noise_sensors/noise_thresholds/get': {
        route: '/noise_sensors/noise_thresholds/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            noise_threshold_id: string;
        };
        formData: {};
        jsonResponse: {
            noise_threshold: {
                noise_threshold_id: string;
                device_id: string;
                name: string;
                noise_threshold_nrs?: number | undefined;
                starts_daily_at: string;
                ends_daily_at: string;
                noise_threshold_decibels: number;
            };
        };
    };
    '/noise_sensors/noise_thresholds/list': {
        route: '/noise_sensors/noise_thresholds/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
            is_programmed?: boolean | undefined;
        };
        formData: {};
        jsonResponse: {
            noise_thresholds: Array<{
                noise_threshold_id: string;
                device_id: string;
                name: string;
                noise_threshold_nrs?: number | undefined;
                starts_daily_at: string;
                ends_daily_at: string;
                noise_threshold_decibels: number;
            }>;
        };
    };
    '/noise_sensors/noise_thresholds/update': {
        route: '/noise_sensors/noise_thresholds/update';
        method: 'PATCH' | 'POST' | 'PUT';
        queryParams: {};
        jsonBody: {
            noise_threshold_id: string;
            device_id: string;
            sync?: boolean;
            name?: string | undefined;
            starts_daily_at?: string | undefined;
            ends_daily_at?: string | undefined;
            noise_threshold_decibels?: number | undefined;
            noise_threshold_nrs?: number | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/noise_sensors/simulate/trigger_noise_threshold': {
        route: '/noise_sensors/simulate/trigger_noise_threshold';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/phones/deactivate': {
        route: '/phones/deactivate';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/phones/list': {
        route: '/phones/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            owner_user_identity_id?: string | undefined;
            acs_credential_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            phones: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                device_type: 'android_phone' | 'ios_phone';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                properties: {
                    assa_abloy_credential_service_metadata?: {
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined;
                };
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/phones/simulate/create_sandbox_phone': {
        route: '/phones/simulate/create_sandbox_phone';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {
            custom_sdk_installation_id?: string | undefined;
            user_identity_id: string;
            phone_metadata?: {
                operating_system?: 'android' | 'ios';
                os_version?: string;
                device_manufacturer?: string;
                device_model?: string;
            };
            assa_abloy_metadata?: {
                ble_capability?: boolean;
                hce_capability?: boolean;
                nfc_capability?: boolean;
                application_version?: string;
                seos_applet_version?: string;
                seos_tsm_endpoint_id?: number;
            };
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            phone: {
                /** Unique identifier for the device. */
                device_id: string;
                device_type: 'android_phone' | 'ios_phone';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                properties: {
                    assa_abloy_credential_service_metadata?: {
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined;
                };
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
        };
    };
    '/thermostats/activate_climate_preset': {
        route: '/thermostats/activate_climate_preset';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            climate_preset_key: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/cool': {
        route: '/thermostats/cool';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            cooling_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/create_climate_preset': {
        route: '/thermostats/create_climate_preset';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            climate_preset_key: string;
            name?: (string | null) | undefined;
            fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
            hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/thermostats/delete_climate_preset': {
        route: '/thermostats/delete_climate_preset';
        method: 'POST' | 'DELETE';
        queryParams: {};
        jsonBody: {
            device_id: string;
            climate_preset_key: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/thermostats/get': {
        route: '/thermostats/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id?: string | undefined;
            name?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            thermostat: {
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            };
        };
    };
    '/thermostats/heat': {
        route: '/thermostats/heat';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            heating_set_point_celsius?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/heat_cool': {
        route: '/thermostats/heat_cool';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            heating_set_point_celsius?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            cooling_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/list': {
        route: '/thermostats/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            /** List all devices owned by this connected account */
            connected_account_id?: string | undefined;
            connected_account_ids?: string[] | undefined;
            connect_webview_id?: string | undefined;
            device_type?: (('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder') | undefined;
            device_types?: Array<('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder'> | undefined;
            manufacturer?: ('akuvox' | 'august' | 'avigilon_alta' | 'brivo' | 'butterflymx' | 'doorking' | 'four_suites' | 'genie' | 'igloo' | 'keywe' | 'kwikset' | 'linear' | 'lockly' | 'nuki' | 'philia' | 'salto' | 'samsung' | 'schlage' | 'seam' | 'unknown' | 'wyze' | 'yale' | 'minut' | 'two_n' | 'ttlock' | 'nest' | 'igloohome' | 'ecobee' | 'hubitat' | 'controlbyweb' | 'smartthings' | 'dormakaba_oracode' | 'tedee' | 'honeywell_resideo' | 'akiles') | undefined;
            device_ids?: string[] | undefined;
            limit?: number;
            created_before?: Date | undefined;
            user_identifier_key?: string | undefined;
            custom_metadata_has?: Record<string, string | boolean> | undefined;
            include_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
            exclude_if?: Array<'can_remotely_unlock' | 'can_remotely_lock' | 'can_program_offline_access_codes' | 'can_program_online_access_codes' | 'can_hvac_heat' | 'can_hvac_cool' | 'can_hvac_heat_cool' | 'can_turn_off_hvac' | 'can_simulate_removal' | 'can_simulate_connection' | 'can_simulate_disconnection'> | undefined;
        };
        formData: {};
        jsonResponse: {
            thermostats: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/thermostats/off': {
        route: '/thermostats/off';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/schedules/create': {
        route: '/thermostats/schedules/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            name?: string | undefined;
            climate_preset_key: string;
            max_override_period_minutes?: number;
            starts_at: string;
            ends_at: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            thermostat_schedule: {
                thermostat_schedule_id: string;
                device_id: string;
                name?: string | undefined;
                climate_preset_key: string;
                max_override_period_minutes: number;
                starts_at: string;
                ends_at: string;
                created_at: string;
                /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors?: any;
            };
        };
    };
    '/thermostats/schedules/delete': {
        route: '/thermostats/schedules/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            thermostat_schedule_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/thermostats/schedules/get': {
        route: '/thermostats/schedules/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            thermostat_schedule_id: string;
        };
        formData: {};
        jsonResponse: {
            thermostat_schedule: {
                thermostat_schedule_id: string;
                device_id: string;
                name?: string | undefined;
                climate_preset_key: string;
                max_override_period_minutes: number;
                starts_at: string;
                ends_at: string;
                created_at: string;
                /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors?: any;
            };
        };
    };
    '/thermostats/schedules/list': {
        route: '/thermostats/schedules/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            device_id: string;
            user_identifier_key?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            thermostat_schedules: Array<{
                thermostat_schedule_id: string;
                device_id: string;
                name?: string | undefined;
                climate_preset_key: string;
                max_override_period_minutes: number;
                starts_at: string;
                ends_at: string;
                created_at: string;
                /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                errors?: any;
            }>;
        };
    };
    '/thermostats/schedules/update': {
        route: '/thermostats/schedules/update';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            thermostat_schedule_id: string;
            name?: string | undefined;
            climate_preset_key?: string | undefined;
            max_override_period_minutes?: number | undefined;
            starts_at?: string | undefined;
            ends_at?: string | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/thermostats/set_fallback_climate_preset': {
        route: '/thermostats/set_fallback_climate_preset';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            climate_preset_key: string;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/thermostats/set_fan_mode': {
        route: '/thermostats/set_fan_mode';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            device_id: string;
            /**
             * @deprecated use fan_mode_setting instead. */
            fan_mode?: ('auto' | 'on' | 'circulate') | undefined;
            fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
            sync?: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
    '/thermostats/update_climate_preset': {
        route: '/thermostats/update_climate_preset';
        method: 'POST' | 'PATCH';
        queryParams: {};
        jsonBody: {
            device_id: string;
            climate_preset_key: string;
            name?: (string | null) | undefined;
            fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
            hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
            cooling_set_point_celsius?: number | undefined;
            heating_set_point_celsius?: number | undefined;
            cooling_set_point_fahrenheit?: number | undefined;
            heating_set_point_fahrenheit?: number | undefined;
            manual_override_allowed: boolean;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/add_acs_user': {
        route: '/user_identities/add_acs_user';
        method: 'POST' | 'PUT';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/create': {
        route: '/user_identities/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_key?: (string | null) | undefined;
            email_address?: (string | null) | undefined;
            phone_number?: (string | null) | undefined;
            full_name?: (string | null) | undefined;
        };
        formData: {};
        jsonResponse: {
            user_identity: {
                user_identity_id: string;
                user_identity_key: string | null;
                email_address: string | null;
                phone_number: string | null;
                display_name: string;
                full_name: string | null;
                created_at: string;
                workspace_id: string;
            };
        };
    };
    '/user_identities/delete': {
        route: '/user_identities/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/enrollment_automations/delete': {
        route: '/user_identities/enrollment_automations/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            enrollment_automation_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/enrollment_automations/get': {
        route: '/user_identities/enrollment_automations/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            enrollment_automation_id: string;
        };
        formData: {};
        jsonResponse: {
            enrollment_automation: {
                credential_manager_acs_system_id: string;
                user_identity_id: string;
                created_at: string;
                workspace_id: string;
                enrollment_automation_id: string;
            };
        };
    };
    '/user_identities/enrollment_automations/launch': {
        route: '/user_identities/enrollment_automations/launch';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            credential_manager_acs_system_id: string;
            acs_credential_pool_id?: string | undefined;
            create_credential_manager_user?: boolean | undefined;
            credential_manager_acs_user_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            enrollment_automation: {
                acs_credential_provisioning_automation_id: string;
                credential_manager_acs_system_id: string;
                user_identity_id: string;
                created_at: string;
                workspace_id: string;
                enrollment_automation_id: string;
            };
        };
    };
    '/user_identities/enrollment_automations/list': {
        route: '/user_identities/enrollment_automations/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {
            enrollment_automations: Array<{
                credential_manager_acs_system_id: string;
                user_identity_id: string;
                created_at: string;
                workspace_id: string;
                enrollment_automation_id: string;
            }>;
        };
    };
    '/user_identities/get': {
        route: '/user_identities/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        } | {
            user_identity_key: string;
        };
        formData: {};
        jsonResponse: {
            user_identity: {
                user_identity_id: string;
                user_identity_key: string | null;
                email_address: string | null;
                phone_number: string | null;
                display_name: string;
                full_name: string | null;
                created_at: string;
                workspace_id: string;
            };
        };
    };
    '/user_identities/grant_access_to_device': {
        route: '/user_identities/grant_access_to_device';
        method: 'PUT' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            device_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/list': {
        route: '/user_identities/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            credential_manager_acs_system_id?: string | undefined;
        };
        formData: {};
        jsonResponse: {
            user_identities: Array<{
                user_identity_id: string;
                user_identity_key: string | null;
                email_address: string | null;
                phone_number: string | null;
                display_name: string;
                full_name: string | null;
                created_at: string;
                workspace_id: string;
            }>;
        };
    };
    '/user_identities/list_accessible_devices': {
        route: '/user_identities/list_accessible_devices';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {
            devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
            /**
             * @deprecated use devices. */
            accessible_devices: Array<{
                /** Unique identifier for the device. */
                device_id: string;
                /** Type of the device. */
                device_type: ('akuvox_lock' | 'august_lock' | 'brivo_access_point' | 'butterflymx_panel' | 'avigilon_alta_entry' | 'doorking_lock' | 'genie_door' | 'igloo_lock' | 'linear_lock' | 'lockly_lock' | 'kwikset_lock' | 'nuki_lock' | 'salto_lock' | 'schlage_lock' | 'seam_relay' | 'smartthings_lock' | 'wyze_lock' | 'yale_lock' | 'two_n_intercom' | 'controlbyweb_device' | 'ttlock_lock' | 'igloohome_lock' | 'hubitat_lock' | 'four_suites_door' | 'dormakaba_oracode_door' | 'tedee_lock' | 'akiles_lock') | ('noiseaware_activity_zone' | 'minut_sensor') | ('ecobee_thermostat' | 'nest_thermostat' | 'honeywell_resideo_thermostat') | ('ios_phone' | 'android_phone') | 'visionline_encoder';
                /** Optional nickname to describe the device, settable through Seam */
                nickname?: string | undefined;
                /** Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices. */
                display_name: string;
                /** Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health. */
                capabilities_supported: Array<'access_code' | 'lock' | 'noise_detection' | 'thermostat' | 'battery' | 'phone'>;
                /** Properties of the device. */
                properties: (({
                    /** Indicates whether the device is online. */
                    online: boolean;
                    /** Name of the device.
                     * @deprecated use device.display_name instead */
                    name: string;
                    /** Represents the accessory keypad state. */
                    accessory_keypad?: {
                        /** Indicates if the accessory_keypad is connected to the device. */
                        is_connected: boolean;
                        /** Indicates if the keypad battery properties. */
                        battery?: {
                            level: number;
                        } | undefined;
                    } | undefined;
                    appearance: {
                        /** Name of the device as seen from the provider API and application, not settable through Seam. */
                        name: string;
                    };
                    model: {
                        /** Indicates whether the device can connect a accessory keypad. */
                        can_connect_accessory_keypad?: boolean | undefined;
                        /** Display name of the device model. */
                        display_name: string;
                        /** Display name that corresponds to the manufacturer-specific terminology for the device. */
                        manufacturer_display_name: string;
                        /** Indicates whether the device has a built in accessory keypad. */
                        has_built_in_keypad?: boolean | undefined;
                        /** Indicates whether the device supports offline access codes. */
                        offline_access_codes_supported?: boolean | undefined;
                        /** Indicates whether the device supports online access codes. */
                        online_access_codes_supported?: boolean | undefined;
                        /**
                         * @deprecated use device.properties.model.can_connect_accessory_keypad */
                        accessory_keypad_supported?: boolean | undefined;
                    };
                    /** Indicates whether the device has direct power. */
                    has_direct_power?: boolean | undefined;
                    /** Indicates the battery level of the device as a decimal value between 0 and 1, inclusive. */
                    battery_level?: number | undefined;
                    /** Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage. */
                    battery?: {
                        level: number;
                        status: 'critical' | 'low' | 'good' | 'full';
                    } | undefined;
                    /** Manufacturer of the device. */
                    manufacturer?: string | undefined;
                    /** Image URL for the device. */
                    image_url?: string | undefined;
                    /** Alt text for the device image. */
                    image_alt_text?: string | undefined;
                    /** Serial number of the device. */
                    serial_number?: string | undefined;
                    /** Indicates whether it is currently possible to use online access codes for the device. */
                    online_access_codes_enabled?: boolean | undefined;
                    /** Indicates whether it is currently possible to use offline access codes for the device. */
                    offline_access_codes_enabled?: boolean | undefined;
                    /**
                     * @deprecated use device.properties.model.can_connect_accessory_keypad */
                    supports_accessory_keypad?: boolean | undefined;
                    /**
                     * @deprecated use offline_access_codes_enabled */
                    supports_offline_access_codes?: boolean | undefined;
                    /** Indicates current noise level in decibels, if the device supports noise detection. */
                    noise_level_decibels?: number | undefined;
                    /** Array of noise threshold IDs that are currently triggering. */
                    currently_triggering_noise_threshold_ids?: string[] | undefined;
                } & {
                    assa_abloy_credential_service_metadata?: ({
                        has_active_endpoint: boolean;
                        endpoints: Array<{
                            endpoint_id: string;
                            is_active: boolean;
                        }>;
                    } | undefined) | undefined;
                }) & {
                    august_metadata?: {
                        lock_id: string;
                        lock_name: string;
                        house_name: string;
                        has_keypad: boolean;
                        keypad_battery_level?: string | undefined;
                        model?: string | undefined;
                        house_id?: string | undefined;
                    } | undefined;
                    avigilon_alta_metadata?: {
                        entry_name: string;
                        org_name: string;
                        zone_id: number;
                        zone_name: string;
                        site_id: number;
                        site_name: string;
                        entry_relays_total_count: number;
                    } | undefined;
                    schlage_metadata?: {
                        device_id: string;
                        device_name: string;
                        access_code_length: number | null;
                        model?: string | undefined;
                    } | undefined;
                    smartthings_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                        location_id?: string | undefined;
                    } | undefined;
                    lockly_metadata?: {
                        device_id: string;
                        device_name: string;
                        model?: string | undefined;
                    } | undefined;
                    nuki_metadata?: {
                        device_id: string;
                        device_name: string;
                        keypad_battery_critical?: boolean | undefined;
                        keypad_paired?: boolean | undefined;
                        keypad_2_paired?: boolean | undefined;
                    } | undefined;
                    kwikset_metadata?: {
                        device_id: string;
                        device_name: string;
                        model_number: string;
                    } | undefined;
                    salto_metadata?: {
                        lock_id: string;
                        customer_reference: string;
                        lock_type: string;
                        battery_level: string;
                        locked_state: string;
                        model?: string | undefined;
                    } | undefined;
                    genie_metadata?: {
                        device_name: string;
                        door_name: string;
                    } | undefined;
                    brivo_metadata?: {
                        device_name: string;
                    } | undefined;
                    igloo_metadata?: {
                        device_id: string;
                        bridge_id: string;
                        model?: string | undefined;
                    } | undefined;
                    noiseaware_metadata?: {
                        device_model: 'indoor' | 'outdoor';
                        noise_level_nrs: number;
                        noise_level_decibel: number;
                        device_name: string;
                        device_id: string;
                    } | undefined;
                    minut_metadata?: {
                        device_id: string;
                        device_name: string;
                        latest_sensor_values: {
                            temperature: {
                                time: string;
                                value: number;
                            };
                            sound: {
                                time: string;
                                value: number;
                            };
                            humidity: {
                                time: string;
                                value: number;
                            };
                            pressure: {
                                time: string;
                                value: number;
                            };
                            accelerometer_z: {
                                time: string;
                                value: number;
                            };
                        };
                    } | undefined;
                    four_suites_metadata?: {
                        device_id: number;
                        device_name: string;
                        reclose_delay_in_seconds: number;
                    } | undefined;
                    two_n_metadata?: {
                        device_id: number;
                        device_name: string;
                    } | undefined;
                    controlbyweb_metadata?: {
                        device_id: string;
                        device_name: string;
                        relay_name: string | null;
                    } | undefined;
                    ttlock_metadata?: {
                        lock_id: number;
                        lock_alias: string;
                        feature_value: string;
                        features: {
                            passcode: boolean;
                            passcode_management: boolean;
                            unlock_via_gateway: boolean;
                            lock_command: boolean;
                            incomplete_keyboard_passcode: boolean;
                        };
                        has_gateway?: boolean | undefined;
                        wireless_keypads?: Array<{
                            wireless_keypad_id: number;
                            wireless_keypad_name: string;
                        }> | undefined;
                    } | undefined;
                    seam_bridge_metadata?: {
                        unlock_method?: ('bridge' | 'doorking') | undefined;
                        device_num: number;
                        name: string;
                    } | undefined;
                    igloohome_metadata?: {
                        device_id: string;
                        device_name: string;
                        bridge_id?: string | undefined;
                        bridge_name?: string | undefined;
                        keypad_id?: string | undefined;
                    } | undefined;
                    nest_metadata?: {
                        nest_device_id: string;
                        device_name: string;
                        custom_name: string;
                    } | undefined;
                    ecobee_metadata?: {
                        ecobee_device_id: string;
                        device_name: string;
                    } | undefined;
                    honeywell_resideo_metadata?: {
                        honeywell_resideo_device_id: string;
                        device_name: string;
                    } | undefined;
                    hubitat_metadata?: {
                        device_id: string;
                        device_name: string;
                        device_label: string;
                    } | undefined;
                    dormakaba_oracode_metadata?: {
                        door_id?: number | undefined;
                        door_name: string;
                        device_id?: (number | string) | undefined;
                        door_is_wireless: boolean;
                        /** @DEPRECATED */
                        site_id: number | null;
                        site_name: string;
                        iana_timezone?: string | undefined;
                        predefined_time_slots?: Array<{
                            name: string;
                            prefix: number;
                            check_in_time: string;
                            check_out_time: string;
                            is_24_hour: boolean;
                            is_biweekly_mode: boolean;
                            is_one_shot: boolean;
                            is_master: boolean;
                            ext_dormakaba_oracode_user_level_prefix: number;
                            dormakaba_oracode_user_level_id: string;
                        }> | undefined;
                    } | undefined;
                    wyze_metadata?: {
                        device_id: string;
                        device_name: string;
                        product_name: string;
                        product_type: string;
                        product_model: string;
                        device_info_model: string;
                        keypad_uuid?: string | undefined;
                        locker_status_hardlock?: number | undefined;
                    } | undefined;
                    tedee_metadata?: {
                        device_id: number;
                        serial_number: string;
                        device_name: string;
                        device_model: string;
                        bridge_id: number;
                        bridge_name: string;
                        keypad_id?: number | undefined;
                    } | undefined;
                    visionline_metadata?: {
                        encoder_id: string;
                    } | undefined;
                    akiles_metadata?: {
                        gadget_name: string;
                        gadget_id: string;
                    } | undefined;
                }) & ({
                    _experimental_supported_code_from_access_codes_lengths?: (number[] | undefined) | undefined;
                    code_constraints?: (Array<{
                        constraint_type: 'no_zeros' | 'cannot_start_with_12' | 'no_triple_consecutive_ints' | 'cannot_specify_pin_code' | 'pin_code_matches_existing_set' | 'start_date_in_future' | 'no_ascending_or_descending_sequence' | 'at_least_three_unique_digits' | 'cannot_contain_089' | 'cannot_contain_0789';
                    } | {
                        constraint_type: 'name_length' | 'name_must_be_unique';
                        min_length?: number | undefined;
                        max_length?: number | undefined;
                    }> | undefined) | undefined;
                    supported_code_lengths?: (number[] | undefined) | undefined;
                    max_active_codes_supported?: (number | undefined) | undefined;
                    supports_backup_access_code_pool?: (boolean | undefined) | undefined;
                    has_native_entry_events?: (boolean | undefined) | undefined;
                    locked?: (boolean | undefined) | undefined;
                    keypad_battery?: ({
                        level: number;
                    } | undefined) | undefined;
                    door_open?: (boolean | undefined) | undefined;
                } & {
                    temperature_fahrenheit?: number | undefined;
                    temperature_celsius?: number | undefined;
                    relative_humidity?: number | undefined;
                    available_hvac_mode_settings?: Array<'off' | 'heat' | 'cool' | 'heat_cool'> | undefined;
                    available_fan_mode_settings?: Array<'auto' | 'on' | 'circulate'> | undefined;
                    is_heating?: boolean | undefined;
                    is_cooling?: boolean | undefined;
                    is_fan_running?: boolean | undefined;
                    /**
                     * @deprecated use current_climate_setting.fan_mode_setting instead. */
                    fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                    is_temporary_manual_override_active?: boolean | undefined;
                    current_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    /**
                     * @deprecated use fallback_climate_preset_key to specify a fallback climate preset instead. */
                    default_climate_setting?: {
                        climate_preset_key?: string | undefined;
                        can_edit?: boolean | undefined;
                        can_delete?: boolean | undefined;
                        name?: ((string | null) | undefined) | undefined;
                        display_name?: string | undefined;
                        fan_mode_setting?: (('auto' | 'on' | 'circulate') | undefined) | undefined;
                        hvac_mode_setting?: (('off' | 'heat' | 'cool' | 'heat_cool') | undefined) | undefined;
                        cooling_set_point_celsius?: (number | undefined) | undefined;
                        heating_set_point_celsius?: (number | undefined) | undefined;
                        cooling_set_point_fahrenheit?: (number | undefined) | undefined;
                        heating_set_point_fahrenheit?: (number | undefined) | undefined;
                        manual_override_allowed?: boolean | undefined;
                    } | undefined;
                    available_climate_presets?: Array<{
                        climate_preset_key: string;
                        can_edit: boolean;
                        can_delete: boolean;
                        name?: (string | null) | undefined;
                        display_name: string;
                        fan_mode_setting?: ('auto' | 'on' | 'circulate') | undefined;
                        hvac_mode_setting?: ('off' | 'heat' | 'cool' | 'heat_cool') | undefined;
                        cooling_set_point_celsius?: number | undefined;
                        heating_set_point_celsius?: number | undefined;
                        cooling_set_point_fahrenheit?: number | undefined;
                        heating_set_point_fahrenheit?: number | undefined;
                        manual_override_allowed: boolean;
                    }> | undefined;
                    fallback_climate_preset_key?: (string | null) | undefined;
                    active_thermostat_schedule?: ({
                        thermostat_schedule_id: string;
                        device_id: string;
                        name?: string | undefined;
                        climate_preset_key: string;
                        max_override_period_minutes: number;
                        starts_at: string;
                        ends_at: string;
                        created_at: string;
                        /** Collection of errors associated with the thermostat schedule, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues. */
                        errors?: any;
                    } | null) | undefined;
                    min_cooling_set_point_celsius?: number | undefined;
                    min_cooling_set_point_fahrenheit?: number | undefined;
                    max_cooling_set_point_celsius?: number | undefined;
                    max_cooling_set_point_fahrenheit?: number | undefined;
                    min_heating_set_point_celsius?: number | undefined;
                    min_heating_set_point_fahrenheit?: number | undefined;
                    max_heating_set_point_celsius?: number | undefined;
                    max_heating_set_point_fahrenheit?: number | undefined;
                    min_heating_cooling_delta_celsius?: number | undefined;
                    min_heating_cooling_delta_fahrenheit?: number | undefined;
                });
                /** Location information for the device. */
                location: {
                    /** Name of the device location. */
                    location_name?: string | undefined;
                    /** Time zone of the device location. */
                    timezone?: string | undefined;
                } | null;
                /** Unique identifier for the account associated with the device. */
                connected_account_id: string;
                /** Unique identifier for the Seam workspace associated with the device. */
                workspace_id: string;
                /** Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it. */
                errors: Array<{
                    message: string;
                    is_device_error: true;
                    error_code: string;
                } | {
                    message: string;
                    is_connected_account_error: true;
                    error_code: string;
                }>;
                /** Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it. */
                warnings: Array<{
                    message: string;
                    warning_code: string;
                }>;
                /** Date and time at which the device object was created. */
                created_at: string;
                /** Indicates whether Seam manages the device. */
                is_managed: true;
                custom_metadata: Record<string, string | boolean>;
                can_remotely_unlock?: boolean | undefined;
                can_remotely_lock?: boolean | undefined;
                can_program_offline_access_codes?: boolean | undefined;
                can_program_online_access_codes?: boolean | undefined;
                can_hvac_heat?: boolean | undefined;
                can_hvac_cool?: boolean | undefined;
                can_hvac_heat_cool?: boolean | undefined;
                can_turn_off_hvac?: boolean | undefined;
                can_simulate_removal?: boolean | undefined;
                can_simulate_connection?: boolean | undefined;
                can_simulate_disconnection?: boolean | undefined;
            }>;
        };
    };
    '/user_identities/list_acs_systems': {
        route: '/user_identities/list_acs_systems';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_systems: Array<{
                /** ID of the `acs_system`. */
                acs_system_id: string;
                /** Brand-specific terminology for the `acs_system` type. */
                external_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_system` type. */
                external_type_display_name?: string | undefined;
                visionline_metadata?: {
                    /** Keyset loaded into a reader. Mobile keys and reader administration tools securely authenticate only with readers programmed with a matching keyset. */
                    mobile_access_uuid: string;
                    /** Unique ID assigned by the ASSA ABLOY licensing team that identifies each hotel in your credential manager. */
                    system_id: string;
                    /** IP address or hostname of the main Visionline server relative to the Seam Bridge on the local network. */
                    lan_address: string;
                } | undefined;
                /**
                 * @deprecated Use `external_type`. */
                system_type?: ('pti_site' | 'alta_org' | 'salto_site' | 'brivo_account' | 'hid_credential_manager_organization' | 'visionline_system' | 'assa_abloy_credential_service' | 'latch_building') | undefined;
                /**
                 * @deprecated Use `external_type_display_name`. */
                system_type_display_name?: string | undefined;
                /** Name of the `acs_system`. */
                name: string;
                /** Date and time at which the `acs_system` was created. */
                created_at: string;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`. */
                workspace_id: string;
                /** IDs of the [connected accounts](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`. */
                connected_account_ids: string[];
                /** URL for the image that represents the `acs_system`. */
                image_url: string;
                /** Alternative text for the `acs_system` image. */
                image_alt_text: string;
                /** Errors associated with the `acs_system`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'seam_bridge_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Unique identifier of the type of error. Enables quick recognition and categorization of the issue. */
                    error_code: 'visionline_instance_unreachable';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the maximum number of users allowed for the site has been reached. This means that new access codes cannot be created. Contact Salto support to increase the user limit. */
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the access system has been disconnected. Please refer to [this guide](https://docs.seam.co/latest/capability-guides/access-systems/troubleshooting-your-access-control-system guide) to resolve the issue. */
                    error_code: 'acs_system_disconnected';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the login credentials are invalid. Please reconnect the account using the Connect Webview to restore access. */
                    error_code: 'account_disconnected';
                }>;
                /** Warnings associated with the `acs_system`. */
                warnings: Array<{
                    /** Date and time at which Seam created the warning. */
                    created_at: string;
                    /** Detailed description of the warning. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    /** Indicates that the Salto KS site has exceeded 80% of the maximum number of allowed users. Please increase your subscription limit, or delete some users from your site to rectify this. */
                    warning_code: 'salto_ks_subscription_limit_almost_reached';
                }>;
                /** Indicates whether it is possible to [launch enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) for the `acs_system`. */
                can_automate_enrollment?: boolean | undefined;
                /** Indicates whether the `acs_system` supports creating [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_create_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [removing users from access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#remove-an-acs-user-from-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_remove_acs_users_from_acs_access_groups?: boolean | undefined;
                /** Indicates whether the `acs_system` supports [adding users to access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#add-an-acs-user-to-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems). */
                can_add_acs_users_to_acs_access_groups?: boolean | undefined;
            }>;
        };
    };
    '/user_identities/list_acs_users': {
        route: '/user_identities/list_acs_users';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
        };
        formData: {};
        jsonResponse: {
            acs_users: Array<{
                /** ID of the `acs_user`. */
                acs_user_id: string;
                /** ID of the access control system that contains the `acs_user`. */
                acs_system_id: string;
                hid_acs_system_id?: string | undefined;
                /** ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`. */
                workspace_id: string;
                /** Date and time at which the `acs_user` was created. */
                created_at: string;
                /** Display name for the `acs_user`. */
                display_name: string;
                /** Brand-specific terminology for the `acs_user` type. */
                external_type?: ('pti_user' | 'brivo_user' | 'hid_credential_manager_user' | 'salto_site_user' | 'latch_user') | undefined;
                /** Display name that corresponds to the brand-specific terminology for the `acs_user` type. */
                external_type_display_name?: string | undefined;
                /** Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users). */
                is_suspended: boolean;
                /** `starts_at` and `ends_at` timestamps for the `acs_user`'s access. */
                access_schedule?: {
                    starts_at: string;
                    ends_at: string;
                } | undefined;
                /** ID of the user identity associated with the `acs_user`. */
                user_identity_id?: string | undefined;
                /** Full name of the user identity associated with the `acs_user`. */
                user_identity_full_name?: (string | null) | undefined;
                /** Email address of the user identity associated with the `acs_user`. */
                user_identity_email_address?: (string | null) | undefined;
                /** Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`). */
                user_identity_phone_number?: (string | null) | undefined;
                /**  */
                latest_desired_state_synced_with_provider_at?: string | undefined;
                /**  */
                is_latest_desired_state_synced_with_provider?: boolean | undefined;
                /** Warnings associated with the `acs_user`. */
                warnings: Array<{
                    created_at: string;
                    message: string;
                    warning_code: 'being_deleted';
                } | {
                    created_at: string;
                    message: string;
                    warning_code: 'salto_ks_user_not_subscribed';
                }>;
                /** Errors associated with the `acs_user`. */
                errors: Array<{
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'deleted_externally';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'salto_ks_subscription_limit_exceeded';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_create_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_update_on_acs_system';
                } | {
                    /** Date and time at which Seam created the error. */
                    created_at: string;
                    /** Detailed description of the error. Provides insights into the issue and potentially how to rectify it. */
                    message: string;
                    error_code: 'failed_to_delete_on_acs_system';
                }>;
                /** Full name of the `acs_user`. */
                full_name?: string | undefined;
                /**
                 * @deprecated use email_address. */
                email?: string | undefined;
                /** Email address of the `acs_user`. */
                email_address?: string | undefined;
                /** Phone number of the `acs_user` in E.164 format (for example, `+15555550100`). */
                phone_number?: string | undefined;
                is_managed: true;
            }>;
        };
    };
    '/user_identities/remove_acs_user': {
        route: '/user_identities/remove_acs_user';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            acs_user_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/revoke_access_to_device': {
        route: '/user_identities/revoke_access_to_device';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            user_identity_id: string;
            device_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/user_identities/update': {
        route: '/user_identities/update';
        method: 'PATCH' | 'POST';
        queryParams: {};
        jsonBody: {
            user_identity_id: string;
            user_identity_key?: (string | null) | undefined;
            email_address?: (string | null) | undefined;
            phone_number?: (string | null) | undefined;
            full_name?: (string | null) | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/webhooks/create': {
        route: '/webhooks/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            url: string;
            event_types?: string[];
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            webhook: {
                webhook_id: string;
                url: string;
                event_types?: string[] | undefined;
                secret?: string | undefined;
            };
        };
    };
    '/webhooks/delete': {
        route: '/webhooks/delete';
        method: 'DELETE' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            webhook_id: string;
        };
        formData: {};
        jsonResponse: {};
    };
    '/webhooks/get': {
        route: '/webhooks/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {
            webhook_id: string;
        };
        formData: {};
        jsonResponse: {
            webhook: {
                webhook_id: string;
                url: string;
                event_types?: string[] | undefined;
                secret?: string | undefined;
            };
        };
    };
    '/webhooks/list': {
        route: '/webhooks/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            webhooks: Array<{
                webhook_id: string;
                url: string;
                event_types?: string[] | undefined;
                secret?: string | undefined;
            }>;
        };
    };
    '/webhooks/update': {
        route: '/webhooks/update';
        method: 'PUT' | 'POST';
        queryParams: {};
        jsonBody: {
            webhook_id: string;
            event_types: string[];
        };
        commonParams: {};
        formData: {};
        jsonResponse: {};
    };
    '/workspaces/create': {
        route: '/workspaces/create';
        method: 'POST';
        queryParams: {};
        jsonBody: {
            name: string;
            company_name?: string | undefined;
            /**
             * @deprecated use company_name */
            connect_partner_name?: ((string | null) | null) | undefined;
            is_sandbox?: boolean;
            webview_primary_button_color?: string | undefined;
            webview_logo_shape?: ('circle' | 'square') | undefined;
        };
        commonParams: {};
        formData: {};
        jsonResponse: {
            workspace: {
                workspace_id: string;
                name: string;
                company_name: string;
                is_sandbox: boolean;
                /**
                 * @deprecated use company_name */
                connect_partner_name: (string | null) | null;
            };
        };
    };
    '/workspaces/get': {
        route: '/workspaces/get';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            workspace: {
                workspace_id: string;
                name: string;
                company_name: string;
                is_sandbox: boolean;
                /**
                 * @deprecated use company_name */
                connect_partner_name: (string | null) | null;
            };
        };
    };
    '/workspaces/list': {
        route: '/workspaces/list';
        method: 'GET' | 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            workspaces: Array<{
                workspace_id: string;
                name: string;
                company_name: string;
                is_sandbox: boolean;
                /**
                 * @deprecated use company_name */
                connect_partner_name: (string | null) | null;
            }>;
        };
    };
    '/workspaces/reset_sandbox': {
        route: '/workspaces/reset_sandbox';
        method: 'POST';
        queryParams: {};
        jsonBody: {};
        commonParams: {};
        formData: {};
        jsonResponse: {
            action_attempt: {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'LOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'LOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'LOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UNLOCK_DOOR';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UNLOCK_DOOR';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UNLOCK_DOOR';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'READ_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'READ_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'READ_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ENCODE_CARD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ENCODE_CARD';
                result: {
                    /** Matching acs_credential currently encoded on this card. */
                    acs_credential_id: string | null;
                    /** A number or sting that physically identifies this card. */
                    card_number: string | null;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ENCODE_CARD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'RESET_SANDBOX_WORKSPACE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_HEAT_COOL';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_HEAT_COOL';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_HEAT_COOL';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_FAN_MODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_FAN_MODE';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_FAN_MODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SET_THERMOSTAT_OFF';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SET_THERMOSTAT_OFF';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                result: {};
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'ACTIVATE_CLIMATE_PRESET';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'SYNC_ACCESS_CODES';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'SYNC_ACCESS_CODES';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_ACCESS_CODE';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_ACCESS_CODE';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'CREATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'DELETE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'pending';
                result: null;
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'success';
                error: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                result?: any;
            } | {
                /** The ID of the action attempt. */
                action_attempt_id: string;
                status: 'error';
                result: null;
                action_type: 'UPDATE_NOISE_THRESHOLD';
                error: {
                    type: string;
                    message: string;
                };
            };
        };
    };
}
type RouteResponse<Path extends keyof Routes> = Routes[Path]['jsonResponse'];
type RouteRequestBody<Path extends keyof Routes> = Routes[Path]['jsonBody'] & Routes[Path]['commonParams'];
type RouteRequestParams<Path extends keyof Routes> = Routes[Path]['queryParams'] & Routes[Path]['commonParams'];

declare const routes: {};

export { type AccessCode, type AccessCodeError, type AccessCodeWarning, type AcsAccessGroup, type AcsCredential, type AcsEntrance, type AcsSystem, type AcsUser, type ActionAttempt, type ClientSession, type ConnectWebview, type ConnectedAccount, type ConnectedAccountError, type ConnectedAccountWarning, type CustomMetadata, type Device, type DeviceError, type DeviceProvider, type DeviceWarning, type NoiseThreshold, type RouteRequestBody, type RouteRequestParams, type RouteResponse, type Routes, type SeamEvent, type SeamEventType, type ThermostatSchedule, type UnmanagedAccessCode, type UnmanagedDevice, type UserIdentity, type Webhook, type Workspace, _default as openapi, routes, schemas };
